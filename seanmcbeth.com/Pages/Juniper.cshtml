@page
@{
    ViewData["SubURL"] = "juniper";
    ViewData["Title"] = "Sean T. McBeth: Project Juniper";
    ViewData["Description"] = "Juniper is an .NET 7 and TypeScript framework for building WebXR applications.";
    ViewData["Screenshot"] = "/img/juniper.jpeg";
}

<h1>Juniper</h1>

<p>
    @ViewData["Description"] It is an evolution of my previous project, Primrose. <a href="https://github.com/capnmidnight/Juniper/">View the Juniper GitHub repository.</a>
</p>

<figure>
    <a href="~/apps/forest-and-dirt">
        <img src="~/img/juniper.jpeg" alt="Screenshot from Juniper" title="A forest demo built with Juniper" />
    </a>
    <figcaption>A forest demo built with Juniper</figcaption>
</figure>

<p>
    Juniper provides a number of major elements:
</p>

<ul>
    <li>A light set of conventions for configuring ASP.NET Core projects with Kestrel.</li>
    <li>A build tool, based on <a href="https://esbuild.github.io">ESBuild</a>, for managing TypeScript projects.</li>
    <li>
        C# libraries for a variety of tasks:
        <ul>
            <li>configuring HTTP servers (Kestrel),</li>
            <li>graph solving,</li>
            <li>units of measure conversion, and</li>
            <li>media asset management, decoding, and processing.</li>
        </ul>
    </li>
    <li>
        TypeScript libraries for a very wide variety of tasks:
        <ul>
            <li>a framework for building WebXR applications,</li>
            <li>reusable components for Three.js, including an event system, text rendering, and an Environment metaphor for WebXR apps</li>
            <li>managing complex, spatialized WebAudio graphs,</li>
            <li>managing WebRTC teleconferencing sessions,</li>
            <li>speech recognition,</li>
            <li>structured manipulation of the browser DOM and CSS,</li>
            <li>WebWorkers with async/await-capable wrapper interfaces,</li>
            <li>DOM widget objects, including: dialog boxes, tab panels, dock panels, tree views, property lists, and context menus,</li>
            <li>asynchronous request management with progress tracking, IndexedDB caching, and media type awareness,</li>
            <li>text rendering and animation with 2D HTML Canvas image rendering,</li>
            <li>an async/await-capable wrapper around IndexedDB,</li>
            <li>XUnit-style testing framework,</li>
            <li>logging and testing of DOM and WebGL apps,</li>
            <li>an addressable lookup of Unicode Emoji code points,</li>
            <li>an addressable lookup of extant Media Types,</li>
            <li>graph and tree collections,</li>
            <li>typesafe event handlers,</li>
            <li>units of measure conversion, and</li>
            <li>string manipulation and similarity matching.</li>
        </ul>
    </li>
</ul>