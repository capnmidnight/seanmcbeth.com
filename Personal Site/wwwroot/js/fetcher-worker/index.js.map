{
  "version": 3,
  "sources": ["../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayRemoveAt.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayClear.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayCompare.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayRemove.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/mapMap.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/mapJoin.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/PriorityList.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/PriorityMap.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/EventBase.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/identity.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Task.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/once.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Promisifier.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/typeChecks.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/Exception.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/flags.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/gis/Datum.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/math/angleClamp.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/BaseProgress.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/ChildProgressCallback.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/BaseParentProgressCallback.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/progressSplit.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/mapInvert.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/units/fileSize.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/units/length.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/URLBuilder.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/using.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/mediatypes/util.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/mediatypes/image.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/Asset.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/canvas.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/translateResponse.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/FetchingService.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/workers/WorkerServer.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/indexdb/index.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/FetchingServiceImplXHR.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/FetchingServiceServer.ts", "../../../src/fetcher-worker/index.ts"],
  "sourcesContent": ["/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}", "/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}", "\uFEFF/**\r\n * Checks to see if two arrays contain the same elements\r\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\r\n * @param arr1\r\n * @param arr2\r\n */\r\n\r\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\r\n    for (let i = 0; i < arr1.length; ++i) {\r\n        if (arr1[i] !== arr2[i]) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n", "import { arrayRemoveAt } from \"./arrayRemoveAt\";\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}", "\r\nexport function mapMap<T, U, V>(items: T[], makeID: (item: T) => U, makeValue: (item: T) => V) {\r\n    return new Map(items.map((item) => [makeID(item), makeValue(item)]));\r\n}", "import { isDefined } from \"../\";\r\n\r\nexport function mapJoin<KeyT, ValueT>(dest: Map<KeyT, ValueT>, ...sources: Map<KeyT, ValueT>[]): Map<KeyT, ValueT> {\r\n    for (const source of sources) {\r\n        if (isDefined(source)) {\r\n            for (const [key, value] of source) {\r\n                dest.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n", "import { isDefined, isNullOrUndefined } from \"../\";\r\nimport { arrayClear } from \"./arrayClear\";\r\nimport { arrayRemove } from \"./arrayRemove\";\r\n\r\nexport class PriorityList<KeyT, ValueT> {\r\n    private readonly items = new Map<KeyT, ValueT[]>();\r\n    private readonly defaultItems = new Array<ValueT>();\r\n\r\n    constructor(init?: [KeyT, ValueT][]) {\r\n        if (isDefined(init)) {\r\n            for (const [key, value] of init) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key: KeyT, value: ValueT): this {\r\n        if (isNullOrUndefined(key)) {\r\n            this.defaultItems.push(value);\r\n        }\r\n        else {\r\n            let list = this.items.get(key);\r\n            if (isNullOrUndefined(list)) {\r\n                this.items.set(key, list = []);\r\n            }\r\n\r\n            list.push(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    entries(): IterableIterator<[KeyT, ValueT[]]> {\r\n        return this.items.entries();\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n\r\n    keys(): IterableIterator<KeyT> {\r\n        return this.items.keys();\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const item of this.defaultItems) {\r\n            yield item;\r\n        }\r\n        for (const list of this.items.values()) {\r\n            for (const item of list) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: KeyT): boolean {\r\n        if (isDefined(key)) {\r\n            return this.items.has(key);\r\n        }\r\n        else {\r\n            return this.defaultItems.length > 0;\r\n        }\r\n    }\r\n\r\n    get(key: KeyT): ValueT[] {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems;\r\n        }\r\n\r\n        return this.items.get(key) || [];\r\n    }\r\n\r\n    count(key: KeyT): number {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems.length;\r\n        }\r\n\r\n        const list = this.get(key);\r\n        if (isDefined(list)) {\r\n            return list.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = this.defaultItems.length;\r\n        for (const list of this.items.values()) {\r\n            size += list.length;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key: KeyT) {\r\n        if (isNullOrUndefined(key)) {\r\n            return arrayClear(this.defaultItems).length > 0;\r\n        }\r\n        else {\r\n            return this.items.delete(key);\r\n        }\r\n    }\r\n\r\n    remove(key: KeyT, value: ValueT) {\r\n        if (isNullOrUndefined(key)) {\r\n            arrayRemove(this.defaultItems, value);\r\n        }\r\n        else {\r\n            const list = this.items.get(key);\r\n            if (isDefined(list)) {\r\n                arrayRemove(list, value);\r\n                if (list.length === 0) {\r\n                    this.items.delete(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n        arrayClear(this.defaultItems);\r\n    }\r\n}\r\n\r\n\r\n", "import { isDefined, isNullOrUndefined } from \"../\";\r\n\r\n\r\n\r\nexport class PriorityMap<Key1T, Key2T, ValueT> {\r\n    private readonly items = new Map<Key1T, Map<Key2T, ValueT>>();\r\n\r\n    constructor(init?: Iterable<[Key1T, Key2T, ValueT]>) {\r\n        if (isDefined(init)) {\r\n            for (const [key1, key2, value] of init) {\r\n                this.add(key1, key2, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key1: Key1T, key2: Key2T, value: ValueT): this {\r\n        let level1 = this.items.get(key1);\r\n        if (isNullOrUndefined(level1)) {\r\n            this.items.set(key1, level1 = new Map());\r\n        }\r\n\r\n        level1.set(key2, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    *entries(): IterableIterator<[Key1T, Key2T, ValueT]> {\r\n        for (const [key1, level1] of this.items) {\r\n            for (const [key2, value] of level1) {\r\n                yield [key1, key2, value];\r\n            }\r\n        }\r\n    }\r\n    keys(): IterableIterator<Key1T>;\r\n    keys(key1: Key1T): IterableIterator<Key2T>;\r\n    keys(key1?: Key1T): IterableIterator<Key1T | Key2T> {\r\n        if (isNullOrUndefined(key1)) {\r\n            return this.items.keys();\r\n        }\r\n        else {\r\n            return this.items.get(key1).keys();\r\n        }\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const level1 of this.items.values()) {\r\n            for (const value of level1.values()) {\r\n                yield value;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key1: Key1T, key2?: Key2T): boolean {\r\n        return this.items.has(key1)\r\n            && (isNullOrUndefined(key2)\r\n                || this.items.get(key1).has(key2));\r\n    }\r\n\r\n    get(key1: Key1T): Map<Key2T, ValueT>;\r\n    get(key1: Key1T, key2: Key2T): ValueT;\r\n    get(key1: Key1T, key2?: Key2T): ValueT | Map<Key2T, ValueT> {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.get(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).get(key2);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    count(key1: Key1T): number {\r\n        if (this.items.has(key1)) {\r\n            return this.items.get(key1).size;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = 0;\r\n        for (const list of this.items.values()) {\r\n            size += list.size;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key1: Key1T, key2?: Key2T) {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.delete(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).delete(key2);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n    }\r\n}\r\n", "import { arrayClear, arrayRemoveAt, isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "import { isBoolean, isDefined, isFunction } from \"../\";\r\nimport { arrayClear } from \"../collections\";\r\nimport { alwaysTrue } from \"../identity\";\r\nimport { Predicate } from \"./Predicate\";\r\n\r\n\r\n\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n    private readonly rejectTest: Predicate<any>;\r\n    private readonly resolveTest: Predicate<ResultsT>;\r\n    private readonly autoStart: boolean;\r\n\r\n    private _result: ResultsT = null;\r\n    private _error: any = null;\r\n    private _started = false;\r\n    private _errored = false;\r\n    private _finished = false;\r\n\r\n    readonly resolve: (value: ResultsT) => void;\r\n    readonly reject: (reason: any) => void;\r\n\r\n    constructor(autoStart?: boolean);\r\n    constructor(resolveTest: Predicate<ResultsT>, autoStart?: boolean)\r\n    constructor(resolveTest: Predicate<ResultsT>, rejectTest: Predicate<any>, autoStart?: boolean);\r\n    constructor(resolveTestOrAutoStart?: boolean | Predicate<ResultsT>, rejectTestOrAutoStart?: boolean | Predicate<any>, autoStart = true) {\r\n        if (isFunction(resolveTestOrAutoStart)) {\r\n            this.resolveTest = resolveTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.resolveTest = alwaysTrue;\r\n        }\r\n\r\n        if (isFunction(rejectTestOrAutoStart)) {\r\n            this.rejectTest = rejectTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.rejectTest = alwaysTrue;\r\n        }\r\n\r\n        if (isBoolean(resolveTestOrAutoStart)) {\r\n            this.autoStart = resolveTestOrAutoStart;\r\n        }\r\n        else if (isBoolean(rejectTestOrAutoStart)) {\r\n            this.autoStart = rejectTestOrAutoStart;\r\n        }\r\n        else if (isDefined(autoStart)) {\r\n            this.autoStart = autoStart;\r\n        }\r\n        else {\r\n            this.autoStart = false;\r\n        }\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n\r\n        this.resolve = this._resolve.bind(this);\r\n        this.reject = this._reject.bind(this);\r\n    }\r\n\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    get errored(): boolean {\r\n        return this._errored;\r\n    }\r\n\r\n    start() {\r\n        this._started = true;\r\n    }\r\n\r\n    private _resolve(value: ResultsT): void {\r\n        if (this.started\r\n            && !this.finished\r\n            && this.resolveTest(value)) {\r\n            this._result = value;\r\n            for (const thenner of this.onThens) {\r\n                thenner(value);\r\n            }\r\n            this._finished = true;\r\n        }\r\n    }\r\n\r\n    private _reject(reason: any): void {\r\n        if (this.started\r\n            && !this.finished\r\n            && this.rejectTest(reason)) {\r\n            this._error = reason;\r\n            this._errored = true;\r\n            for (const catcher of this.onCatches) {\r\n                catcher(reason);\r\n            }\r\n            this._finished = true;\r\n        }\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    reset() {\r\n        if (this.started && !this.finished) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n        this._started = this.autoStart;\r\n        this._errored = false;\r\n        this._finished = false;\r\n    }\r\n}", "import { alwaysFalse, alwaysTrue, Exception, isNullOrUndefined, isNumber, isString } from \"../\";\r\nimport { EventBase, TypedEventBase } from \"./EventBase\";\r\nimport { Task } from \"./Task\";\r\n\r\nfunction targetValidateEvent(target: EventTarget, type: string) {\r\n    return (\"on\" + type) in target;\r\n}\r\n\r\n/**\r\n * Wait for a specific event, one time.\r\n * @param target - the event target.\r\n * @param resolveEvt - the name of the event that will resolve the Promise this method creates.\r\n * @param [rejectEvt] - the name of the event that could reject the Promise this method creates.\r\n * @param [timeout] - the number of milliseconds to wait for the resolveEvt, before rejecting.\r\n */\r\nexport function once<EventsT>(target: TypedEventBase<EventsT> | EventTarget, resolveEvt: keyof EventsT & string, timeout: number, ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt]>;\r\nexport function once<EventsT>(target: TypedEventBase<EventsT> | EventTarget, resolveEvt: keyof EventsT & string, ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt]>;\r\nexport function once<EventsT>(target: EventTarget, resolveEvt: keyof EventsT & string, rejectEvtOrTimeout?: number | (keyof EventsT & string), ...rejectEvts: (keyof EventsT & string)[]): Task<EventsT[typeof resolveEvt]> {\r\n\r\n    if (isNullOrUndefined(rejectEvts)) {\r\n        rejectEvts = [];\r\n    }\r\n\r\n    let timeout: number = undefined;\r\n    if (isString(rejectEvtOrTimeout)) {\r\n        rejectEvts.unshift(rejectEvtOrTimeout);\r\n    }\r\n    else if (isNumber(rejectEvtOrTimeout)) {\r\n        timeout = rejectEvtOrTimeout;\r\n    }\r\n\r\n    if (!(target instanceof EventBase)) {\r\n        if (!targetValidateEvent(target, resolveEvt)) {\r\n            throw new Exception(`Target does not have a ${resolveEvt} rejection event`);\r\n        }\r\n\r\n        for (const evt of rejectEvts) {\r\n            if (!targetValidateEvent(target, evt)) {\r\n                throw new Exception(`Target does not have a ${evt} rejection event`);\r\n            }\r\n        }\r\n    }\r\n\r\n    const task = new Task<EventsT[typeof resolveEvt]>();\r\n\r\n    if (isNumber(timeout)) {\r\n        const timeoutHandle = setTimeout(task.reject, timeout, `'${resolveEvt}' has timed out.`);\r\n        task.finally(clearTimeout.bind(globalThis, timeoutHandle));\r\n    }\r\n\r\n    const register = (evt: keyof EventsT & string, callback: (evt: Event) => void) => {\r\n        target.addEventListener(evt, callback);\r\n        task.finally(() => target.removeEventListener(evt, callback));\r\n    }\r\n\r\n    const onResolve = (evt: Event) => task.resolve(evt as any as EventsT[typeof resolveEvt]);\r\n    const onReject = (evt: Event) => task.reject(evt as any as EventsT[keyof EventsT]);\r\n    register(resolveEvt, onResolve);\r\n\r\n    for (const rejectEvt of rejectEvts) {\r\n        register(rejectEvt, onReject);\r\n    }\r\n\r\n    return task;\r\n}\r\n\r\nexport function success<T>(task: Task<T>): Promise<boolean> {\r\n    return task.then(alwaysTrue)\r\n        .catch(alwaysFalse);\r\n};", "export class Promisifier<T = void> implements Promise<T> {\r\n\r\n    private readonly promise: Promise<T>;\r\n\r\n    callback: (...args: any[]) => void = null;\r\n\r\n    constructor(\r\n        resolveRejectTest: (...args: any[]) => boolean,\r\n        selectValue: (...args: any[]) => T,\r\n        selectRejectionReason: (...args: any[]) => any) {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.callback = (...args: any[]) => {\r\n                if (resolveRejectTest(...args)) {\r\n                    resolve(selectValue(...args));\r\n                }\r\n                else {\r\n                    reject(selectRejectionReason(...args));\r\n                }\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<T> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && Number.isFinite(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "export class Exception extends Error {\r\n    constructor(message: string, public readonly innerError: any = null) {\r\n        super(message);\r\n    }\r\n}", "export function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || /Pico Neo 3 Link/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = /*@__PURE__*/ !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = /*@__PURE__*/ isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = /*@__PURE__*/ isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = /*@__PURE__*/ isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = /*@__PURE__*/ isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = /*@__PURE__*/ isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorkerSupported = /*@__PURE__*/ \"Worker\" in globalThis;", "const FalseNorthing: number = 10000000;\r\nconst invF: number = 298.257223563;\r\nconst equatorialRadius: number = 6378137;\r\nconst pointScaleFactor: number = 0.9996;\r\nconst E0: number = 500000;\r\n\r\nconst flattening: number = 1 / invF;\r\nconst flatteningComp: number = 1 - flattening;\r\nconst n: number = flattening / (2 - flattening);\r\nconst A: number = (equatorialRadius / (1 + n)) * (1 + (n * n / 4) + (n * n * n * n / 64));\r\n\r\nconst e: number = Math.sqrt(1 - (flatteningComp * flatteningComp));\r\nconst esq: number = 1 - (flatteningComp * flatteningComp);\r\nconst e0sq: number = e * e / (1 - (e * e));\r\n\r\nconst alpha1: number = 1 - (esq * (0.25 + (esq * ((3 / 64) + (5 * esq / 256)))));\r\nconst alpha2: number = esq * ((3 / 8) + (esq * ((3 / 32) + (45 * esq / 1024))));\r\nconst alpha3: number = esq * esq * ((15 / 256) + (esq * 45 / 1024));\r\nconst alpha4: number = esq * esq * esq * (35 / 3072);\r\n\r\nconst beta: number[] = [\r\n    (n / 2) - (2 * n * n / 3) + (37 * n * n * n / 96),\r\n    (n * n / 48) + (n * n * n / 15),\r\n    17 * n * n * n / 480\r\n];\r\n\r\nconst delta: number[] = [\r\n    (2 * n) - (2 * n * n / 3),\r\n    (7 * n * n / 3) - (8 * n * n * n / 5),\r\n    56 * n * n * n / 15\r\n];\r\n\r\nexport const DatumWGS_84 = /*@__PURE__*/ {\r\n    FalseNorthing,\r\n    equatorialRadius,\r\n    pointScaleFactor,\r\n    E0,\r\n\r\n    A,\r\n    flattening,\r\n    \r\n    e,\r\n    esq,\r\n    e0sq,\r\n\r\n    alpha1,\r\n    alpha2,\r\n    alpha3,\r\n    alpha4,\r\n\r\n    beta,\r\n    delta\r\n};", "const Tau = 2 * Math.PI;\r\n\r\nexport function angleClamp(v: number) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n", "import { arrayClear, TypedEventBase } from \"../\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseProgress<T = void>\r\n    extends TypedEventBase<T>\r\n    implements IProgress {\r\n    private readonly attached = new Array<IProgress>();\r\n    private soFar: number = null;\r\n    private total: number = null;\r\n    private msg: string = null;\r\n    private est: number = null;\r\n\r\n    protected get p() {\r\n        return this.total > 0\r\n            ? this.soFar / this.total\r\n            : 0;\r\n    }\r\n\r\n    report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n\r\n    attach(prog: IProgress): void {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n\r\n    clear() {\r\n        this.report(0, 0);\r\n        this._clear();\r\n    }\r\n\r\n    start(msg?: string) {\r\n        this.report(0, 1, msg || \"starting\");\r\n    }\r\n\r\n    end(msg?: string) {\r\n        this.report(1, 1, msg || \"done\");\r\n        this._clear();\r\n    }\r\n\r\n    private _clear() {\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}", "import type { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { BaseProgress } from \"./BaseProgress\";\r\n\r\nexport class ChildProgressCallback extends BaseProgress {\r\n    constructor(private readonly i: number, private readonly prog: BaseParentProgressCallback) {\r\n        super();\r\n    }\r\n\r\n    override report(soFar: number, total: number, msg?: string, est?: number) {\r\n        super.report(soFar, total, msg, est);\r\n        this.prog.update(this.i, soFar, total, msg);\r\n    }\r\n}\r\n", "import { ChildProgressCallback } from \"./ChildProgressCallback\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseParentProgressCallback {\r\n    private weightTotal = 0;\r\n    private readonly start: number;\r\n\r\n    readonly subProgressCallbacks = new Array<IProgress>();\r\n    private readonly subProgressWeights = new Array<number>();\r\n    private readonly subProgressValues = new Array<number>();\r\n\r\n    constructor(private readonly prog: IProgress) {\r\n        this.start = performance.now();\r\n\r\n        for (let i = 0; i < this.subProgressWeights.length; ++i) {\r\n            this.subProgressValues[i] = 0;\r\n            this.subProgressCallbacks[i] = new ChildProgressCallback(i, this);\r\n        }\r\n    }\r\n\r\n    protected addSubProgress(weight?: number): IProgress {\r\n        weight = weight || 1;\r\n        this.weightTotal += weight;\r\n        this.subProgressWeights.push(weight);\r\n        this.subProgressValues.push(0);\r\n        const child = new ChildProgressCallback(this.subProgressCallbacks.length, this);\r\n        this.subProgressCallbacks.push(child);\r\n        return child;\r\n    }\r\n\r\n\r\n    update(i: number, subSoFar: number, subTotal: number, msg?: string) {\r\n        if (this.prog) {\r\n            this.subProgressValues[i] = subSoFar / subTotal;\r\n            let soFar = 0;\r\n            for (let j = 0; j < this.subProgressWeights.length; ++j) {\r\n                soFar += this.subProgressValues[j] * this.subProgressWeights[j];\r\n            }\r\n\r\n            const end = performance.now();\r\n            const delta = end - this.start;\r\n            const est = this.start - end + delta * this.weightTotal / soFar;\r\n            this.prog.report(soFar, this.weightTotal, msg, est);\r\n        }\r\n    };\r\n}\r\n", "import { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { IProgress } from \"./IProgress\";\r\n\r\nexport function progressSplitWeighted(prog: IProgress, subProgressWeights: number[]) {\r\n    const subProg = new WeightedParentProgressCallback(subProgressWeights, prog);\r\n    return subProg.subProgressCallbacks;\r\n}\r\n\r\n\r\nexport function progressSplit(prog: IProgress, taskCount: number) {\r\n    const subProgressWeights = new Array<number>(taskCount);\r\n    for (let i = 0; i < taskCount; ++i) {\r\n        subProgressWeights[i] = 1;\r\n    }\r\n\r\n    return progressSplitWeighted(prog, subProgressWeights);\r\n}\r\n\r\nclass WeightedParentProgressCallback extends BaseParentProgressCallback {\r\n\r\n    constructor(subProgressWeights: number[], prog: IProgress) {\r\n        super(prog);\r\n\r\n        for (const weight of subProgressWeights) {\r\n            this.addSubProgress(weight);\r\n        }\r\n    }\r\n}\r\n", "export function mapInvert<T, U>(map: Map<T, U>): Map<U, T> {\r\n    const mapOut = new Map<U, T>();\r\n    for (const [key, value] of map) {\r\n        mapOut.set(value, key);\r\n    }\r\n    return mapOut;\r\n}\r\n\r\n", "import { mapInvert } from \"../collections/mapInvert\";\r\nimport { assertNever } from \"../typeChecks\";\r\n\r\ntype Base = 2 | 10;\r\n\r\ntype Base2Units = \"KiB\"\r\n    | \"MiB\"\r\n    | \"GiB\"\r\n    | \"TiB\";\r\n\r\ntype Base10Units = \"KB\"\r\n    | \"MB\"\r\n    | \"GB\"\r\n    | \"TB\";\r\n\r\ntype Units = \"B\"\r\n    | Base2Units\r\n    | Base10Units;\r\n\r\nfunction isBase2Units(label: Units): label is Base2Units {\r\n    return label !== \"B\"\r\n        && label[1] === 'i';\r\n}\r\n\r\nfunction isBase10Units(label: Units): label is Base10Units {\r\n    return label !== \"B\"\r\n        && !isBase10Units(label);\r\n}\r\n\r\nconst base2Labels = new Map<number, Base2Units>([\r\n    [1, \"KiB\"],\r\n    [2, \"MiB\"],\r\n    [3, \"GiB\"],\r\n    [4, \"TiB\"]\r\n]);\r\n\r\nconst base10Labels = new Map<number, Base10Units>([\r\n    [1, \"KB\"],\r\n    [2, \"MB\"],\r\n    [3, \"GB\"],\r\n    [4, \"TB\"]\r\n]);\r\n\r\nconst base2Sizes = mapInvert(base2Labels);\r\nconst base10Sizes = mapInvert(base10Labels);\r\n\r\nconst labels = new Map<Base, Map<number, Units>>([\r\n    [2, base2Labels],\r\n    [10, base10Labels]\r\n]);\r\n\r\nexport function formatBytes(value: number, base: 2 | 10 = 10) {\r\n    const isNegative = value < 0;\r\n    value = Math.abs(value);\r\n\r\n    const systemBase = base === 2 ? 1024 : 1000;\r\n    let size = Math.min(4, Math.floor(Math.log(value) / Math.log(systemBase)));\r\n    let divisor = Math.pow(systemBase, size);\r\n    if (2 * value >= systemBase * divisor && size < 4) {\r\n        size++;\r\n        divisor *= systemBase;\r\n    }\r\n\r\n    let label: string;\r\n    if (size === 0) {\r\n        label = \"B\";\r\n    }\r\n    else {\r\n        const levels = labels.get(base);\r\n        label = levels.get(size);\r\n        value /= divisor;\r\n    }\r\n\r\n    const isExact = (value % 1) === 0;\r\n    const str = `${isNegative ? \"-\" : \"\"}${value.toFixed(isExact ? 0 : 2)} ${label}`;\r\n\r\n    return str;\r\n}\r\n\r\nexport function toBytes(value: number, units: Units): number {\r\n    if (units === \"B\") {\r\n        return value;\r\n    }\r\n    else {\r\n        let systemBase: number;\r\n        let size: number;\r\n        if (isBase2Units(units)) {\r\n            systemBase = 1024;\r\n            size = base2Sizes.get(units);\r\n        }\r\n        else if (isBase10Units(units)) {\r\n            systemBase = 1000;\r\n            size = base10Sizes.get(units);\r\n        }\r\n        else {\r\n            assertNever(units);\r\n        }\r\n\r\n        const multiplier = Math.pow(systemBase, size);\r\n        return value * multiplier;\r\n    }\r\n}", "const MICROMETERS_PER_MILLIMETER = 1000;\r\nconst MILLIMETERS_PER_CENTIMETER = 10;\r\nconst CENTIMETERS_PER_INCH = 2.54;\r\nconst CENTIMETERS_PER_METER = 100;\r\nconst INCHES_PER_HAND = 4;\r\nconst HANDS_PER_FOOT = 3;\r\nconst FEET_PER_YARD = 3;\r\nconst FEET_PER_ROD = 16.5;\r\nconst METERS_PER_KILOMETER = 1000;\r\nconst RODS_PER_FURLONG = 40;\r\nconst FURLONGS_PER_MILE = 8;\r\n\r\nconst MICROMETERS_PER_CENTIMETER = MICROMETERS_PER_MILLIMETER * MILLIMETERS_PER_CENTIMETER;\r\nconst MICROMETERS_PER_INCH = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MICROMETERS_PER_HAND = MICROMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MICROMETERS_PER_FOOT = MICROMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MICROMETERS_PER_YARD = MICROMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MICROMETERS_PER_METER = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MICROMETERS_PER_ROD = MICROMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MICROMETERS_PER_FURLONG = MICROMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MICROMETERS_PER_KILOMETER = MICROMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MICROMETERS_PER_MILE = MICROMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst MILLIMETERS_PER_INCH = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MILLIMETERS_PER_HAND = MILLIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MILLIMETERS_PER_FOOT = MILLIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MILLIMETERS_PER_YARD = MILLIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MILLIMETERS_PER_METER = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MILLIMETERS_PER_ROD = MILLIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MILLIMETERS_PER_FURLONG = MILLIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MILLIMETERS_PER_KILOMETER = MILLIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MILLIMETERS_PER_MILE = MILLIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst CENTIMETERS_PER_HAND = CENTIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst CENTIMETERS_PER_FOOT = CENTIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst CENTIMETERS_PER_YARD = CENTIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst CENTIMETERS_PER_ROD = CENTIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst CENTIMETERS_PER_FURLONG = CENTIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst CENTIMETERS_PER_KILOMETER = CENTIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst CENTIMETERS_PER_MILE = CENTIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst INCHES_PER_FOOT = INCHES_PER_HAND * HANDS_PER_FOOT;\r\nconst INCHES_PER_YARD = INCHES_PER_FOOT * FEET_PER_YARD;\r\nconst INCHES_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_INCH;\r\nconst INCHES_PER_ROD = INCHES_PER_FOOT * FEET_PER_ROD;\r\nconst INCHES_PER_FURLONG = INCHES_PER_ROD * RODS_PER_FURLONG;\r\nconst INCHES_PER_KILOMETER = INCHES_PER_METER * METERS_PER_KILOMETER;\r\nconst INCHES_PER_MILE = INCHES_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst HANDS_PER_YARD = HANDS_PER_FOOT * FEET_PER_YARD;\r\nconst HANDS_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_HAND;\r\nconst HANDS_PER_ROD = HANDS_PER_FOOT * FEET_PER_ROD;\r\nconst HANDS_PER_FURLONG = HANDS_PER_ROD * RODS_PER_FURLONG;\r\nconst HANDS_PER_KILOMETER = HANDS_PER_METER * METERS_PER_KILOMETER;\r\nconst HANDS_PER_MILE = HANDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FEET_PER_METER = INCHES_PER_METER / INCHES_PER_FOOT;\r\nconst FEET_PER_FURLONG = FEET_PER_ROD * RODS_PER_FURLONG;\r\nconst FEET_PER_KILOMETER = FEET_PER_METER * METERS_PER_KILOMETER;\r\nconst FEET_PER_MILE = FEET_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst YARDS_PER_METER = INCHES_PER_METER / INCHES_PER_YARD;\r\nconst YARDS_PER_ROD = FEET_PER_ROD / FEET_PER_YARD;\r\nconst YARDS_PER_FURLONG = YARDS_PER_ROD * RODS_PER_FURLONG;\r\nconst YARDS_PER_KILOMETER = YARDS_PER_METER * METERS_PER_KILOMETER;\r\nconst YARDS_PER_MILE = YARDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst METERS_PER_ROD = FEET_PER_ROD / FEET_PER_METER;\r\nconst METERS_PER_FURLONG = METERS_PER_ROD * RODS_PER_FURLONG;\r\nconst METERS_PER_MILE = METERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst RODS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_ROD;\r\nconst RODS_PER_MILE = RODS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FURLONGS_PER_KILOMETER = METERS_PER_KILOMETER /METERS_PER_FURLONG;\r\n\r\nconst KILOMETERS_PER_MILE = FURLONGS_PER_MILE / FURLONGS_PER_KILOMETER;\r\n\r\n\r\nexport function centimeters2Micrometers(centimeters: number): number {\r\n    return centimeters * MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Millimeters(centimeters: number): number {\r\n    return centimeters * MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Inches(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function centimeters2Hands(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function centimeters2Feet(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function centimeters2Yards(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function centimeters2Meters(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function centimeters2Rods(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function centimeters2Furlongs(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function centimeters2Kilometers(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function centimeters2Miles(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function feet2Micrometers(feet: number): number {\r\n    return feet * MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Millimeters(feet: number): number {\r\n    return feet * MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Centimeters(feet: number): number {\r\n    return feet * CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Inches(feet: number): number {\r\n    return feet * INCHES_PER_FOOT;\r\n}\r\n\r\nexport function feet2Hands(feet: number): number {\r\n    return feet * HANDS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Yards(feet: number): number {\r\n    return feet / FEET_PER_YARD;\r\n}\r\n\r\nexport function feet2Meters(feet: number): number {\r\n    return feet / FEET_PER_METER;\r\n}\r\n\r\nexport function feet2Rods(feet: number): number {\r\n    return feet / FEET_PER_ROD;\r\n}\r\n\r\nexport function feet2Furlongs(feet: number): number {\r\n    return feet / FEET_PER_FURLONG;\r\n}\r\n\r\nexport function feet2Kilometers(feet: number): number {\r\n    return feet / FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function feet2Miles(feet: number): number {\r\n    return feet / FEET_PER_MILE;\r\n}\r\n\r\nexport function furlongs2Micrometers(furlongs: number): number {\r\n    return furlongs * MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Millimeters(furlongs: number): number {\r\n    return furlongs * MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Centimeters(furlongs: number): number {\r\n    return furlongs * CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Inches(furlongs: number): number {\r\n    return furlongs * INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Hands(furlongs: number): number {\r\n    return furlongs * HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Feet(furlongs: number): number {\r\n    return furlongs * FEET_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Yards(furlongs: number): number {\r\n    return furlongs * YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Meters(furlongs: number): number {\r\n    return furlongs * METERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Rods(furlongs: number): number {\r\n    return furlongs * RODS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Kilometers(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function furlongs2Miles(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function hands2Micrometers(hands: number): number {\r\n    return hands * MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Millimeters(hands: number): number {\r\n    return hands * MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Centimeters(hands: number): number {\r\n    return hands * CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Inches(hands: number): number {\r\n    return hands * INCHES_PER_HAND;\r\n}\r\n\r\nexport function hands2Feet(hands: number): number {\r\n    return hands / HANDS_PER_FOOT;\r\n}\r\n\r\nexport function hands2Yards(hands: number): number {\r\n    return hands / HANDS_PER_YARD;\r\n}\r\n\r\nexport function hands2Meters(hands: number): number {\r\n    return hands / HANDS_PER_METER;\r\n}\r\n\r\nexport function hands2Rods(hands: number): number {\r\n    return hands / HANDS_PER_ROD;\r\n}\r\n\r\nexport function hands2Furlongs(hands: number): number {\r\n    return hands / HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function hands2Kilometers(hands: number): number {\r\n    return hands / HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function hands2Miles(hands: number): number {\r\n    return hands / HANDS_PER_MILE;\r\n}\r\n\r\nexport function inches2Micrometers(inches: number): number {\r\n    return inches * MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Millimeters(inches: number): number {\r\n    return inches * MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Centimeters(inches: number): number {\r\n    return inches * CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Hands(inches: number): number {\r\n    return inches / INCHES_PER_HAND;\r\n}\r\n\r\nexport function inches2Feet(inches: number): number {\r\n    return inches / INCHES_PER_FOOT;\r\n}\r\n\r\nexport function inches2Yards(inches: number): number {\r\n    return inches / INCHES_PER_YARD;\r\n}\r\n\r\nexport function inches2Meters(inches: number): number {\r\n    return inches / INCHES_PER_METER;\r\n}\r\n\r\nexport function inches2Rods(inches: number): number {\r\n    return inches / INCHES_PER_ROD;\r\n}\r\n\r\nexport function inches2Furlongs(inches: number): number {\r\n    return inches / INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function inches2Kilometers(inches: number): number {\r\n    return inches / INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function inches2Miles(inches: number): number {\r\n    return inches / INCHES_PER_MILE;\r\n}\r\n\r\nexport function kilometers2Micrometers(kilometers: number): number {\r\n    return kilometers * MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Millimeters(kilometers: number): number {\r\n    return kilometers * MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Centimeters(kilometers: number): number {\r\n    return kilometers * CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Inches(kilometers: number): number {\r\n    return kilometers * INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Hands(kilometers: number): number {\r\n    return kilometers * HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Feet(kilometers: number): number {\r\n    return kilometers * FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Yards(kilometers: number): number {\r\n    return kilometers * YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Meters(kilometers: number): number {\r\n    return kilometers * METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Rods(kilometers: number): number {\r\n    return kilometers * RODS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Furlongs(kilometers: number): number {\r\n    return kilometers * FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Miles(kilometers: number): number {\r\n    return kilometers / KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function meters2Micrometers(meters: number): number {\r\n    return meters * MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Millimeters(meters: number): number {\r\n    return meters * MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Centimeters(meters: number): number {\r\n    return meters * CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Inches(meters: number): number {\r\n    return meters * INCHES_PER_METER;\r\n}\r\n\r\nexport function meters2Hands(meters: number): number {\r\n    return meters * HANDS_PER_METER;\r\n}\r\n\r\nexport function meters2Feet(meters: number): number {\r\n    return meters * FEET_PER_METER;\r\n}\r\n\r\nexport function meters2Yards(meters: number): number {\r\n    return meters * YARDS_PER_METER;\r\n}\r\n\r\nexport function meters2Rods(meters: number): number {\r\n    return meters / METERS_PER_ROD;\r\n}\r\n\r\nexport function meters2Furlongs(meters: number): number {\r\n    return meters / METERS_PER_FURLONG;\r\n}\r\n\r\nexport function meters2Kilometers(meters: number): number {\r\n    return meters / METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function meters2Miles(meters: number): number {\r\n    return meters / METERS_PER_MILE;\r\n}\r\n\r\nexport function micrometers2Millimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function micrometers2Centimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function micrometers2Inches(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function micrometers2Hands(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function micrometers2Feet(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function micrometers2Yards(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function micrometers2Meters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function micrometers2Rods(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function micrometers2Furlongs(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function micrometers2Kilometers(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function micrometers2Miles(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Micrometers(miles: number): number {\r\n    return miles * MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Millimeters(miles: number): number {\r\n    return miles * MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Centimeters(miles: number): number {\r\n    return miles * CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Inches(miles: number): number {\r\n    return miles * INCHES_PER_MILE;\r\n}\r\n\r\nexport function miles2Hands(miles: number): number {\r\n    return miles * HANDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Feet(miles: number): number {\r\n    return miles * FEET_PER_MILE;\r\n}\r\n\r\nexport function miles2Yards(miles: number): number {\r\n    return miles * YARDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Meters(miles: number): number {\r\n    return miles * METERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Rods(miles: number): number {\r\n    return miles * RODS_PER_MILE;\r\n}\r\n\r\nexport function miles2Furlongs(miles: number): number {\r\n    return miles * FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function miles2Kilometers(miles: number): number {\r\n    return miles * KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function millimeters2Micrometers(millimeters: number): number {\r\n    return millimeters * MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function millimeters2Centimeters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function millimeters2Inches(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function millimeters2Hands(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function millimeters2Feet(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function millimeters2Yards(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function millimeters2Meters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function millimeters2Rods(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function millimeters2Furlongs(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function millimeters2Kilometers(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function millimeters2Miles(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function rods2Micrometers(rods: number): number {\r\n    return rods * MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Millimeters(rods: number): number {\r\n    return rods * MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Centimeters(rods: number): number {\r\n    return rods * CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Inches(rods: number): number {\r\n    return rods * INCHES_PER_ROD;\r\n}\r\n\r\nexport function rods2Hands(rods: number): number {\r\n    return rods * HANDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Feet(rods: number): number {\r\n    return rods * FEET_PER_ROD;\r\n}\r\n\r\nexport function rods2Yards(rods: number): number {\r\n    return rods * YARDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Meters(rods: number): number {\r\n    return rods * METERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Furlongs(rods: number): number {\r\n    return rods / RODS_PER_FURLONG;\r\n}\r\n\r\nexport function rods2Kilometers(rods: number): number {\r\n    return rods / RODS_PER_KILOMETER;\r\n}\r\n\r\nexport function rods2Miles(rods: number): number {\r\n    return rods / RODS_PER_MILE;\r\n}\r\n\r\nexport function yards2Micrometers(yards: number): number {\r\n    return yards * MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Millimeters(yards: number): number {\r\n    return yards * MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Centimeters(yards: number): number {\r\n    return yards * CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Inches(yards: number): number {\r\n    return yards * INCHES_PER_YARD;\r\n}\r\n\r\nexport function yards2Hands(yards: number): number {\r\n    return yards * HANDS_PER_YARD;\r\n}\r\n\r\nexport function yards2Feet(yards: number): number {\r\n    return yards * FEET_PER_YARD;\r\n}\r\n\r\nexport function yards2Meters(yards: number): number {\r\n    return yards / YARDS_PER_METER;\r\n}\r\n\r\nexport function yards2Rods(yards: number): number {\r\n    return yards / YARDS_PER_ROD;\r\n}\r\n\r\nexport function yards2Furlongs(yards: number): number {\r\n    return yards / YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function yards2Kilometers(yards: number): number {\r\n    return yards / YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function yards2Miles(yards: number): number {\r\n    return yards / YARDS_PER_MILE;\r\n}", "import { isDefined } from \"./typeChecks\";\r\n\r\ntype ProtocolType = `${string}:`;\r\n\r\nfunction parsePort(portString: string): number {\r\n    if (isDefined(portString) && portString.length > 0) {\r\n        return parseFloat(portString);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport class URLBuilder {\r\n    private _url: URL = null;\r\n    private _base: string | URL = undefined;\r\n    private _protocol: string = null\r\n    private _host: string = null;\r\n    private _hostName: string = null;\r\n    private _userName: string = null;\r\n    private _password: string = null;\r\n    private _port: number = null;\r\n    private _pathName: string = null;\r\n    private _hash: string = null;\r\n    private readonly _query = new Map<string, string>();\r\n\r\n    constructor(url?: string | URL, base?: string | URL) {\r\n        if (url !== undefined) {\r\n            this._url = new URL(url, base);\r\n            this.rehydrate();\r\n        }\r\n    }\r\n\r\n    private rehydrate(): void {\r\n        if (isDefined(this._protocol) && this._protocol !== this._url.protocol) {\r\n            this._url.protocol = this._protocol;\r\n        }\r\n\r\n        if (isDefined(this._host) && this._host !== this._url.host) {\r\n            this._url.host = this._host;\r\n        }\r\n\r\n        if (isDefined(this._hostName) && this._hostName !== this._url.hostname) {\r\n            this._url.hostname = this._hostName;\r\n        }\r\n\r\n        if (isDefined(this._userName) && this._userName !== this._url.username) {\r\n            this._url.username = this._userName;\r\n        }\r\n\r\n        if (isDefined(this._password) && this._password !== this._url.password) {\r\n            this._url.password = this._password;\r\n        }\r\n\r\n        if (isDefined(this._port) && this._port.toFixed(0) !== this._url.port) {\r\n            this._url.port = this._port.toFixed(0);\r\n        }\r\n\r\n        if (isDefined(this._pathName) && this._pathName !== this._url.pathname) {\r\n            this._url.pathname = this._pathName;\r\n        }\r\n\r\n        if (isDefined(this._hash) && this._hash !== this._url.hash) {\r\n            this._url.hash = this._hash;\r\n        }\r\n\r\n        for (const [k, v] of this._query) {\r\n            this._url.searchParams.set(k, v);\r\n        }\r\n\r\n        this._protocol = this._url.protocol;\r\n        this._host = this._url.host;\r\n        this._hostName = this._url.hostname;\r\n        this._userName = this._url.username;\r\n        this._password = this._url.password;\r\n        this._port = parsePort(this._url.port);\r\n        this._pathName = this._url.pathname;\r\n        this._hash = this._url.hash;\r\n        this._url.searchParams.forEach((v, k) =>\r\n            this._query.set(k, v));\r\n    }\r\n\r\n    private refresh(): boolean {\r\n        if (this._url === null) {\r\n            if (isDefined(this._protocol)\r\n                && (isDefined(this._host) || isDefined(this._hostName))) {\r\n                if (isDefined(this._host)) {\r\n                    this._url = new URL(`${this._protocol}//${this._host}`, this._base);\r\n                    this._port = parsePort(this._url.port);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n                else if (isDefined(this._hostName)) {\r\n                    this._url = new URL(`${this._protocol}//${this._hostName}`, this._base);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n            }\r\n            else if (isDefined(this._pathName) && isDefined(this._base)) {\r\n                this._url = new URL(this._pathName, this._base);\r\n                this.rehydrate();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return isDefined(this._url);\r\n    }\r\n\r\n    base(base: string | URL) {\r\n        if (this._url !== null) {\r\n            throw new Error(\"Cannot redefine base after defining the protocol and domain\")\r\n        }\r\n\r\n        this._base = base;\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n    protocol(protocol: ProtocolType) {\r\n        this._protocol = protocol;\r\n        if (this.refresh()) {\r\n            this._url.protocol = protocol;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    host(host: string) {\r\n        this._host = host;\r\n        if (this.refresh()) {\r\n            this._url.host = host;\r\n            this._hostName = this._url.hostname;\r\n            this._port = parsePort(this._url.port);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hostName(hostName: string) {\r\n        this._hostName = hostName;\r\n        if (this.refresh()) {\r\n            this._url.hostname = hostName;\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    port(port: number) {\r\n        this._port = port;\r\n        if (this.refresh()) {\r\n            this._url.port = port.toFixed(0);\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    userName(userName: string) {\r\n        this._userName = userName;\r\n        if (this.refresh()) {\r\n            this._url.username = userName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    password(password: string) {\r\n        this._password = password;\r\n        if (this.refresh()) {\r\n            this._url.password = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    path(path: string) {\r\n        this._pathName = path;\r\n        if (this.refresh()) {\r\n            this._url.pathname = path;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    pathPop(pattern?: RegExp) {\r\n        pattern = pattern || /\\/[^\\/]+\\/?$/;\r\n        return this.path(this._pathName.replace(pattern, \"\"));\r\n    }\r\n\r\n    pathPush(part: string) {\r\n        let path = this._pathName;\r\n        if (!path.endsWith('/')) {\r\n            path += '/';\r\n        }\r\n\r\n        path += part;\r\n\r\n        return this.path(path);\r\n    }\r\n\r\n    query(name: string, value: string) {\r\n        this._query.set(name, value);\r\n        if (this.refresh()) {\r\n            this._url.searchParams.set(name, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hash(hash: string) {\r\n        this._hash = hash;\r\n        if (this.refresh()) {\r\n            this._url.hash = hash;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    toURL() {\r\n        return this._url;\r\n    }\r\n\r\n    toString() {\r\n        return this._url.href;\r\n    }\r\n\r\n    [Symbol.toStringTag]() {\r\n        return this.toString();\r\n    }\r\n}", "import { isDefined, isFunction, isObject } from \"./typeChecks\";\r\n\r\nexport interface IDisposable {\r\n    dispose(): void;\r\n}\r\n\r\nexport interface IClosable {\r\n    close(): void;\r\n}\r\n\r\nexport interface ICloneable {\r\n    clone(): unknown;\r\n}\r\n\r\nexport interface IDestroyable {\r\n    destroy(): void;\r\n}\r\n\r\nfunction interfaceSigCheck<T>(obj: any, ...funcNames: string[]): obj is T {\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n\r\n    obj = obj as any;\r\n\r\n    for (const funcName of funcNames) {\r\n        if (!(funcName in obj)) {\r\n            return false;\r\n        }\r\n\r\n        const func = obj[funcName];\r\n        if (!isFunction(func)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function isDisposable(obj: any): obj is IDisposable {\r\n    return interfaceSigCheck(obj, \"dispose\");\r\n}\r\n\r\nexport function isDestroyable(obj: any): obj is IDestroyable {\r\n    return interfaceSigCheck(obj, \"destroy\");\r\n}\r\n\r\nexport function isClosable(obj: any): obj is IClosable {\r\n    return interfaceSigCheck(obj, \"close\");\r\n}\r\n\r\nexport function isCloneable(obj: any): obj is ICloneable {\r\n    return interfaceSigCheck(obj, \"clone\");\r\n}\r\n\r\nexport function dispose(val: any): void {\r\n    if (isDisposable(val)) {\r\n        val.dispose();\r\n    }\r\n\r\n    if (isClosable(val)) {\r\n        val.close();\r\n    }\r\n\r\n    if (isDestroyable(val)) {\r\n        val.destroy();\r\n    }\r\n}\r\n\r\ntype Cleanupable = IDisposable | IClosable | IDestroyable;\r\n\r\nexport function using<T extends Cleanupable, U>(val: T, thunk: (val: T) => U): U {\r\n    try {\r\n        return thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\nexport function usingArray<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => U): U {\r\n    try {\r\n        return thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function usingAsync<T extends Cleanupable, U>(val: T, thunk: (val: T) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\n\r\nexport async function usingArrayAsync<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}", "import { isDefined, isNullOrUndefined, isString } from \"@juniper-lib/tslib\";\r\n\r\nexport const typePattern = /([^\\/]+)\\/(.+)/;\r\nconst subTypePattern = /(?:([^\\.]+)\\.)?([^\\+;]+)(?:\\+([^;]+))?((?:; *([^=]+)=([^;]+))*)/;\r\n\r\nexport class MediaType {\r\n    private readonly _tree: string;\r\n    private readonly _subType: string;\r\n    private readonly _suffix: string;\r\n    private readonly _parameters: ReadonlyMap<string, string>;\r\n\r\n    private readonly _value: string;\r\n    private readonly _fullValue: string;\r\n\r\n    private readonly _extensions: ReadonlyArray<string>;\r\n    private readonly _primaryExtension: string = null;\r\n\r\n    private depMessage: string = null;\r\n\r\n\r\n    constructor(\r\n        private readonly _type: string,\r\n        private readonly _fullSubType: string,\r\n        extensions?: ReadonlyArray<string>) {\r\n\r\n        const parameters = new Map<string, string>();\r\n        this._parameters = parameters;\r\n\r\n        const subTypeParts = this._fullSubType.match(subTypePattern);\r\n        this._tree = subTypeParts[1];\r\n        this._subType = subTypeParts[2];\r\n        this._suffix = subTypeParts[3];\r\n        const paramStr = subTypeParts[4];\r\n\r\n        this._value = this._fullValue = this._type + \"/\";\r\n\r\n        if (isDefined(this._tree)) {\r\n            this._value = this._fullValue += this._tree + \".\";\r\n        }\r\n\r\n        this._value = this._fullValue += this._subType;\r\n\r\n        if (isDefined(this._suffix)) {\r\n            this._value = this._fullValue += \"+\" + this._suffix;\r\n        }\r\n\r\n        if (isDefined(paramStr)) {\r\n            const pairs = paramStr.split(';')\r\n                .map((p) => p.trim())\r\n                .filter((p) => p.length > 0)\r\n                .map((p) => p.split('='));\r\n            for (const [key, ...values] of pairs) {\r\n                const value = values.join(\"=\");\r\n                parameters.set(key, value);\r\n                const slug = `; ${key}=${value}`;\r\n                this._fullValue += slug;\r\n                if (key !== \"q\") {\r\n                    this._value += slug;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._extensions = extensions || [];\r\n        this._primaryExtension = this._extensions[0] || null;\r\n    }\r\n\r\n    static parse(value: string): MediaType {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n\r\n        const match = value.match(typePattern);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        const type = match[1];\r\n        const subType = match[2];\r\n        return new MediaType(type, subType);\r\n    }\r\n\r\n    deprecate(message: string): this {\r\n        this.depMessage = message;\r\n        return this;\r\n    }\r\n\r\n    private check() {\r\n        if (isDefined(this.depMessage)) {\r\n            console.warn(`${this._value} is deprecated ${this.depMessage}`);\r\n        }\r\n    }\r\n\r\n    matches(value: MediaType | string): boolean {\r\n        if (isNullOrUndefined(value)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.typeName === \"*\" && this.subTypeName === \"*\") {\r\n            return true;\r\n        }\r\n\r\n        let typeName: string = null;\r\n        let subTypeName: string = null;\r\n        if (isString(value)) {\r\n            const match = value.match(typePattern);\r\n            if (!match) {\r\n                return false;\r\n            }\r\n\r\n            typeName = match[1];\r\n            subTypeName = match[2];\r\n        }\r\n        else {\r\n            typeName = value.typeName;\r\n            subTypeName = value._fullSubType;\r\n        }\r\n\r\n        return this.typeName === typeName\r\n            && (this._fullSubType === \"*\" || this._fullSubType === subTypeName);\r\n    }\r\n\r\n    withParameter(key: string, value: string): MediaType {\r\n        const newSubType = `${this._fullSubType}; ${key}=${value}`;\r\n        return new MediaType(this.typeName, newSubType, this.extensions);\r\n    }\r\n\r\n    get typeName(): string {\r\n        this.check();\r\n        return this._type;\r\n    }\r\n\r\n    get tree(): string {\r\n        this.check();\r\n        return this._tree;\r\n    }\r\n\r\n    get suffix(): string {\r\n        return this._suffix;\r\n    }\r\n\r\n    get subTypeName(): string {\r\n        this.check();\r\n        return this._subType;\r\n    }\r\n\r\n    get value(): string {\r\n        this.check();\r\n        return this._value;\r\n    }\r\n\r\n    __getValueUnsafe() {\r\n        return this._value;\r\n    }\r\n\r\n    get fullValue(): string {\r\n        this.check();\r\n        return this._fullValue;\r\n    }\r\n\r\n    get parameters(): ReadonlyMap<string, string> {\r\n        this.check();\r\n        return this._parameters;\r\n    }\r\n\r\n    get extensions(): ReadonlyArray<string> {\r\n        this.check();\r\n        return this._extensions;\r\n    }\r\n\r\n    __getExtensionsUnsafe() {\r\n        return this._extensions;\r\n    }\r\n\r\n    get primaryExtension(): string {\r\n        this.check();\r\n        return this._primaryExtension;\r\n    }\r\n\r\n    toString() {\r\n        if (this.parameters.get(\"q\") === \"1\") {\r\n            return this.value;\r\n        }\r\n        else {\r\n            return this.fullValue;\r\n        }\r\n    }\r\n\r\n    addExtension(fileName: string): string {\r\n        if (!fileName) {\r\n            throw new Error(\"File name is not defined\");\r\n        }\r\n\r\n        if (this.primaryExtension) {\r\n            const idx = fileName.lastIndexOf(\".\");\r\n            if (idx > -1) {\r\n                const currentExtension = fileName.substring(idx + 1);;\r\n                if (this.extensions.indexOf(currentExtension) > -1) {\r\n                    fileName = fileName.substring(0, idx);\r\n                }\r\n            }\r\n\r\n            fileName = `${fileName}.${this.primaryExtension}`;\r\n        }\r\n\r\n        return fileName;\r\n    }\r\n}\r\n\r\nexport function create(group: string, value: string, ...extensions: string[]): MediaType {\r\n    return new MediaType(group, value, extensions);\r\n}\r\n\r\nexport function specialize(group: string) {\r\n    return create.bind(null, group);\r\n}", "import { specialize } from \"./util\";\r\n\r\nconst image = /*@__PURE__*/ specialize(\"image\");\r\n\r\nexport const Image_Aces = /*@__PURE__*/ image(\"aces\");\r\nexport const Image_Apng = /*@__PURE__*/ image(\"apng\", \"apng\");\r\nexport const Image_Avci = /*@__PURE__*/ image(\"avci\");\r\nexport const Image_Avcs = /*@__PURE__*/ image(\"avcs\");\r\nexport const Image_Avif = /*@__PURE__*/ image(\"avif\", \"avif\");\r\nexport const Image_Bmp = /*@__PURE__*/ image(\"bmp\", \"bmp\");\r\nexport const Image_Cgm = /*@__PURE__*/ image(\"cgm\", \"cgm\");\r\nexport const Image_Dicom_Rle = /*@__PURE__*/ image(\"dicom-rle\");\r\nexport const Image_Emf = /*@__PURE__*/ image(\"emf\");\r\nexport const Image_Example = /*@__PURE__*/ image(\"example\");\r\nexport const Image_EXR = /*@__PURE__*/ image(\"x-exr\", \"exr\");\r\nexport const Image_Fits = /*@__PURE__*/ image(\"fits\");\r\nexport const Image_G3fax = /*@__PURE__*/ image(\"g3fax\", \"g3\");\r\nexport const Image_Gif = /*@__PURE__*/ image(\"gif\", \"gif\");\r\nexport const Image_Heic = /*@__PURE__*/ image(\"heic\");\r\nexport const Image_Heic_Sequence = /*@__PURE__*/ image(\"heic-sequence\");\r\nexport const Image_Heif = /*@__PURE__*/ image(\"heif\");\r\nexport const Image_Heif_Sequence = /*@__PURE__*/ image(\"heif-sequence\");\r\nexport const Image_Hej2k = /*@__PURE__*/ image(\"hej2k\");\r\nexport const Image_Hsj2 = /*@__PURE__*/ image(\"hsj2\");\r\nexport const Image_Ief = /*@__PURE__*/ image(\"ief\", \"ief\");\r\nexport const Image_Jls = /*@__PURE__*/ image(\"jls\");\r\nexport const Image_Jp2 = /*@__PURE__*/ image(\"jp2\");\r\nexport const Image_Jpeg = /*@__PURE__*/ image(\"jpeg\", \"jpeg\", \"jpg\", \"jpe\");\r\nexport const Image_Jph = /*@__PURE__*/ image(\"jph\");\r\nexport const Image_Jphc = /*@__PURE__*/ image(\"jphc\");\r\nexport const Image_Jpm = /*@__PURE__*/ image(\"jpm\");\r\nexport const Image_Jpx = /*@__PURE__*/ image(\"jpx\");\r\nexport const Image_Jxr = /*@__PURE__*/ image(\"jxr\");\r\nexport const Image_JxrA = /*@__PURE__*/ image(\"jxra\");\r\nexport const Image_JxrS = /*@__PURE__*/ image(\"jxrs\");\r\nexport const Image_Jxs = /*@__PURE__*/ image(\"jxs\");\r\nexport const Image_Jxsc = /*@__PURE__*/ image(\"jxsc\");\r\nexport const Image_Jxsi = /*@__PURE__*/ image(\"jxsi\");\r\nexport const Image_Jxss = /*@__PURE__*/ image(\"jxss\");\r\nexport const Image_Ktx = /*@__PURE__*/ image(\"ktx\", \"ktx\");\r\nexport const Image_Naplps = /*@__PURE__*/ image(\"naplps\");\r\nexport const Image_Pjpeg = /*@__PURE__*/ image(\"pjpeg\");\r\nexport const Image_Png = /*@__PURE__*/ image(\"png\", \"png\");\r\nexport const Image_PrsBtif = /*@__PURE__*/ image(\"prs.btif\", \"btif\");\r\nexport const Image_PrsPti = /*@__PURE__*/ image(\"prs.pti\");\r\nexport const Image_Pwg_Raster = /*@__PURE__*/ image(\"pwg-raster\");\r\nexport const Image_Raw = /*@__PURE__*/ image(\"x-raw\", \"raw\");\r\nexport const Image_Sgi = /*@__PURE__*/ image(\"sgi\", \"sgi\");\r\nexport const Image_SvgXml = /*@__PURE__*/ image(\"svg+xml\", \"svg\", \"svgz\");\r\nexport const Image_T38 = /*@__PURE__*/ image(\"t38\");\r\nexport const Image_Tiff = /*@__PURE__*/ image(\"tiff\", \"tiff\", \"tif\");\r\nexport const Image_Tiff_Fx = /*@__PURE__*/ image(\"tiff-fx\");\r\nexport const Image_Vendor_AdobePhotoshop = /*@__PURE__*/ image(\"vnd.adobe.photoshop\", \"psd\");\r\nexport const Image_Vendor_AirzipAcceleratorAzv = /*@__PURE__*/ image(\"vnd.airzip.accelerator.azv\");\r\nexport const Image_Vendor_CnsInf2 = /*@__PURE__*/ image(\"vnd.cns.inf2\");\r\nexport const Image_Vendor_DeceGraphic = /*@__PURE__*/ image(\"vnd.dece.graphic\", \"uvi\", \"uvvi\", \"uvg\", \"uvvg\");\r\nexport const Image_Vendor_Djvu = /*@__PURE__*/ image(\"vnd.djvu\", \"djvu\", \"djv\");\r\nexport const Image_Vendor_DvbSubtitle = /*@__PURE__*/ image(\"vnd.dvb.subtitle\", \"sub\");\r\nexport const Image_Vendor_Dwg = /*@__PURE__*/ image(\"vnd.dwg\", \"dwg\");\r\nexport const Image_Vendor_Dxf = /*@__PURE__*/ image(\"vnd.dxf\", \"dxf\");\r\nexport const Image_Vendor_Fastbidsheet = /*@__PURE__*/ image(\"vnd.fastbidsheet\", \"fbs\");\r\nexport const Image_Vendor_Fpx = /*@__PURE__*/ image(\"vnd.fpx\", \"fpx\");\r\nexport const Image_Vendor_Fst = /*@__PURE__*/ image(\"vnd.fst\", \"fst\");\r\nexport const Image_Vendor_FujixeroxEdmics_Mmr = /*@__PURE__*/ image(\"vnd.fujixerox.edmics-mmr\", \"mmr\");\r\nexport const Image_Vendor_FujixeroxEdmics_Rlc = /*@__PURE__*/ image(\"vnd.fujixerox.edmics-rlc\", \"rlc\");\r\nexport const Image_Vendor_GlobalgraphicsPgb = /*@__PURE__*/ image(\"vnd.globalgraphics.pgb\");\r\nexport const Image_Vendor_Google_StreetView_Pano = /*@__PURE_*/ image(\"vnd.google.streetview.pano\");\r\nexport const Image_Vendor_MicrosoftIcon = /*@__PURE__*/ image(\"vnd.microsoft.icon\");\r\nexport const Image_Vendor_Mix = /*@__PURE__*/ image(\"vnd.mix\");\r\nexport const Image_Vendor_MozillaApng = /*@__PURE__*/ image(\"vnd.mozilla.apng\");\r\nexport const Image_Vendor_Ms_Dds = /*@__PURE__*/ image(\"vnd.ms-dds\", \"dds\");\r\nexport const Image_Vendor_Ms_Modi = /*@__PURE__*/ image(\"vnd.ms-modi\", \"mdi\");\r\nexport const Image_Vendor_Ms_Photo = /*@__PURE__*/ image(\"vnd.ms-photo\", \"wdp\");\r\nexport const Image_Vendor_Net_Fpx = /*@__PURE__*/ image(\"vnd.net-fpx\", \"npx\");\r\nexport const Image_Vendor_Radiance = /*@__PURE__*/ image(\"vnd.radiance\");\r\nexport const Image_Vendor_SealedmediaSoftsealGif = /*@__PURE__*/ image(\"vnd.sealedmedia.softseal.gif\");\r\nexport const Image_Vendor_SealedmediaSoftsealJpg = /*@__PURE__*/ image(\"vnd.sealedmedia.softseal.jpg\");\r\nexport const Image_Vendor_SealedPng = /*@__PURE__*/ image(\"vnd.sealed.png\");\r\nexport const Image_Vendor_Svf = /*@__PURE__*/ image(\"vnd.svf\");\r\nexport const Image_Vendor_TencentTap = /*@__PURE__*/ image(\"vnd.tencent.tap\");\r\nexport const Image_Vendor_ValveSourceTexture = /*@__PURE__*/ image(\"vnd.valve.source.texture\");\r\nexport const Image_Vendor_WapWbmp = /*@__PURE__*/ image(\"vnd.wap.wbmp\", \"wbmp\");\r\nexport const Image_Vendor_Xiff = /*@__PURE__*/ image(\"vnd.xiff\", \"xif\");\r\nexport const Image_Vendor_ZbrushPcx = /*@__PURE__*/ image(\"vnd.zbrush.pcx\");\r\nexport const Image_Webp = /*@__PURE__*/ image(\"webp\", \"webp\");\r\nexport const Image_Wmf = /*@__PURE__*/ image(\"wmf\");\r\nexport const Image_X_3ds = /*@__PURE__*/ image(\"x-3ds\", \"3ds\");\r\nexport const Image_X_Cmu_Raster = /*@__PURE__*/ image(\"x-cmu-raster\", \"ras\");\r\nexport const Image_X_Cmx = /*@__PURE__*/ image(\"x-cmx\", \"cmx\");\r\nexport const Image_X_Emf = /*@__PURE__*/ image(\"x-emf\").deprecate(\"in favor of image/emf\");\r\nexport const Image_X_Freehand = /*@__PURE__*/ image(\"x-freehand\", \"fh\", \"fhc\", \"fh4\", \"fh5\", \"fh7\");\r\nexport const Image_X_Icon = /*@__PURE__*/ image(\"x-icon\", \"ico\");\r\nexport const Image_X_Mrsid_Image = /*@__PURE__*/ image(\"x-mrsid-image\", \"sid\");\r\nexport const Image_X_Ms_Bmp = /*@__PURE__*/ image(\"x-ms-bmp\");\r\nexport const Image_X_Pcx = /*@__PURE__*/ image(\"x-pcx\", \"pcx\");\r\nexport const Image_X_Pict = /*@__PURE__*/ image(\"x-pict\", \"pic\", \"pct\");\r\nexport const Image_X_Portable_Anymap = /*@__PURE__*/ image(\"x-portable-anymap\", \"pnm\");\r\nexport const Image_X_Portable_Bitmap = /*@__PURE__*/ image(\"x-portable-bitmap\", \"pbm\");\r\nexport const Image_X_Portable_Graymap = /*@__PURE__*/ image(\"x-portable-graymap\", \"pgm\");\r\nexport const Image_X_Portable_Pixmap = /*@__PURE__*/ image(\"x-portable-pixmap\", \"ppm\");\r\nexport const Image_X_Rgb = /*@__PURE__*/ image(\"x-rgb\", \"rgb\");\r\nexport const Image_X_Tga = /*@__PURE__*/ image(\"x-tga\", \"tga\");\r\nexport const Image_X_Wmf = /*@__PURE__*/ image(\"x-wmf\").deprecate(\"in favor of image/wmf\");\r\nexport const Image_X_Xbitmap = /*@__PURE__*/ image(\"x-xbitmap\", \"xbm\");\r\nexport const Image_X_Xcf = /*@__PURE__*/ image(\"x-xcf\");\r\nexport const Image_X_Xpixmap = /*@__PURE__*/ image(\"x-xpixmap\", \"xpm\");\r\nexport const Image_X_Xwindowdump = /*@__PURE__*/ image(\"x-xwindowdump\", \"xwd\");", "import { IFetcher, IFetcherBodiedResult } from \"@juniper-lib/fetcher\";\r\nimport { Application_Json, MediaType } from \"@juniper-lib/mediatypes\";\r\nimport { IProgress, isBoolean, isDefined } from \"@juniper-lib/tslib\";\r\nimport { IResponse } from \"./IResponse\";\r\n\r\nexport abstract class BaseAsset<ResultT = any, ErrorT = any> implements Promise<ResultT> {\r\n\r\n    private readonly promise: Promise<ResultT>;\r\n\r\n    private _result: ResultT = null;\r\n    private _error: ErrorT = null;\r\n    private _started = false;\r\n    private _finished = false;\r\n\r\n    get result(): ResultT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    get error(): ErrorT {\r\n        return this._error;\r\n    }\r\n\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    private resolve: (value: ResultT) => void = null;\r\n    private reject: (reason: ErrorT) => void = null;\r\n\r\n    constructor(public readonly path: string, public readonly type: MediaType) {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.resolve = (value: ResultT) => {\r\n                this._result = value;\r\n                this._finished = true;\r\n                resolve(value);\r\n            };\r\n\r\n            this.reject = (reason: ErrorT) => {\r\n                this._error = reason;\r\n                this._finished = true;\r\n                reject(reason);\r\n            };\r\n        });\r\n    }\r\n\r\n    async getSize(fetcher: IFetcher): Promise<[this, number]> {\r\n        try {\r\n            const { contentLength } = await fetcher\r\n                .head(this.path)\r\n                .accept(this.type)\r\n                .exec();\r\n            return [this, contentLength || 1];\r\n        }\r\n        catch (exp) {\r\n            console.warn(exp);\r\n            return [this, 1];\r\n        };\r\n    }\r\n\r\n    async fetch(fetcher: IFetcher, prog?: IProgress) {\r\n        try {\r\n            const result = await this.getResult(fetcher, prog);\r\n            this.resolve(result);\r\n        }\r\n        catch (err) {\r\n            this.reject(err);\r\n        }\r\n    }\r\n\r\n    protected abstract getResult(fetcher: IFetcher, prog?: IProgress): Promise<ResultT>;\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = ResultT, TResult2 = never>(onfulfilled?: (value: ResultT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultT | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<ResultT> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}\r\n\r\nexport class AssetCustom<ResultT, ErrorT = unknown> extends BaseAsset<ResultT, ErrorT> {\r\n    constructor(path: string, type: MediaType, private readonly getter: (fetcher: IFetcher, path: string, type: MediaType, prog?: IProgress) => Promise<ResultT>) {\r\n        super(path, type);\r\n    }\r\n\r\n    getResult(fetcher: IFetcher, prog?: IProgress): Promise<ResultT> {\r\n        return this.getter(fetcher, this.path, this.type, prog);\r\n    }\r\n}\r\n\r\nabstract class BaseFetchedAsset<ResultT, ErrorT = unknown> extends BaseAsset<ResultT, ErrorT> {\r\n\r\n    private readonly useCache: boolean;\r\n\r\n    constructor(path: string, type: MediaType, useCache: boolean);\r\n    constructor(path: string, type: MediaType);\r\n    constructor(path: string, useCache: boolean);\r\n    constructor(path: string);\r\n    constructor(path: string, typeOrUseCache?: MediaType | boolean, useCache?: boolean) {\r\n        let type: MediaType;\r\n        if (isBoolean(typeOrUseCache)) {\r\n            useCache = typeOrUseCache;\r\n        }\r\n        else {\r\n            type = typeOrUseCache;\r\n        }\r\n        super(path, type);\r\n\r\n        this.useCache = !!useCache;\r\n    }\r\n\r\n    protected async getResult(fetcher: IFetcher, prog?: IProgress): Promise<ResultT> {\r\n        const response = await this.getRequest(fetcher, prog);\r\n        return response.content;\r\n    }\r\n\r\n    private getRequest(fetcher: IFetcher, prog?: IProgress): Promise<IResponse<ResultT>> {\r\n        const request = fetcher\r\n            .get(this.path)\r\n            .useCache(this.useCache)\r\n            .progress(prog);\r\n        return this.getResponse(request);\r\n    }\r\n\r\n    protected abstract getResponse(request: IFetcherBodiedResult): Promise<IResponse<ResultT>>;\r\n}\r\n\r\nexport class AssetAudio<ErrorT = unknown> extends BaseFetchedAsset<HTMLAudioElement, ErrorT> {\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<HTMLAudioElement>> {\r\n        return request.audio(false, false, this.type);\r\n    }\r\n}\r\n\r\nexport class AssetFile<ErrorT = unknown> extends BaseFetchedAsset<string, ErrorT> {\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<string>> {\r\n        return request.file(this.type);\r\n    }\r\n}\r\n\r\nexport class AssetImage<ErrorT = unknown> extends BaseFetchedAsset<HTMLImageElement, ErrorT> {\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<HTMLImageElement>> {\r\n        return request.image(this.type);\r\n    }\r\n}\r\n\r\nexport class AssetObject<T, ErrorT = unknown> extends BaseFetchedAsset<T, ErrorT> {\r\n    constructor(path: string) {\r\n        super(path, Application_Json);\r\n    }\r\n\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<T>> {\r\n        return request.object(this.type);\r\n    }\r\n}\r\n\r\nexport class AssetText<ErrorT = unknown> extends BaseFetchedAsset<string, ErrorT> {\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<string>> {\r\n        return request.text(this.type);\r\n    }\r\n}\r\n\r\nexport class AssetVideo<ErrorT = unknown> extends BaseFetchedAsset<HTMLVideoElement, ErrorT> {\r\n    protected getResponse(request: IFetcherBodiedResult): Promise<IResponse<HTMLVideoElement>> {\r\n        return request.video(false, false, this.type);\r\n    }\r\n}\r\n", "import { isDefined, isNullOrUndefined, once, Task } from \"@juniper-lib/tslib\";\r\nimport { htmlHeight, htmlWidth, src } from \"./attrs\";\r\nimport { Canvas, Img } from \"./tags\";\r\n\r\nexport type CanvasTypes = HTMLCanvasElement | OffscreenCanvas;\r\nexport type CanvasImageTypes = HTMLImageElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap;\r\nexport type Context2D = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\nexport type GraphicsContext = RenderingContext | OffscreenCanvasRenderingContext2D;\r\n\r\ndeclare const IS_WORKER: boolean;\r\nexport const hasHTMLCanvas = /*@__PURE__*/ !IS_WORKER && \"HTMLCanvasElement\" in globalThis;\r\nexport const hasHTMLImage = /*@__PURE__*/ !IS_WORKER && \"HTMLImageElement\" in globalThis;\r\nexport const disableAdvancedSettings = /*@__PURE__*/ false;\r\nexport const hasOffscreenCanvas = /*@__PURE__*/ !disableAdvancedSettings && \"OffscreenCanvas\" in globalThis;\r\nexport const hasImageBitmap = /*@__PURE__*/ !disableAdvancedSettings && \"createImageBitmap\" in globalThis;\r\n\r\nexport function isHTMLCanvas(obj: any): obj is HTMLCanvasElement {\r\n    return !IS_WORKER && hasHTMLCanvas && obj instanceof HTMLCanvasElement;\r\n}\r\n\r\nexport function isHTMLImage(img: any): img is HTMLImageElement {\r\n    return !IS_WORKER && hasHTMLImage && img instanceof HTMLImageElement;\r\n}\r\n\r\nexport function isOffscreenCanvas(obj: any): obj is OffscreenCanvas {\r\n    return hasOffscreenCanvas && obj instanceof OffscreenCanvas;\r\n}\r\n\r\nexport function isImageBitmap(img: any): img is ImageBitmap {\r\n    return hasImageBitmap && img instanceof ImageBitmap;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is either an HTMLCanvasElement or an OffscreenCanvas.\r\n */\r\nexport function isCanvas(obj: any): obj is CanvasTypes {\r\n    return isHTMLCanvas(obj)\r\n        || isOffscreenCanvas(obj);\r\n}\r\n\r\nexport function isCanvasArray(arr: any): arr is CanvasTypes[] {\r\n    return isDefined(arr)\r\n        && arr.length > 0\r\n        && isCanvas(arr[0]);\r\n}\r\n\r\nexport function drawImageBitmapToCanvas(canv: CanvasTypes, img: ImageBitmap): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nfunction testOffscreen2D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"2d\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext2D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen2D();\r\n\r\nexport const createUtilityCanvas = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvas\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvas\r\n    || null;\r\n\r\nexport const createUICanvas = /*@__PURE__*/ !IS_WORKER && hasHTMLCanvas\r\n    ? createCanvas\r\n    : createUtilityCanvas;\r\n\r\nfunction testOffscreen3D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"webgl2\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext3D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen3D();\r\n\r\nexport function createOffscreenCanvas(width: number, height: number): OffscreenCanvas {\r\n    return new OffscreenCanvas(width, height);\r\n}\r\n\r\nexport function createCanvas(w: number, h: number): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return Canvas(htmlWidth(w), htmlHeight(h));\r\n}\r\n\r\nexport function createOffscreenCanvasFromImageBitmap(img: ImageBitmap): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImageBitmap(img: ImageBitmap): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImageBitmap = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImageBitmap\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImageBitmap\r\n    || null;\r\n\r\nexport function createCanvasFromOffscreenCanvas(canv: OffscreenCanvas): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const c = createCanvas(canv.width, canv.height);\r\n    drawImageToCanvas(c, canv);\r\n    return c;\r\n}\r\n\r\nexport function drawImageToCanvas(canv: CanvasTypes, img: CanvasImageTypes): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nexport function createOffscreenCanvasFromImage(img: HTMLImageElement): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImage(img: HTMLImageElement): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImage = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImage\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImage\r\n    || null;\r\n\r\nexport async function createImageFromFile(file: string): Promise<HTMLImageElement> {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Image is not supported in workers\");\r\n    }\r\n\r\n    const img = Img(src(file));\r\n    await once<HTMLElementEventMap>(img, \"load\", \"error\");\r\n    return img;\r\n}\r\n\r\n/**\r\n * Resizes a canvas element\r\n * @param canv\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setCanvasSize(canv: CanvasTypes, w: number, h: number, superscale = 1) {\r\n    w = Math.floor(w * superscale);\r\n    h = Math.floor(h * superscale);\r\n    if (canv.width != w\r\n        || canv.height != h) {\r\n        canv.width = w;\r\n        canv.height = h;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function is2DRenderingContext(ctx: GraphicsContext): ctx is Context2D {\r\n    return isDefined((ctx as Context2D).textBaseline);\r\n}\r\n\r\nexport function setCanvas2DContextSize(ctx: Context2D, w: number, h: number, superscale = 1) {\r\n    const oldImageSmoothingEnabled = ctx.imageSmoothingEnabled,\r\n        oldTextBaseline = ctx.textBaseline,\r\n        oldTextAlign = ctx.textAlign,\r\n        oldFont = ctx.font,\r\n        resized = setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n\r\n    if (resized) {\r\n        ctx.imageSmoothingEnabled = oldImageSmoothingEnabled;\r\n        ctx.textBaseline = oldTextBaseline;\r\n        ctx.textAlign = oldTextAlign;\r\n        ctx.font = oldFont;\r\n    }\r\n\r\n    return resized;\r\n}\r\n\r\n/**\r\n * Resizes the canvas element of a given rendering context.\r\n * \r\n * Note: the imageSmoothingEnabled, textBaseline, textAlign, and font \r\n * properties of the context will be restored after the context is resized,\r\n * as these values are usually reset to their default values when a canvas\r\n * is resized.\r\n * @param ctx\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setContextSize(ctx: GraphicsContext, w: number, h: number, superscale = 1) {\r\n    if (is2DRenderingContext(ctx)) {\r\n        return setCanvas2DContextSize(ctx, w, h, superscale);\r\n    }\r\n    else {\r\n        return setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n    }\r\n}\r\n\r\n/**\r\n * Resizes a canvas element to match the proportions of the size of the element in the DOM.\r\n * @param canv\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeCanvas(canv: HTMLCanvasElement, superscale = 1) {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return setCanvasSize(\r\n        canv,\r\n        canv.clientWidth,\r\n        canv.clientHeight,\r\n        superscale);\r\n}\r\n\r\n/**\r\n * Resizes a canvas element of a given rendering context to match the proportions of the size of the element in the DOM.\r\n * @param ctx\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeContext(ctx: CanvasRenderingContext2D, superscale = 1) {\r\n    return setContextSize(\r\n        ctx,\r\n        ctx.canvas.clientWidth,\r\n        ctx.canvas.clientHeight,\r\n        superscale);\r\n}\r\n\r\nexport function canvasToBlob(canvas: CanvasTypes, type?: string, quality?: number): Promise<Blob> {\r\n    if (isOffscreenCanvas(canvas)) {\r\n        return canvas.convertToBlob({ type, quality });\r\n    }\r\n    else if (isHTMLCanvas(canvas)) {\r\n        const blobCreated = new Task<Blob>();\r\n        canvas.toBlob(blobCreated.resolve, type, quality);\r\n        return blobCreated;\r\n    }\r\n    else {\r\n        throw new Error(\"Cannot save image from canvas\");\r\n    }\r\n}\r\n\r\nexport async function snapshot(canvas: CanvasTypes): Promise<CanvasTypes> {\r\n    const copy = createUtilityCanvas(canvas.width, canvas.height);\r\n    drawImageToCanvas(copy, canvas);\r\n    return copy;\r\n}", "import { IResponse } from \"./IResponse\";\r\n\r\nexport async function translateResponse<T, U>(response: IResponse<T>, translate: (v: T) => U | Promise<U>): Promise<IResponse<U>> {\r\n    const {\r\n        status,\r\n        path,\r\n        content,\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    } = response;\r\n\r\n    return {\r\n        status,\r\n        path,\r\n        content: await translate(content),\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    };\r\n}", "import { IProgress } from \"@juniper-lib/tslib\";\r\nimport { IFetchingService } from \"./IFetchingService\";\r\nimport { IFetchingServiceImpl } from \"./IFetchingServiceImpl\";\r\nimport { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport { IResponse } from \"./IResponse\";\r\nimport { translateResponse } from \"./translateResponse\";\r\n\r\n\r\nexport class FetchingService implements IFetchingService {\r\n\r\n    constructor(private readonly impl: IFetchingServiceImpl) {\r\n    }\r\n\r\n    protected readonly defaultPostHeaders = new Map<string, string>();\r\n\r\n    setRequestVerificationToken(value: string): void {\r\n        this.defaultPostHeaders.set(\"RequestVerificationToken\", value);\r\n    }\r\n\r\n    clearCache(): Promise<void> {\r\n        return this.impl.clearCache();\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.impl.sendNothingGetNothing(request);\r\n    }\r\n\r\n    sendNothingGetBlob(request: IRequest, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendNothingGetSomething(\"blob\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBlob(request: IRequestWithBody, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendSomethingGetSomething(\"blob\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetBuffer(request: IRequest, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendNothingGetSomething(\"arraybuffer\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBuffer(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendSomethingGetSomething(\"arraybuffer\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetText(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendNothingGetSomething(\"text\", request, progress);\r\n    }\r\n\r\n    sendObjectGetText(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendSomethingGetSomething(\"text\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    async sendNothingGetObject<T>(request: IRequest, progress: IProgress): Promise<T> {\r\n        const response = await this.impl.sendNothingGetSomething<\"json\", T>(\"json\", request, progress);\r\n        return response.content;\r\n    }\r\n\r\n    async sendObjectGetObject<T>(request: IRequestWithBody, progress: IProgress): Promise<T> {\r\n        const response = await this.impl.sendSomethingGetSomething<\"json\", T>(\"json\", request, this.defaultPostHeaders, progress);\r\n        return response.content;\r\n    }\r\n\r\n    sendObjectGetNothing(request: IRequestWithBody, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.sendSomethingGetSomething(\"\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.drawImageToCanvas(request, canvas, progress);\r\n    }\r\n\r\n    async sendNothingGetFile(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendObjectGetFile(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendNothingGetXml(request: IRequest, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendNothingGetSomething(\"document\", request, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendObjectGetXml(request: IRequestWithBody, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendSomethingGetSomething(\"document\", request, this.defaultPostHeaders, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendNothingGetImageBitmap(request: IRequest, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            createImageBitmap)\r\n    }\r\n\r\n    async sendObjectGetImageBitmap(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            createImageBitmap);\r\n    }\r\n}\r\n", "import { BaseProgress, isArray, isDefined, TypedEventBase } from \"@juniper-lib/tslib\";\r\nimport { WorkerClientMethodCallMessage, WorkerServerErrorMessage, WorkerServerEventMessage, WorkerServerMessages, WorkerServerProgressMessage, WorkerServerReturnMessage } from \"@juniper-lib/workers/WorkerMessages\";\r\n\r\ntype workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\ntype createTransferableCallback<T> = (returnValue: T) => (Transferable | OffscreenCanvas)[];\r\n\r\ntype Executor<T> = (...params: any[]) => Promise<T>;\r\n\r\ntype VoidExecutor = (...params: any[]) => void;\r\n\r\nclass WorkerServerProgress extends BaseProgress {\r\n    constructor(private readonly server: WorkerServer, private readonly taskID: number) {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    override report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        const message: WorkerServerProgressMessage = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\n\r\nexport class WorkerServer {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.addEventListener(\"message\", (evt: MessageEvent<WorkerClientMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n\r\n    postMessage(message: WorkerServerMessages, transferables?: (Transferable | OffscreenCanvas)[]): void {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private callMethod(data: WorkerClientMethodCallMessage) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        const message: WorkerServerErrorMessage = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    private onReturn<T>(taskID: number, returnValue: T, transferReturnValue: createTransferableCallback<T>): void {\r\n        let message: WorkerServerReturnMessage = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private addMethodInternal<T>(methodName: string, asyncFunc: Function, transferReturnValue?: createTransferableCallback<T>) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n            const prog = new WorkerServerProgress(this, taskID);\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, prog);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction<T>(methodName: string, asyncFunc: Executor<T>, transferReturnValue?: createTransferableCallback<T>) {\r\n        this.addMethodInternal<T>(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName: string, asyncFunc: VoidExecutor) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param obj - the object on which to find the method.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & Executor<any>,\r\n        ReturnT extends (ReturnType<MethodT> extends Promise<infer T> ? T : ReturnT)\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT,\r\n        transferReturnValue?: createTransferableCallback<ReturnT>\r\n    ): void {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & VoidExecutor\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT\r\n    ): void {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n\r\n\r\n    addEvent<\r\n        EventsT,\r\n        TransferableT\r\n    >(\r\n        object: TypedEventBase<EventsT>,\r\n        eventName: keyof EventsT & string,\r\n        makePayload?: (evt: Event) => TransferableT,\r\n        transferReturnValue?: createTransferableCallback<TransferableT>\r\n    ): void {\r\n        object.addEventListener(eventName, (evt: Event) => {\r\n            let message: WorkerServerEventMessage = null;\r\n            if (isDefined(makePayload)) {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName,\r\n                    data: makePayload(evt)\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName\r\n                };\r\n            }\r\n\r\n            if (message.data !== undefined\r\n                && isDefined(transferReturnValue)) {\r\n                const transferables = transferReturnValue(message.data);\r\n                this.postMessage(message, transferables);\r\n            }\r\n            else {\r\n                this.postMessage(message);\r\n            }\r\n        });\r\n    }\r\n}", "import { arrayCompare, identity, IDisposable, isArray, isDefined, isNullOrUndefined, isString, mapMap, once, PriorityList, PriorityMap, success, Task } from \"@juniper-lib/tslib\";\r\n\r\ninterface IndexDef {\r\n    name: string;\r\n    keyPath: string | string[];\r\n    options?: IDBIndexParameters;\r\n}\r\n\r\ninterface StoreDef {\r\n    name: string;\r\n    options?: IDBObjectStoreParameters;\r\n    indexes?: IndexDef[];\r\n}\r\n\r\nexport class IDexDB implements IDisposable {\r\n\r\n    static async getCurrentVersion(dbName: string) {\r\n        if (isDefined(indexedDB.databases)) {\r\n            const databases = await indexedDB.databases();\r\n            for (const { name, version } of databases) {\r\n                if (name === dbName) {\r\n                    return version;\r\n                }\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static delete(dbName: string) {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n        const task = once<IDBOpenDBRequestEventMap>(deleteRequest, \"success\", \"error\", \"blocked\");\r\n        return success(task);\r\n    }\r\n\r\n    static async open(name: string, ...storeDefs: StoreDef[]): Promise<IDexDB> {\r\n\r\n        const storesByName = mapMap(storeDefs, (v) => v.name, identity);\r\n        const indexesByName = new PriorityMap<string, string, IndexDef>(\r\n            storeDefs\r\n                .filter((storeDef) => isDefined(storeDef.indexes))\r\n                .flatMap<[string, string, IndexDef]>((storeDef) =>\r\n                    storeDef.indexes.map<[string, string, IndexDef]>((indexDef) =>\r\n                        [storeDef.name, indexDef.name, indexDef])));\r\n\r\n        const storesToAdd = new Array<string>();\r\n        const storesToRemove = new Array<string>();\r\n        const storesToChange = new Array<string>();\r\n        const indexesToAdd = new PriorityList<string, string>();\r\n        const indexesToRemove = new PriorityList<string, string>();\r\n\r\n        let version = await this.getCurrentVersion(name);\r\n\r\n        if (isNullOrUndefined(version)) {\r\n            storesToAdd.push(...storesByName.keys());\r\n            for (const storeDef of storeDefs) {\r\n                if (isDefined(storeDef.indexes)) {\r\n                    for (const indexDef of storeDef.indexes) {\r\n                        indexesToAdd.add(storeDef.name, indexDef.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            const D = indexedDB.open(name);\r\n            if (await success(once<IDBOpenDBRequestEventMap>(D, \"success\", \"error\", \"blocked\"))) {\r\n                const db = D.result;\r\n\r\n                const storesToScrutinize = new Array<string>();\r\n\r\n                for (const storeName of Array.from(db.objectStoreNames)) {\r\n                    if (!storesByName.has(storeName)) {\r\n                        storesToRemove.push(storeName);\r\n                    }\r\n                }\r\n\r\n                for (const storeName of storesByName.keys()) {\r\n                    if (!db.objectStoreNames.contains(storeName)) {\r\n                        storesToAdd.push(storeName);\r\n                    }\r\n                    else {\r\n                        storesToScrutinize.push(storeName);\r\n                    }\r\n                }\r\n                if (storesToScrutinize.length > 0) {\r\n                    const transaction = db.transaction(storesToScrutinize);\r\n                    const transacting = once<IDBTransactionEventMap>(transaction, \"complete\", \"error\", \"abort\");\r\n                    const transacted = success(transacting);\r\n\r\n                    for (const storeName of storesToScrutinize) {\r\n                        const store = transaction.objectStore(storeName);\r\n                        for (const indexName of Array.from(store.indexNames)) {\r\n                            if (!indexesByName.has(storeName, indexName)) {\r\n                                if (storesToChange.indexOf(storeName) === -1) {\r\n                                    storesToChange.push(storeName);\r\n                                }\r\n                                indexesToRemove.add(storeName, indexName);\r\n                            }\r\n                        }\r\n\r\n                        if (indexesByName.has(storeName)) {\r\n                            for (const indexName of indexesByName.get(storeName).keys()) {\r\n                                if (!store.indexNames.contains(indexName)) {\r\n                                    if (storesToChange.indexOf(storeName) === -1) {\r\n                                        storesToChange.push(storeName);\r\n                                    }\r\n                                    indexesToAdd.add(storeName, indexName);\r\n                                }\r\n                                else {\r\n                                    const indexDef = indexesByName.get(storeName, indexName);\r\n                                    const index = store.index(indexName);\r\n                                    if (isString(indexDef.keyPath) !== isString(index.keyPath)\r\n                                        || isString(indexDef.keyPath) && isString(index.keyPath) && indexDef.keyPath !== index.keyPath\r\n                                        || isArray(indexDef.keyPath) && isArray(index.keyPath) && arrayCompare(indexDef.keyPath, index.keyPath)) {\r\n                                        if (storesToChange.indexOf(storeName) === -1) {\r\n                                            storesToChange.push(storeName);\r\n                                        }\r\n                                        indexesToRemove.add(storeName, indexName);\r\n                                        indexesToAdd.add(storeName, indexName);\r\n                                    }\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    transaction.commit();\r\n                    await transacted;\r\n                }\r\n\r\n                db.close();\r\n            }\r\n\r\n            if (storesToAdd.length > 0\r\n                || storesToRemove.length > 0\r\n                || indexesToAdd.size > 0\r\n                || indexesToRemove.size > 0) {\r\n                ++version;\r\n            }\r\n        }\r\n\r\n        const upgrading = new Task<boolean>();\r\n        const openRequest = isDefined(version)\r\n            ? indexedDB.open(name, version)\r\n            : indexedDB.open(name);\r\n        const opening = once<IDBOpenDBRequestEventMap>(openRequest, \"success\", \"error\", \"blocked\");\r\n        const upgraded = success(upgrading);\r\n        const opened = success(opening);\r\n\r\n        const noUpgrade = () => upgrading.resolve(false);\r\n        openRequest.addEventListener(\"success\", noUpgrade);\r\n\r\n        openRequest.addEventListener(\"upgradeneeded\", () => {\r\n            const transacting = once<IDBTransactionEventMap>(openRequest.transaction, \"complete\", \"error\", \"abort\");\r\n            const db = openRequest.result;\r\n            for (const storeName of storesToRemove) {\r\n                db.deleteObjectStore(storeName);\r\n            }\r\n\r\n            const stores = new Map<string, IDBObjectStore>();\r\n\r\n            for (const storeName of storesToAdd) {\r\n                const storeDef = storesByName.get(storeName);\r\n                const store = db.createObjectStore(storeName, storeDef.options);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const storeName of storesToChange) {\r\n                const store = openRequest.transaction.objectStore(storeName);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const [storeName, store] of stores) {\r\n                for (const indexName of indexesToRemove.get(storeName)) {\r\n                    store.deleteIndex(indexName);\r\n                }\r\n\r\n                for (const indexName of indexesToAdd.get(storeName)) {\r\n                    const indexDef = indexesByName.get(storeName, indexName);\r\n                    store.createIndex(indexName, indexDef.keyPath, indexDef.options);\r\n                }\r\n            }\r\n\r\n            success(transacting)\r\n                .then(upgrading.resolve)\r\n                .catch(upgrading.reject)\r\n                .finally(() => openRequest.removeEventListener(\"success\", noUpgrade));\r\n        });\r\n\r\n        if (!(await upgraded)) {\r\n            throw upgrading.error;\r\n        }\r\n\r\n        if (!(await opened)) {\r\n            throw opening.error;\r\n        }\r\n\r\n        return new IDexDB(openRequest.result);\r\n    }\r\n\r\n    constructor(private readonly db: IDBDatabase) {\r\n\r\n    }\r\n\r\n    dispose() {\r\n        this.db.close();\r\n    }\r\n\r\n    get name() {\r\n        return this.db.name;\r\n    }\r\n\r\n    get version() {\r\n        return this.db.version;\r\n    }\r\n\r\n    get storeNames() {\r\n        return Array.from(this.db.objectStoreNames);\r\n    }\r\n\r\n    getStore<T>(storeName: string): IDexStore<T> {\r\n        return new IDexStore<T>(this.db, storeName);\r\n    }\r\n}\r\n\r\nexport class IDexStore<T> {\r\n    constructor(private readonly db: IDBDatabase, private readonly storeName: string) {\r\n\r\n    }\r\n\r\n    private async request<T>(makeRequest: (store: IDBObjectStore) => IDBRequest<T>, mode: IDBTransactionMode): Promise<T> {\r\n        const transaction = this.db.transaction(this.storeName, mode);\r\n        const transacting = once<IDBTransactionEventMap>(transaction, \"complete\", \"error\");\r\n\r\n        const store = transaction.objectStore(this.storeName);\r\n        const request = makeRequest(store);\r\n        const requesting = once<IDBRequestEventMap>(request, \"success\", \"error\");\r\n\r\n        if (!(await success(requesting))) {\r\n            transaction.abort();\r\n            throw requesting.error;\r\n        }\r\n\r\n        transaction.commit();\r\n        if (!(await success(transacting))) {\r\n            throw transacting.error;\r\n        }\r\n\r\n        return request.result;\r\n    }\r\n\r\n    add<T>(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.add(value, key), \"readwrite\");\r\n    }\r\n\r\n    clear() {\r\n        return this.request((store) => store.clear(), \"readwrite\");\r\n    }\r\n\r\n    getCount(query?: IDBValidKey | IDBKeyRange): Promise<number> {\r\n        return this.request((store) => store.count(query), \"readonly\");\r\n    }\r\n\r\n    delete(query: IDBValidKey | IDBKeyRange) {\r\n        return this.request((store) => store.delete(query), \"readwrite\");\r\n    }\r\n\r\n    get(key: IDBValidKey): Promise<T> {\r\n        return this.request((store) => store.get<T>(key), \"readonly\");\r\n    }\r\n\r\n    getAll(): Promise<T[]> {\r\n        return this.request((store) => store.getAll<T>(), \"readonly\")\r\n    }\r\n\r\n    getAllKeys(): Promise<IDBValidKey[]> {\r\n        return this.request((store) => store.getAllKeys(), \"readonly\")\r\n    }\r\n\r\n    getKey(query: IDBValidKey | IDBKeyRange): Promise<IDBValidKey | undefined> {\r\n        return this.request((store) => store.getKey(query), \"readonly\");\r\n    }\r\n\r\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursorWithValue | null> {\r\n        return this.request((store) => store.openCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursor | null> {\r\n        return this.request((store) => store.openKeyCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    put(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.put(value, key), \"readwrite\");\r\n    }\r\n}", "import { IDexDB, IDexStore } from \"@juniper-lib/indexdb\";\r\nimport { assertNever, identity, IProgress, isArrayBuffer, isArrayBufferView, isDefined, isNullOrUndefined, isString, mapJoin, PriorityList, PriorityMap, progressSplit, Task, using } from \"@juniper-lib/tslib\";\r\nimport type { HTTPMethods } from \"./HTTPMethods\";\r\nimport type { IFetchingServiceImpl, XMLHttpRequestResponseTypeMap } from \"./IFetchingServiceImpl\";\r\nimport type { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport type { IResponse } from \"./IResponse\";\r\nimport { translateResponse } from \"./translateResponse\";\r\n\r\nfunction isXHRBodyInit(obj: any): obj is XMLHttpRequestBodyInit {\r\n    return isString(obj)\r\n        || isArrayBufferView(obj)\r\n        || obj instanceof Blob\r\n        || obj instanceof FormData\r\n        || isArrayBuffer(obj)\r\n        || obj instanceof ReadableStream\r\n        || \"Document\" in globalThis && obj instanceof Document;\r\n}\r\n\r\nfunction trackProgress(name: string, xhr: XMLHttpRequest, target: (XMLHttpRequest | XMLHttpRequestUpload), prog: IProgress, skipLoading: boolean, prevTask?: Promise<void>): Promise<void> {\r\n\r\n    let prevDone = !prevTask;\r\n    if (prevTask) {\r\n        prevTask.then(() => prevDone = true);\r\n    }\r\n\r\n    let done = false;\r\n    let loaded = skipLoading;\r\n\r\n    const requestComplete = new Task(\r\n        () => loaded && done,\r\n        () => prevDone);\r\n\r\n    target.addEventListener(\"loadstart\", () => {\r\n        if (prevDone && !done && prog) {\r\n            prog.start(name);\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"progress\", (ev: Event) => {\r\n        if (prevDone && !done) {\r\n            const evt = ev as ProgressEvent<XMLHttpRequestEventTarget>;\r\n            if (prog) {\r\n                prog.report(evt.loaded, Math.max(evt.loaded, evt.total), name);\r\n            }\r\n            if (evt.loaded === evt.total) {\r\n                loaded = true;\r\n                requestComplete.resolve();\r\n            }\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"load\", () => {\r\n        if (prevDone && !done) {\r\n            if (prog) {\r\n                prog.end(name);\r\n            }\r\n            done = true;\r\n            requestComplete.resolve();\r\n        }\r\n    });\r\n\r\n    const onError = (msg: string) => () => requestComplete.reject(`${msg} (${xhr.status})`);\r\n\r\n    target.addEventListener(\"error\", onError(\"error\"));\r\n    target.addEventListener(\"abort\", onError(\"abort\"));\r\n    target.addEventListener(\"timeout\", onError(\"timeout\"));\r\n\r\n    return requestComplete;\r\n}\r\n\r\nfunction sendRequest(xhr: XMLHttpRequest, method: HTTPMethods, path: string, timeout: number, headers: Map<string, string>, body?: XMLHttpRequestBodyInit): void {\r\n    xhr.open(method, path);\r\n    xhr.responseType = \"blob\";\r\n    xhr.timeout = timeout;\r\n    if (headers) {\r\n        for (const [key, value] of headers) {\r\n            xhr.setRequestHeader(key, value);\r\n        }\r\n    }\r\n\r\n    if (isDefined(body)) {\r\n        xhr.send(body);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction readResponseHeader<T>(headers: Map<string, string>, key: string, translate: (value: string) => T): T {\r\n    if (!headers.has(key)) {\r\n        return null;\r\n    }\r\n\r\n    const value = headers.get(key);\r\n    try {\r\n        const translated = translate(value);\r\n        headers.delete(key);\r\n        return translated;\r\n    }\r\n    catch (exp) {\r\n        console.warn(key, exp);\r\n    }\r\n    return null;\r\n}\r\n\r\nconst FILE_NAME_PATTERN = /filename=\\\"(.+)\\\"(;|$)/;\r\nconst DB_NAME = \"Juniper:Fetcher:Cache\";\r\n\r\nexport class FetchingServiceImplXHR implements IFetchingServiceImpl {\r\n\r\n    private readonly cacheReady: Promise<void>;\r\n    private cache: IDexDB = null;\r\n    private store: IDexStore<IResponse<Blob>> = null;\r\n\r\n    constructor() {\r\n        this.cacheReady = this.openCache();\r\n    }\r\n\r\n    async drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        const response = await this.sendNothingGetSomething(\"blob\", request, progress);\r\n        const blob = response.content;\r\n        return using(await createImageBitmap(blob, {\r\n            imageOrientation: \"none\"\r\n        }), (img) => {\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const g = canvas.getContext(\"2d\");\r\n            g.drawImage(img, 0, 0);\r\n            return translateResponse(response, () => null);\r\n        });\r\n    }\r\n\r\n    private async openCache(): Promise<void> {\r\n        this.cache = await IDexDB.open(DB_NAME, {\r\n            name: \"files\",\r\n            options: {\r\n                keyPath: \"path\"\r\n            }\r\n        });\r\n\r\n        this.store = await this.cache.getStore(\"files\");\r\n    }\r\n\r\n    async clearCache(): Promise<void> {\r\n        await this.cacheReady;\r\n        await this.store.clear();\r\n    }\r\n\r\n    private async readResponseHeaders(path: string, xhr: XMLHttpRequest): Promise<IResponse> {\r\n        const headerParts = xhr\r\n            .getAllResponseHeaders()\r\n            .split(/[\\r\\n]+/)\r\n            .map((v) => v.trim())\r\n            .filter((v) => v.length > 0)\r\n            .map<[string, string]>((line) => {\r\n                const parts = line.split(\": \");\r\n                const key = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                return [key, value];\r\n            });\r\n\r\n        const pList = new PriorityList<string, string>(headerParts);\r\n        const normalizedHeaderParts = Array.from(pList.keys())\r\n            .map<[string, string]>((key) =>\r\n                [\r\n                    key,\r\n                    pList.get(key)\r\n                        .join(\", \")\r\n                ]);\r\n\r\n        const headers = new Map<string, string>(normalizedHeaderParts);\r\n        const contentType = readResponseHeader(headers, \"content-type\", identity);\r\n        const contentLength = readResponseHeader(headers, \"content-length\", parseFloat);\r\n        const date = readResponseHeader(headers, \"date\", (v) => new Date(v));\r\n        const fileName = readResponseHeader(headers, \"content-disposition\", (v) => {\r\n            if (isDefined(v)) {\r\n                const match = v.match(FILE_NAME_PATTERN);\r\n                if (isDefined(match)) {\r\n                    return match[1];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        const response: IResponse = {\r\n            status: xhr.status,\r\n            path,\r\n            content: undefined,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        };\r\n\r\n        return response;\r\n    }\r\n\r\n    private async readResponse(path: string, xhr: XMLHttpRequest): Promise<IResponse<Blob>> {\r\n        const {\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        } = await this.readResponseHeaders(path, xhr);\r\n\r\n        const response: IResponse<Blob> = {\r\n            path,\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers,\r\n            content: xhr.response as Blob\r\n        }\r\n\r\n        if (isDefined(response.content)) {\r\n            response.contentType = response.contentType || response.content.type;\r\n            response.contentLength = response.contentLength || response.content.size;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private async decodeContent<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, response: IResponse<Blob>): Promise<IResponse<T>> {\r\n        return translateResponse<Blob, T>(response, async (contentBlob) => {\r\n            if (xhrType === \"\") {\r\n                return null;\r\n            }\r\n            else if (isNullOrUndefined(response.contentType)) {\r\n                const headerBlock = Array.from(response.headers.entries())\r\n                    .map((kv) => kv.join(\": \"))\r\n                    .join(\"\\n  \");\r\n                throw new Error(\"No content type found in headers: \\n  \" + headerBlock);\r\n            }\r\n            else if (xhrType === \"blob\") {\r\n                return contentBlob as any as T;\r\n            }\r\n            else if (xhrType === \"arraybuffer\") {\r\n                return (await contentBlob.arrayBuffer()) as any as T;\r\n            }\r\n            else if (xhrType === \"json\") {\r\n                const text = await contentBlob.text();\r\n                if (text.length > 0) {\r\n                    return JSON.parse(text) as T;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else if (xhrType === \"document\") {\r\n                const parser = new DOMParser();\r\n                if (response.contentType === \"application/xhtml+xml\"\r\n                    || response.contentType === \"text/html\"\r\n                    || response.contentType === \"application/xml\"\r\n                    || response.contentType === \"image/svg+xml\"\r\n                    || response.contentType === \"text/xml\") {\r\n                    return parser.parseFromString(await contentBlob.text(), response.contentType) as any as T;\r\n                }\r\n                else {\r\n                    throw new Error(\"Couldn't parse document\");\r\n                }\r\n            }\r\n            else if (xhrType === \"text\") {\r\n                return (await contentBlob.text()) as any as T;\r\n            }\r\n            else {\r\n                assertNever(xhrType);\r\n            }\r\n        });\r\n    }\r\n\r\n    private readonly tasks = new PriorityMap<HTTPMethods, string, Promise<any>>();\r\n\r\n    private async withCachedTask<T>(request: IRequest, action: () => Promise<IResponse<T>>): Promise<IResponse<T>> {\r\n        if (request.method !== \"GET\"\r\n            && request.method !== \"HEAD\"\r\n            && request.method !== \"OPTIONS\") {\r\n            return await action();\r\n        }\r\n\r\n        if (!this.tasks.has(request.method, request.path)) {\r\n            this.tasks.add(\r\n                request.method,\r\n                request.path,\r\n                action().finally(() =>\r\n                    this.tasks.delete(request.method, request.path)));\r\n        }\r\n\r\n        return this.tasks.get(request.method, request.path);\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.withCachedTask(request, async () => {\r\n            const xhr = new XMLHttpRequest();\r\n            const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, null, true);\r\n\r\n            sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n            await download;\r\n\r\n            return await this.readResponseHeaders(request.path, xhr);\r\n        });\r\n    }\r\n\r\n    sendNothingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.withCachedTask(request, async () => {\r\n            let response: IResponse<Blob> = null;\r\n\r\n            const useCache = request.useCache && request.method === \"GET\";\r\n\r\n            if (useCache) {\r\n                if (isDefined(progress)) {\r\n                    progress.start();\r\n                }\r\n                await this.cacheReady;\r\n                response = await this.store.get(request.path);\r\n            }\r\n\r\n            const noCachedResponse = isNullOrUndefined(response);\r\n\r\n            if (noCachedResponse) {\r\n                const xhr = new XMLHttpRequest();\r\n                const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, progress, true);\r\n\r\n                sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n                await download;\r\n\r\n                response = await this.readResponse(request.path, xhr);\r\n\r\n                if (useCache) {\r\n                    await this.store.add(response);\r\n                }\r\n            }\r\n\r\n            const value = await this.decodeContent<K, T>(xhrType, response);\r\n\r\n            if (noCachedResponse && isDefined(progress)) {\r\n                progress.end();\r\n            }\r\n\r\n            return value;\r\n        });\r\n    }\r\n\r\n    async sendSomethingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequestWithBody, defaultPostHeaders: Map<string, string>, progress: IProgress): Promise<IResponse<T>> {\r\n        let body: XMLHttpRequestBodyInit = null;\r\n\r\n        const headers = mapJoin(new Map<string, string>(), defaultPostHeaders, request.headers);\r\n\r\n        if (request.body instanceof FormData\r\n            && isDefined(headers)) {\r\n            const toDelete = new Array<string>();\r\n            for (const key of headers.keys()) {\r\n                if (key.toLowerCase() === \"content-type\") {\r\n                    toDelete.push(key);\r\n                }\r\n            }\r\n            for (const key of toDelete) {\r\n                headers.delete(key);\r\n            }\r\n        }\r\n\r\n        if (isXHRBodyInit(request.body) && !isString(request.body)) {\r\n            body = request.body;\r\n        }\r\n        else if (isDefined(request.body)) {\r\n            body = JSON.stringify(request.body);\r\n        }\r\n\r\n        const progs = progressSplit(progress, 2);\r\n        const xhr = new XMLHttpRequest();\r\n        const upload = isDefined(body)\r\n            ? trackProgress(\"uploading\", xhr, xhr.upload, progs.shift(), false)\r\n            : Promise.resolve();\r\n        const downloadProg = progs.shift();\r\n        const download = trackProgress(\"saving\", xhr, xhr, downloadProg, true, upload);\r\n\r\n        sendRequest(xhr, request.method, request.path, request.timeout, headers, body);\r\n\r\n        await upload;\r\n        await download;\r\n\r\n        const response = await this.readResponse(request.path, xhr);\r\n        return await this.decodeContent(xhrType, response);\r\n    }\r\n}\r\n", "import { FetchingService } from \"@juniper-lib/fetcher/FetchingService\";\r\nimport type { IFetchingService } from \"@juniper-lib/fetcher\";\r\nimport type { IFetchingServiceImpl } from \"@juniper-lib/fetcher\";\r\nimport type { IResponse } from \"@juniper-lib/fetcher\";\r\nimport { WorkerServer } from \"@juniper-lib/workers\";\r\n\r\nexport class FetchingServiceServer extends WorkerServer {\r\n    constructor(self: DedicatedWorkerGlobalScope, impl: IFetchingServiceImpl) {\r\n        super(self);\r\n        const fetcher = new FetchingService(impl);\r\n        addFetcherMethods(this, fetcher);\r\n    }\r\n}\r\n\r\nfunction getContent<T extends Transferable | OffscreenCanvas>(response: IResponse<T>): Array<Transferable | OffscreenCanvas> {\r\n    return [response.content];\r\n}\r\n\r\nexport function addFetcherMethods(server: WorkerServer, fetcher: IFetchingService) {\r\n    server.addVoidMethod(fetcher, \"setRequestVerificationToken\", fetcher.setRequestVerificationToken);\r\n\r\n    server.addMethod(fetcher, \"clearCache\", fetcher.clearCache);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetNothing\", fetcher.sendNothingGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetBuffer\", fetcher.sendNothingGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetImageBitmap\", fetcher.sendNothingGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetObject\", fetcher.sendNothingGetObject);\r\n    server.addMethod(fetcher, \"sendNothingGetFile\", fetcher.sendNothingGetFile);\r\n    server.addMethod(fetcher, \"sendNothingGetText\", fetcher.sendNothingGetText);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetNothing\", fetcher.sendObjectGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetImageBitmap\", fetcher.sendObjectGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetBuffer\", fetcher.sendObjectGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetObject\", fetcher.sendObjectGetObject);\r\n    server.addMethod(fetcher, \"sendObjectGetFile\", fetcher.sendObjectGetFile);\r\n    server.addMethod(fetcher, \"sendObjectGetText\", fetcher.sendObjectGetText);\r\n\r\n    server.addMethod(fetcher, \"drawImageToCanvas\", fetcher.drawImageToCanvas);\r\n}\r\n", "import { FetchingServiceImplXHR as FetchingServiceImpl, FetchingServiceServer } from \"@juniper-lib/fetcher\";\r\n(globalThis as any).server = new FetchingServiceServer(\r\n    (globalThis as any) as DedicatedWorkerGlobalScope,\r\n    new FetchingServiceImpl());"],
  "mappings": "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",
  "names": []
}
