{
  "version": 3,
  "sources": ["../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayRemoveAt.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayClear.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayRemove.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/PriorityList.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/EventBase.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/identity.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Task.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Promisifier.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/typeChecks.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/flags.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/gis/Datum.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/math/angleClamp.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/math/xy2i.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/BaseProgress.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/singleton.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/mapInvert.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/units/fileSize.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/units/length.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/URLBuilder.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/workers/WorkerServer.ts", "../../../src/dirt-worker/DirtService.ts", "../../../src/dirt-worker/DirtWorkerServer.ts", "../../../src/dirt-worker/index.ts"],
  "sourcesContent": ["/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}", "/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}", "import { arrayRemoveAt } from \"./arrayRemoveAt\";\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}", "import { isDefined, isNullOrUndefined } from \"../\";\r\nimport { arrayClear } from \"./arrayClear\";\r\nimport { arrayRemove } from \"./arrayRemove\";\r\n\r\nexport class PriorityList<KeyT, ValueT> {\r\n    private readonly items = new Map<KeyT, ValueT[]>();\r\n    private readonly defaultItems = new Array<ValueT>();\r\n\r\n    constructor(init?: [KeyT, ValueT][]) {\r\n        if (isDefined(init)) {\r\n            for (const [key, value] of init) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key: KeyT, value: ValueT): this {\r\n        if (isNullOrUndefined(key)) {\r\n            this.defaultItems.push(value);\r\n        }\r\n        else {\r\n            let list = this.items.get(key);\r\n            if (isNullOrUndefined(list)) {\r\n                this.items.set(key, list = []);\r\n            }\r\n\r\n            list.push(value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    entries(): IterableIterator<[KeyT, ValueT[]]> {\r\n        return this.items.entries();\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n\r\n    keys(): IterableIterator<KeyT> {\r\n        return this.items.keys();\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const item of this.defaultItems) {\r\n            yield item;\r\n        }\r\n        for (const list of this.items.values()) {\r\n            for (const item of list) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: KeyT): boolean {\r\n        if (isDefined(key)) {\r\n            return this.items.has(key);\r\n        }\r\n        else {\r\n            return this.defaultItems.length > 0;\r\n        }\r\n    }\r\n\r\n    get(key: KeyT): ValueT[] {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems;\r\n        }\r\n\r\n        return this.items.get(key) || [];\r\n    }\r\n\r\n    count(key: KeyT): number {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems.length;\r\n        }\r\n\r\n        const list = this.get(key);\r\n        if (isDefined(list)) {\r\n            return list.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = this.defaultItems.length;\r\n        for (const list of this.items.values()) {\r\n            size += list.length;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key: KeyT) {\r\n        if (isNullOrUndefined(key)) {\r\n            return arrayClear(this.defaultItems).length > 0;\r\n        }\r\n        else {\r\n            return this.items.delete(key);\r\n        }\r\n    }\r\n\r\n    remove(key: KeyT, value: ValueT) {\r\n        if (isNullOrUndefined(key)) {\r\n            arrayRemove(this.defaultItems, value);\r\n        }\r\n        else {\r\n            const list = this.items.get(key);\r\n            if (isDefined(list)) {\r\n                arrayRemove(list, value);\r\n                if (list.length === 0) {\r\n                    this.items.delete(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n        arrayClear(this.defaultItems);\r\n    }\r\n}\r\n\r\n\r\n", "import { arrayClear, arrayRemoveAt, isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T) {\r\n        super(type);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "import { isBoolean, isDefined, isFunction } from \"../\";\r\nimport { arrayClear } from \"../collections\";\r\nimport { alwaysTrue } from \"../identity\";\r\nimport { Predicate } from \"./Predicate\";\r\n\r\n\r\n\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n    private readonly rejectTest: Predicate<any>;\r\n    private readonly resolveTest: Predicate<ResultsT>;\r\n    private readonly autoStart: boolean;\r\n\r\n    private _result: ResultsT = null;\r\n    private _error: any = null;\r\n    private _started = false;\r\n    private _errored = false;\r\n    private _finished = false;\r\n\r\n    readonly resolve: (value: ResultsT) => void;\r\n    readonly reject: (reason: any) => void;\r\n\r\n    constructor(autoStart?: boolean);\r\n    constructor(resolveTest: Predicate<ResultsT>, autoStart?: boolean)\r\n    constructor(resolveTest: Predicate<ResultsT>, rejectTest: Predicate<any>, autoStart?: boolean);\r\n    constructor(resolveTestOrAutoStart?: boolean | Predicate<ResultsT>, rejectTestOrAutoStart?: boolean | Predicate<any>, autoStart = true) {\r\n        if (isFunction(resolveTestOrAutoStart)) {\r\n            this.resolveTest = resolveTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.resolveTest = alwaysTrue;\r\n        }\r\n\r\n        if (isFunction(rejectTestOrAutoStart)) {\r\n            this.rejectTest = rejectTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.rejectTest = alwaysTrue;\r\n        }\r\n\r\n        if (isBoolean(resolveTestOrAutoStart)) {\r\n            this.autoStart = resolveTestOrAutoStart;\r\n        }\r\n        else if (isBoolean(rejectTestOrAutoStart)) {\r\n            this.autoStart = rejectTestOrAutoStart;\r\n        }\r\n        else if (isDefined(autoStart)) {\r\n            this.autoStart = autoStart;\r\n        }\r\n        else {\r\n            this.autoStart = false;\r\n        }\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n\r\n        this.resolve = this._resolve.bind(this);\r\n        this.reject = this._reject.bind(this);\r\n    }\r\n\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    get errored(): boolean {\r\n        return this._errored;\r\n    }\r\n\r\n    start() {\r\n        this._started = true;\r\n    }\r\n\r\n    private _resolve(value: ResultsT): void {\r\n        if (this.started\r\n            && !this.finished\r\n            && this.resolveTest(value)) {\r\n            this._result = value;\r\n            for (const thenner of this.onThens) {\r\n                thenner(value);\r\n            }\r\n            this._finished = true;\r\n        }\r\n    }\r\n\r\n    private _reject(reason: any): void {\r\n        if (this.started\r\n            && !this.finished\r\n            && this.rejectTest(reason)) {\r\n            this._error = reason;\r\n            this._errored = true;\r\n            for (const catcher of this.onCatches) {\r\n                catcher(reason);\r\n            }\r\n            this._finished = true;\r\n        }\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    reset() {\r\n        if (this.started && !this.finished) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n        this._started = this.autoStart;\r\n        this._errored = false;\r\n        this._finished = false;\r\n    }\r\n}", "export class Promisifier<T = void> implements Promise<T> {\r\n\r\n    private readonly promise: Promise<T>;\r\n\r\n    callback: (...args: any[]) => void = null;\r\n\r\n    constructor(\r\n        resolveRejectTest: (...args: any[]) => boolean,\r\n        selectValue: (...args: any[]) => T,\r\n        selectRejectionReason: (...args: any[]) => any) {\r\n        this.promise = new Promise((resolve, reject) => {\r\n            this.callback = (...args: any[]) => {\r\n                if (resolveRejectTest(...args)) {\r\n                    resolve(selectValue(...args));\r\n                }\r\n                else {\r\n                    reject(selectRejectionReason(...args));\r\n                }\r\n            };\r\n        });\r\n\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.promise.toString();\r\n    }\r\n\r\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: (value: T) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.promise.then(onfulfilled, onrejected);\r\n    }\r\n\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<T | TResult> {\r\n        return this.promise.catch(onrejected);\r\n    }\r\n\r\n    finally(onfinally?: () => void): Promise<T> {\r\n        return this.promise.finally(onfinally);\r\n    }\r\n}", "function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && Number.isFinite(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "export function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || /Pico Neo 3 Link/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = /*@__PURE__*/ !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = /*@__PURE__*/ isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = /*@__PURE__*/ isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = /*@__PURE__*/ isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = /*@__PURE__*/ isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = /*@__PURE__*/ isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorkerSupported = /*@__PURE__*/ \"Worker\" in globalThis;", "const FalseNorthing: number = 10000000;\r\nconst invF: number = 298.257223563;\r\nconst equatorialRadius: number = 6378137;\r\nconst pointScaleFactor: number = 0.9996;\r\nconst E0: number = 500000;\r\n\r\nconst flattening: number = 1 / invF;\r\nconst flatteningComp: number = 1 - flattening;\r\nconst n: number = flattening / (2 - flattening);\r\nconst A: number = (equatorialRadius / (1 + n)) * (1 + (n * n / 4) + (n * n * n * n / 64));\r\n\r\nconst e: number = Math.sqrt(1 - (flatteningComp * flatteningComp));\r\nconst esq: number = 1 - (flatteningComp * flatteningComp);\r\nconst e0sq: number = e * e / (1 - (e * e));\r\n\r\nconst alpha1: number = 1 - (esq * (0.25 + (esq * ((3 / 64) + (5 * esq / 256)))));\r\nconst alpha2: number = esq * ((3 / 8) + (esq * ((3 / 32) + (45 * esq / 1024))));\r\nconst alpha3: number = esq * esq * ((15 / 256) + (esq * 45 / 1024));\r\nconst alpha4: number = esq * esq * esq * (35 / 3072);\r\n\r\nconst beta: number[] = [\r\n    (n / 2) - (2 * n * n / 3) + (37 * n * n * n / 96),\r\n    (n * n / 48) + (n * n * n / 15),\r\n    17 * n * n * n / 480\r\n];\r\n\r\nconst delta: number[] = [\r\n    (2 * n) - (2 * n * n / 3),\r\n    (7 * n * n / 3) - (8 * n * n * n / 5),\r\n    56 * n * n * n / 15\r\n];\r\n\r\nexport const DatumWGS_84 = /*@__PURE__*/ {\r\n    FalseNorthing,\r\n    equatorialRadius,\r\n    pointScaleFactor,\r\n    E0,\r\n\r\n    A,\r\n    flattening,\r\n    \r\n    e,\r\n    esq,\r\n    e0sq,\r\n\r\n    alpha1,\r\n    alpha2,\r\n    alpha3,\r\n    alpha4,\r\n\r\n    beta,\r\n    delta\r\n};", "const Tau = 2 * Math.PI;\r\n\r\nexport function angleClamp(v: number) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n", "import { vec2 } from \"gl-matrix\";\r\n\r\nexport function xy2i(x: number, y: number, width: number, components: number = 1): number {\r\n    return components * (x + width * y);\r\n}\r\n\r\nexport function vec22i(vec: vec2, width: number, components: number = 1): number {\r\n    return xy2i(vec[0], vec[1], width, components);\r\n}\r\n\r\nexport function i2vec2(vec: vec2, i: number, width: number, components: number = 1): void {\r\n    const stride = width * components;\r\n    const p = i % stride;\r\n    const x = Math.floor(p / components);\r\n    const y = Math.floor(i / stride);\r\n    vec2.set(vec, x, y);\r\n}", "import { arrayClear, TypedEventBase } from \"../\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseProgress<T = void>\r\n    extends TypedEventBase<T>\r\n    implements IProgress {\r\n    private readonly attached = new Array<IProgress>();\r\n    private soFar: number = null;\r\n    private total: number = null;\r\n    private msg: string = null;\r\n    private est: number = null;\r\n\r\n    protected get p() {\r\n        return this.total > 0\r\n            ? this.soFar / this.total\r\n            : 0;\r\n    }\r\n\r\n    report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n\r\n    attach(prog: IProgress): void {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n\r\n    clear() {\r\n        this.report(0, 0);\r\n        this._clear();\r\n    }\r\n\r\n    start(msg?: string) {\r\n        this.report(0, 1, msg || \"starting\");\r\n    }\r\n\r\n    end(msg?: string) {\r\n        this.report(1, 1, msg || \"done\");\r\n        this._clear();\r\n    }\r\n\r\n    private _clear() {\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}", "import { isNullOrUndefined } from \"./typeChecks\";\r\n\r\nexport function singleton<T>(name: string, create?: () => T): T {\r\n    const box = globalThis as any;\r\n    let value = box[name] as T;\r\n    if (isNullOrUndefined(value)) {\r\n        if (isNullOrUndefined(create)) {\r\n            throw new Error(`No value ${name} found`);\r\n        }\r\n        value = create();\r\n        box[name] = value;\r\n    }\r\n    return value;\r\n}", "export function mapInvert<T, U>(map: Map<T, U>): Map<U, T> {\r\n    const mapOut = new Map<U, T>();\r\n    for (const [key, value] of map) {\r\n        mapOut.set(value, key);\r\n    }\r\n    return mapOut;\r\n}\r\n\r\n", "import { mapInvert } from \"../collections/mapInvert\";\r\nimport { assertNever } from \"../typeChecks\";\r\n\r\ntype Base = 2 | 10;\r\n\r\ntype Base2Units = \"KiB\"\r\n    | \"MiB\"\r\n    | \"GiB\"\r\n    | \"TiB\";\r\n\r\ntype Base10Units = \"KB\"\r\n    | \"MB\"\r\n    | \"GB\"\r\n    | \"TB\";\r\n\r\ntype Units = \"B\"\r\n    | Base2Units\r\n    | Base10Units;\r\n\r\nfunction isBase2Units(label: Units): label is Base2Units {\r\n    return label !== \"B\"\r\n        && label[1] === 'i';\r\n}\r\n\r\nfunction isBase10Units(label: Units): label is Base10Units {\r\n    return label !== \"B\"\r\n        && !isBase10Units(label);\r\n}\r\n\r\nconst base2Labels = new Map<number, Base2Units>([\r\n    [1, \"KiB\"],\r\n    [2, \"MiB\"],\r\n    [3, \"GiB\"],\r\n    [4, \"TiB\"]\r\n]);\r\n\r\nconst base10Labels = new Map<number, Base10Units>([\r\n    [1, \"KB\"],\r\n    [2, \"MB\"],\r\n    [3, \"GB\"],\r\n    [4, \"TB\"]\r\n]);\r\n\r\nconst base2Sizes = mapInvert(base2Labels);\r\nconst base10Sizes = mapInvert(base10Labels);\r\n\r\nconst labels = new Map<Base, Map<number, Units>>([\r\n    [2, base2Labels],\r\n    [10, base10Labels]\r\n]);\r\n\r\nexport function formatBytes(value: number, base: 2 | 10 = 10) {\r\n    const isNegative = value < 0;\r\n    value = Math.abs(value);\r\n\r\n    const systemBase = base === 2 ? 1024 : 1000;\r\n    let size = Math.min(4, Math.floor(Math.log(value) / Math.log(systemBase)));\r\n    let divisor = Math.pow(systemBase, size);\r\n    if (2 * value >= systemBase * divisor && size < 4) {\r\n        size++;\r\n        divisor *= systemBase;\r\n    }\r\n\r\n    let label: string;\r\n    if (size === 0) {\r\n        label = \"B\";\r\n    }\r\n    else {\r\n        const levels = labels.get(base);\r\n        label = levels.get(size);\r\n        value /= divisor;\r\n    }\r\n\r\n    const isExact = (value % 1) === 0;\r\n    const str = `${isNegative ? \"-\" : \"\"}${value.toFixed(isExact ? 0 : 2)} ${label}`;\r\n\r\n    return str;\r\n}\r\n\r\nexport function toBytes(value: number, units: Units): number {\r\n    if (units === \"B\") {\r\n        return value;\r\n    }\r\n    else {\r\n        let systemBase: number;\r\n        let size: number;\r\n        if (isBase2Units(units)) {\r\n            systemBase = 1024;\r\n            size = base2Sizes.get(units);\r\n        }\r\n        else if (isBase10Units(units)) {\r\n            systemBase = 1000;\r\n            size = base10Sizes.get(units);\r\n        }\r\n        else {\r\n            assertNever(units);\r\n        }\r\n\r\n        const multiplier = Math.pow(systemBase, size);\r\n        return value * multiplier;\r\n    }\r\n}", "const MICROMETERS_PER_MILLIMETER = 1000;\r\nconst MILLIMETERS_PER_CENTIMETER = 10;\r\nconst CENTIMETERS_PER_INCH = 2.54;\r\nconst CENTIMETERS_PER_METER = 100;\r\nconst INCHES_PER_HAND = 4;\r\nconst HANDS_PER_FOOT = 3;\r\nconst FEET_PER_YARD = 3;\r\nconst FEET_PER_ROD = 16.5;\r\nconst METERS_PER_KILOMETER = 1000;\r\nconst RODS_PER_FURLONG = 40;\r\nconst FURLONGS_PER_MILE = 8;\r\n\r\nconst MICROMETERS_PER_CENTIMETER = MICROMETERS_PER_MILLIMETER * MILLIMETERS_PER_CENTIMETER;\r\nconst MICROMETERS_PER_INCH = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MICROMETERS_PER_HAND = MICROMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MICROMETERS_PER_FOOT = MICROMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MICROMETERS_PER_YARD = MICROMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MICROMETERS_PER_METER = MICROMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MICROMETERS_PER_ROD = MICROMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MICROMETERS_PER_FURLONG = MICROMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MICROMETERS_PER_KILOMETER = MICROMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MICROMETERS_PER_MILE = MICROMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst MILLIMETERS_PER_INCH = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_INCH;\r\nconst MILLIMETERS_PER_HAND = MILLIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst MILLIMETERS_PER_FOOT = MILLIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst MILLIMETERS_PER_YARD = MILLIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst MILLIMETERS_PER_METER = MILLIMETERS_PER_CENTIMETER * CENTIMETERS_PER_METER;\r\nconst MILLIMETERS_PER_ROD = MILLIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst MILLIMETERS_PER_FURLONG = MILLIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst MILLIMETERS_PER_KILOMETER = MILLIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst MILLIMETERS_PER_MILE = MILLIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst CENTIMETERS_PER_HAND = CENTIMETERS_PER_INCH * INCHES_PER_HAND;\r\nconst CENTIMETERS_PER_FOOT = CENTIMETERS_PER_HAND * HANDS_PER_FOOT;\r\nconst CENTIMETERS_PER_YARD = CENTIMETERS_PER_FOOT * FEET_PER_YARD;\r\nconst CENTIMETERS_PER_ROD = CENTIMETERS_PER_FOOT * FEET_PER_ROD;\r\nconst CENTIMETERS_PER_FURLONG = CENTIMETERS_PER_ROD * RODS_PER_FURLONG;\r\nconst CENTIMETERS_PER_KILOMETER = CENTIMETERS_PER_METER * METERS_PER_KILOMETER;\r\nconst CENTIMETERS_PER_MILE = CENTIMETERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst INCHES_PER_FOOT = INCHES_PER_HAND * HANDS_PER_FOOT;\r\nconst INCHES_PER_YARD = INCHES_PER_FOOT * FEET_PER_YARD;\r\nconst INCHES_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_INCH;\r\nconst INCHES_PER_ROD = INCHES_PER_FOOT * FEET_PER_ROD;\r\nconst INCHES_PER_FURLONG = INCHES_PER_ROD * RODS_PER_FURLONG;\r\nconst INCHES_PER_KILOMETER = INCHES_PER_METER * METERS_PER_KILOMETER;\r\nconst INCHES_PER_MILE = INCHES_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst HANDS_PER_YARD = HANDS_PER_FOOT * FEET_PER_YARD;\r\nconst HANDS_PER_METER = CENTIMETERS_PER_METER / CENTIMETERS_PER_HAND;\r\nconst HANDS_PER_ROD = HANDS_PER_FOOT * FEET_PER_ROD;\r\nconst HANDS_PER_FURLONG = HANDS_PER_ROD * RODS_PER_FURLONG;\r\nconst HANDS_PER_KILOMETER = HANDS_PER_METER * METERS_PER_KILOMETER;\r\nconst HANDS_PER_MILE = HANDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FEET_PER_METER = INCHES_PER_METER / INCHES_PER_FOOT;\r\nconst FEET_PER_FURLONG = FEET_PER_ROD * RODS_PER_FURLONG;\r\nconst FEET_PER_KILOMETER = FEET_PER_METER * METERS_PER_KILOMETER;\r\nconst FEET_PER_MILE = FEET_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst YARDS_PER_METER = INCHES_PER_METER / INCHES_PER_YARD;\r\nconst YARDS_PER_ROD = FEET_PER_ROD / FEET_PER_YARD;\r\nconst YARDS_PER_FURLONG = YARDS_PER_ROD * RODS_PER_FURLONG;\r\nconst YARDS_PER_KILOMETER = YARDS_PER_METER * METERS_PER_KILOMETER;\r\nconst YARDS_PER_MILE = YARDS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst METERS_PER_ROD = FEET_PER_ROD / FEET_PER_METER;\r\nconst METERS_PER_FURLONG = METERS_PER_ROD * RODS_PER_FURLONG;\r\nconst METERS_PER_MILE = METERS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst RODS_PER_KILOMETER = METERS_PER_KILOMETER / METERS_PER_ROD;\r\nconst RODS_PER_MILE = RODS_PER_FURLONG * FURLONGS_PER_MILE;\r\n\r\nconst FURLONGS_PER_KILOMETER = METERS_PER_KILOMETER /METERS_PER_FURLONG;\r\n\r\nconst KILOMETERS_PER_MILE = FURLONGS_PER_MILE / FURLONGS_PER_KILOMETER;\r\n\r\n\r\nexport function centimeters2Micrometers(centimeters: number): number {\r\n    return centimeters * MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Millimeters(centimeters: number): number {\r\n    return centimeters * MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function centimeters2Inches(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function centimeters2Hands(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function centimeters2Feet(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function centimeters2Yards(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function centimeters2Meters(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function centimeters2Rods(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function centimeters2Furlongs(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function centimeters2Kilometers(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function centimeters2Miles(centimeters: number): number {\r\n    return centimeters / CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function feet2Micrometers(feet: number): number {\r\n    return feet * MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Millimeters(feet: number): number {\r\n    return feet * MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Centimeters(feet: number): number {\r\n    return feet * CENTIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Inches(feet: number): number {\r\n    return feet * INCHES_PER_FOOT;\r\n}\r\n\r\nexport function feet2Hands(feet: number): number {\r\n    return feet * HANDS_PER_FOOT;\r\n}\r\n\r\nexport function feet2Yards(feet: number): number {\r\n    return feet / FEET_PER_YARD;\r\n}\r\n\r\nexport function feet2Meters(feet: number): number {\r\n    return feet / FEET_PER_METER;\r\n}\r\n\r\nexport function feet2Rods(feet: number): number {\r\n    return feet / FEET_PER_ROD;\r\n}\r\n\r\nexport function feet2Furlongs(feet: number): number {\r\n    return feet / FEET_PER_FURLONG;\r\n}\r\n\r\nexport function feet2Kilometers(feet: number): number {\r\n    return feet / FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function feet2Miles(feet: number): number {\r\n    return feet / FEET_PER_MILE;\r\n}\r\n\r\nexport function furlongs2Micrometers(furlongs: number): number {\r\n    return furlongs * MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Millimeters(furlongs: number): number {\r\n    return furlongs * MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Centimeters(furlongs: number): number {\r\n    return furlongs * CENTIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Inches(furlongs: number): number {\r\n    return furlongs * INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Hands(furlongs: number): number {\r\n    return furlongs * HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Feet(furlongs: number): number {\r\n    return furlongs * FEET_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Yards(furlongs: number): number {\r\n    return furlongs * YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Meters(furlongs: number): number {\r\n    return furlongs * METERS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Rods(furlongs: number): number {\r\n    return furlongs * RODS_PER_FURLONG;\r\n}\r\n\r\nexport function furlongs2Kilometers(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function furlongs2Miles(furlongs: number): number {\r\n    return furlongs / FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function hands2Micrometers(hands: number): number {\r\n    return hands * MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Millimeters(hands: number): number {\r\n    return hands * MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Centimeters(hands: number): number {\r\n    return hands * CENTIMETERS_PER_HAND;\r\n}\r\n\r\nexport function hands2Inches(hands: number): number {\r\n    return hands * INCHES_PER_HAND;\r\n}\r\n\r\nexport function hands2Feet(hands: number): number {\r\n    return hands / HANDS_PER_FOOT;\r\n}\r\n\r\nexport function hands2Yards(hands: number): number {\r\n    return hands / HANDS_PER_YARD;\r\n}\r\n\r\nexport function hands2Meters(hands: number): number {\r\n    return hands / HANDS_PER_METER;\r\n}\r\n\r\nexport function hands2Rods(hands: number): number {\r\n    return hands / HANDS_PER_ROD;\r\n}\r\n\r\nexport function hands2Furlongs(hands: number): number {\r\n    return hands / HANDS_PER_FURLONG;\r\n}\r\n\r\nexport function hands2Kilometers(hands: number): number {\r\n    return hands / HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function hands2Miles(hands: number): number {\r\n    return hands / HANDS_PER_MILE;\r\n}\r\n\r\nexport function inches2Micrometers(inches: number): number {\r\n    return inches * MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Millimeters(inches: number): number {\r\n    return inches * MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Centimeters(inches: number): number {\r\n    return inches * CENTIMETERS_PER_INCH;\r\n}\r\n\r\nexport function inches2Hands(inches: number): number {\r\n    return inches / INCHES_PER_HAND;\r\n}\r\n\r\nexport function inches2Feet(inches: number): number {\r\n    return inches / INCHES_PER_FOOT;\r\n}\r\n\r\nexport function inches2Yards(inches: number): number {\r\n    return inches / INCHES_PER_YARD;\r\n}\r\n\r\nexport function inches2Meters(inches: number): number {\r\n    return inches / INCHES_PER_METER;\r\n}\r\n\r\nexport function inches2Rods(inches: number): number {\r\n    return inches / INCHES_PER_ROD;\r\n}\r\n\r\nexport function inches2Furlongs(inches: number): number {\r\n    return inches / INCHES_PER_FURLONG;\r\n}\r\n\r\nexport function inches2Kilometers(inches: number): number {\r\n    return inches / INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function inches2Miles(inches: number): number {\r\n    return inches / INCHES_PER_MILE;\r\n}\r\n\r\nexport function kilometers2Micrometers(kilometers: number): number {\r\n    return kilometers * MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Millimeters(kilometers: number): number {\r\n    return kilometers * MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Centimeters(kilometers: number): number {\r\n    return kilometers * CENTIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Inches(kilometers: number): number {\r\n    return kilometers * INCHES_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Hands(kilometers: number): number {\r\n    return kilometers * HANDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Feet(kilometers: number): number {\r\n    return kilometers * FEET_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Yards(kilometers: number): number {\r\n    return kilometers * YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Meters(kilometers: number): number {\r\n    return kilometers * METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Rods(kilometers: number): number {\r\n    return kilometers * RODS_PER_KILOMETER;\r\n}\r\nexport function kilometers2Furlongs(kilometers: number): number {\r\n    return kilometers * FURLONGS_PER_KILOMETER;\r\n}\r\n\r\nexport function kilometers2Miles(kilometers: number): number {\r\n    return kilometers / KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function meters2Micrometers(meters: number): number {\r\n    return meters * MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Millimeters(meters: number): number {\r\n    return meters * MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Centimeters(meters: number): number {\r\n    return meters * CENTIMETERS_PER_METER;\r\n}\r\n\r\nexport function meters2Inches(meters: number): number {\r\n    return meters * INCHES_PER_METER;\r\n}\r\n\r\nexport function meters2Hands(meters: number): number {\r\n    return meters * HANDS_PER_METER;\r\n}\r\n\r\nexport function meters2Feet(meters: number): number {\r\n    return meters * FEET_PER_METER;\r\n}\r\n\r\nexport function meters2Yards(meters: number): number {\r\n    return meters * YARDS_PER_METER;\r\n}\r\n\r\nexport function meters2Rods(meters: number): number {\r\n    return meters / METERS_PER_ROD;\r\n}\r\n\r\nexport function meters2Furlongs(meters: number): number {\r\n    return meters / METERS_PER_FURLONG;\r\n}\r\n\r\nexport function meters2Kilometers(meters: number): number {\r\n    return meters / METERS_PER_KILOMETER;\r\n}\r\n\r\nexport function meters2Miles(meters: number): number {\r\n    return meters / METERS_PER_MILE;\r\n}\r\n\r\nexport function micrometers2Millimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function micrometers2Centimeters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function micrometers2Inches(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_INCH;\r\n}\r\n\r\nexport function micrometers2Hands(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_HAND;\r\n}\r\n\r\nexport function micrometers2Feet(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FOOT;\r\n}\r\n\r\nexport function micrometers2Yards(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function micrometers2Meters(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_METER;\r\n}\r\n\r\nexport function micrometers2Rods(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function micrometers2Furlongs(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function micrometers2Kilometers(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function micrometers2Miles(micrometers: number): number {\r\n    return micrometers / MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Micrometers(miles: number): number {\r\n    return miles * MICROMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Millimeters(miles: number): number {\r\n    return miles * MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Centimeters(miles: number): number {\r\n    return miles * CENTIMETERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Inches(miles: number): number {\r\n    return miles * INCHES_PER_MILE;\r\n}\r\n\r\nexport function miles2Hands(miles: number): number {\r\n    return miles * HANDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Feet(miles: number): number {\r\n    return miles * FEET_PER_MILE;\r\n}\r\n\r\nexport function miles2Yards(miles: number): number {\r\n    return miles * YARDS_PER_MILE;\r\n}\r\n\r\nexport function miles2Meters(miles: number): number {\r\n    return miles * METERS_PER_MILE;\r\n}\r\n\r\nexport function miles2Rods(miles: number): number {\r\n    return miles * RODS_PER_MILE;\r\n}\r\n\r\nexport function miles2Furlongs(miles: number): number {\r\n    return miles * FURLONGS_PER_MILE;\r\n}\r\n\r\nexport function miles2Kilometers(miles: number): number {\r\n    return miles * KILOMETERS_PER_MILE;\r\n}\r\n\r\nexport function millimeters2Micrometers(millimeters: number): number {\r\n    return millimeters * MICROMETERS_PER_MILLIMETER;\r\n}\r\n\r\nexport function millimeters2Centimeters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_CENTIMETER;\r\n}\r\n\r\nexport function millimeters2Inches(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_INCH;\r\n}\r\n\r\nexport function millimeters2Hands(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_HAND;\r\n}\r\n\r\nexport function millimeters2Feet(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FOOT;\r\n}\r\n\r\nexport function millimeters2Yards(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function millimeters2Meters(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_METER;\r\n}\r\n\r\nexport function millimeters2Rods(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function millimeters2Furlongs(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_FURLONG;\r\n}\r\n\r\nexport function millimeters2Kilometers(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_KILOMETER;\r\n}\r\n\r\nexport function millimeters2Miles(millimeters: number): number {\r\n    return millimeters / MILLIMETERS_PER_MILE;\r\n}\r\n\r\nexport function rods2Micrometers(rods: number): number {\r\n    return rods * MICROMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Millimeters(rods: number): number {\r\n    return rods * MILLIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Centimeters(rods: number): number {\r\n    return rods * CENTIMETERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Inches(rods: number): number {\r\n    return rods * INCHES_PER_ROD;\r\n}\r\n\r\nexport function rods2Hands(rods: number): number {\r\n    return rods * HANDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Feet(rods: number): number {\r\n    return rods * FEET_PER_ROD;\r\n}\r\n\r\nexport function rods2Yards(rods: number): number {\r\n    return rods * YARDS_PER_ROD;\r\n}\r\n\r\nexport function rods2Meters(rods: number): number {\r\n    return rods * METERS_PER_ROD;\r\n}\r\n\r\nexport function rods2Furlongs(rods: number): number {\r\n    return rods / RODS_PER_FURLONG;\r\n}\r\n\r\nexport function rods2Kilometers(rods: number): number {\r\n    return rods / RODS_PER_KILOMETER;\r\n}\r\n\r\nexport function rods2Miles(rods: number): number {\r\n    return rods / RODS_PER_MILE;\r\n}\r\n\r\nexport function yards2Micrometers(yards: number): number {\r\n    return yards * MICROMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Millimeters(yards: number): number {\r\n    return yards * MILLIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Centimeters(yards: number): number {\r\n    return yards * CENTIMETERS_PER_YARD;\r\n}\r\n\r\nexport function yards2Inches(yards: number): number {\r\n    return yards * INCHES_PER_YARD;\r\n}\r\n\r\nexport function yards2Hands(yards: number): number {\r\n    return yards * HANDS_PER_YARD;\r\n}\r\n\r\nexport function yards2Feet(yards: number): number {\r\n    return yards * FEET_PER_YARD;\r\n}\r\n\r\nexport function yards2Meters(yards: number): number {\r\n    return yards / YARDS_PER_METER;\r\n}\r\n\r\nexport function yards2Rods(yards: number): number {\r\n    return yards / YARDS_PER_ROD;\r\n}\r\n\r\nexport function yards2Furlongs(yards: number): number {\r\n    return yards / YARDS_PER_FURLONG;\r\n}\r\n\r\nexport function yards2Kilometers(yards: number): number {\r\n    return yards / YARDS_PER_KILOMETER;\r\n}\r\n\r\nexport function yards2Miles(yards: number): number {\r\n    return yards / YARDS_PER_MILE;\r\n}", "import { isDefined } from \"./typeChecks\";\r\n\r\ntype ProtocolType = `${string}:`;\r\n\r\nfunction parsePort(portString: string): number {\r\n    if (isDefined(portString) && portString.length > 0) {\r\n        return parseFloat(portString);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport class URLBuilder {\r\n    private _url: URL = null;\r\n    private _base: string | URL = undefined;\r\n    private _protocol: string = null\r\n    private _host: string = null;\r\n    private _hostName: string = null;\r\n    private _userName: string = null;\r\n    private _password: string = null;\r\n    private _port: number = null;\r\n    private _pathName: string = null;\r\n    private _hash: string = null;\r\n    private readonly _query = new Map<string, string>();\r\n\r\n    constructor(url?: string | URL, base?: string | URL) {\r\n        if (url !== undefined) {\r\n            this._url = new URL(url, base);\r\n            this.rehydrate();\r\n        }\r\n    }\r\n\r\n    private rehydrate(): void {\r\n        if (isDefined(this._protocol) && this._protocol !== this._url.protocol) {\r\n            this._url.protocol = this._protocol;\r\n        }\r\n\r\n        if (isDefined(this._host) && this._host !== this._url.host) {\r\n            this._url.host = this._host;\r\n        }\r\n\r\n        if (isDefined(this._hostName) && this._hostName !== this._url.hostname) {\r\n            this._url.hostname = this._hostName;\r\n        }\r\n\r\n        if (isDefined(this._userName) && this._userName !== this._url.username) {\r\n            this._url.username = this._userName;\r\n        }\r\n\r\n        if (isDefined(this._password) && this._password !== this._url.password) {\r\n            this._url.password = this._password;\r\n        }\r\n\r\n        if (isDefined(this._port) && this._port.toFixed(0) !== this._url.port) {\r\n            this._url.port = this._port.toFixed(0);\r\n        }\r\n\r\n        if (isDefined(this._pathName) && this._pathName !== this._url.pathname) {\r\n            this._url.pathname = this._pathName;\r\n        }\r\n\r\n        if (isDefined(this._hash) && this._hash !== this._url.hash) {\r\n            this._url.hash = this._hash;\r\n        }\r\n\r\n        for (const [k, v] of this._query) {\r\n            this._url.searchParams.set(k, v);\r\n        }\r\n\r\n        this._protocol = this._url.protocol;\r\n        this._host = this._url.host;\r\n        this._hostName = this._url.hostname;\r\n        this._userName = this._url.username;\r\n        this._password = this._url.password;\r\n        this._port = parsePort(this._url.port);\r\n        this._pathName = this._url.pathname;\r\n        this._hash = this._url.hash;\r\n        this._url.searchParams.forEach((v, k) =>\r\n            this._query.set(k, v));\r\n    }\r\n\r\n    private refresh(): boolean {\r\n        if (this._url === null) {\r\n            if (isDefined(this._protocol)\r\n                && (isDefined(this._host) || isDefined(this._hostName))) {\r\n                if (isDefined(this._host)) {\r\n                    this._url = new URL(`${this._protocol}//${this._host}`, this._base);\r\n                    this._port = parsePort(this._url.port);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n                else if (isDefined(this._hostName)) {\r\n                    this._url = new URL(`${this._protocol}//${this._hostName}`, this._base);\r\n                    this.rehydrate();\r\n                    return false;\r\n                }\r\n            }\r\n            else if (isDefined(this._pathName) && isDefined(this._base)) {\r\n                this._url = new URL(this._pathName, this._base);\r\n                this.rehydrate();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return isDefined(this._url);\r\n    }\r\n\r\n    base(base: string | URL) {\r\n        if (this._url !== null) {\r\n            throw new Error(\"Cannot redefine base after defining the protocol and domain\")\r\n        }\r\n\r\n        this._base = base;\r\n        this.refresh();\r\n        return this;\r\n    }\r\n\r\n    protocol(protocol: ProtocolType) {\r\n        this._protocol = protocol;\r\n        if (this.refresh()) {\r\n            this._url.protocol = protocol;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    host(host: string) {\r\n        this._host = host;\r\n        if (this.refresh()) {\r\n            this._url.host = host;\r\n            this._hostName = this._url.hostname;\r\n            this._port = parsePort(this._url.port);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hostName(hostName: string) {\r\n        this._hostName = hostName;\r\n        if (this.refresh()) {\r\n            this._url.hostname = hostName;\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    port(port: number) {\r\n        this._port = port;\r\n        if (this.refresh()) {\r\n            this._url.port = port.toFixed(0);\r\n            this._host = `${this._url.hostname}:${this._url.port}`;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    userName(userName: string) {\r\n        this._userName = userName;\r\n        if (this.refresh()) {\r\n            this._url.username = userName;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    password(password: string) {\r\n        this._password = password;\r\n        if (this.refresh()) {\r\n            this._url.password = password;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    path(path: string) {\r\n        this._pathName = path;\r\n        if (this.refresh()) {\r\n            this._url.pathname = path;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    pathPop(pattern?: RegExp) {\r\n        pattern = pattern || /\\/[^\\/]+\\/?$/;\r\n        return this.path(this._pathName.replace(pattern, \"\"));\r\n    }\r\n\r\n    pathPush(part: string) {\r\n        let path = this._pathName;\r\n        if (!path.endsWith('/')) {\r\n            path += '/';\r\n        }\r\n\r\n        path += part;\r\n\r\n        return this.path(path);\r\n    }\r\n\r\n    query(name: string, value: string) {\r\n        this._query.set(name, value);\r\n        if (this.refresh()) {\r\n            this._url.searchParams.set(name, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    hash(hash: string) {\r\n        this._hash = hash;\r\n        if (this.refresh()) {\r\n            this._url.hash = hash;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    toURL() {\r\n        return this._url;\r\n    }\r\n\r\n    toString() {\r\n        return this._url.href;\r\n    }\r\n\r\n    [Symbol.toStringTag]() {\r\n        return this.toString();\r\n    }\r\n}", "import { BaseProgress, isArray, isDefined, TypedEventBase } from \"@juniper-lib/tslib\";\r\nimport { WorkerClientMethodCallMessage, WorkerServerErrorMessage, WorkerServerEventMessage, WorkerServerMessages, WorkerServerProgressMessage, WorkerServerReturnMessage } from \"@juniper-lib/workers/WorkerMessages\";\r\n\r\ntype workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\ntype createTransferableCallback<T> = (returnValue: T) => (Transferable | OffscreenCanvas)[];\r\n\r\ntype Executor<T> = (...params: any[]) => Promise<T>;\r\n\r\ntype VoidExecutor = (...params: any[]) => void;\r\n\r\nclass WorkerServerProgress extends BaseProgress {\r\n    constructor(private readonly server: WorkerServer, private readonly taskID: number) {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    override report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        const message: WorkerServerProgressMessage = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\n\r\nexport class WorkerServer {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.addEventListener(\"message\", (evt: MessageEvent<WorkerClientMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n\r\n    postMessage(message: WorkerServerMessages, transferables?: (Transferable | OffscreenCanvas)[]): void {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private callMethod(data: WorkerClientMethodCallMessage) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        const message: WorkerServerErrorMessage = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    private onReturn<T>(taskID: number, returnValue: T, transferReturnValue: createTransferableCallback<T>): void {\r\n        let message: WorkerServerReturnMessage = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private addMethodInternal<T>(methodName: string, asyncFunc: Function, transferReturnValue?: createTransferableCallback<T>) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n            const prog = new WorkerServerProgress(this, taskID);\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, prog);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction<T>(methodName: string, asyncFunc: Executor<T>, transferReturnValue?: createTransferableCallback<T>) {\r\n        this.addMethodInternal<T>(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName: string, asyncFunc: VoidExecutor) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param obj - the object on which to find the method.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & Executor<any>,\r\n        ReturnT extends (ReturnType<MethodT> extends Promise<infer T> ? T : ReturnT)\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT,\r\n        transferReturnValue?: createTransferableCallback<ReturnT>\r\n    ): void {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & VoidExecutor\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT\r\n    ): void {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n\r\n\r\n    addEvent<\r\n        EventsT,\r\n        TransferableT\r\n    >(\r\n        object: TypedEventBase<EventsT>,\r\n        eventName: keyof EventsT & string,\r\n        makePayload?: (evt: Event) => TransferableT,\r\n        transferReturnValue?: createTransferableCallback<TransferableT>\r\n    ): void {\r\n        object.addEventListener(eventName, (evt: Event) => {\r\n            let message: WorkerServerEventMessage = null;\r\n            if (isDefined(makePayload)) {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName,\r\n                    data: makePayload(evt)\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName\r\n                };\r\n            }\r\n\r\n            if (message.data !== undefined\r\n                && isDefined(transferReturnValue)) {\r\n                const transferables = transferReturnValue(message.data);\r\n                this.postMessage(message, transferables);\r\n            }\r\n            else {\r\n                this.postMessage(message);\r\n            }\r\n        });\r\n    }\r\n}", "\uFEFFimport { TypedEvent, TypedEventBase, xy2i } from \"@juniper-lib/tslib\";\r\n\r\nimport { singleton } from \"@juniper-lib/tslib\";\r\n\r\ntype ActionTypes = \"down\" | \"move\" | \"up\";\r\nconst actionTypes = singleton(\"Juniper:Graphics2D:Dirt:StopTypes\", () => new Map<string, ActionTypes>([\r\n    [\"mousedown\", \"down\"],\r\n    [\"mouseenter\", \"move\"],\r\n    [\"mouseleave\", \"up\"],\r\n    [\"mousemove\", \"move\"],\r\n    [\"mouseout\", \"up\"],\r\n    [\"mouseover\", \"move\"],\r\n    [\"mouseup\", \"up\"],\r\n\r\n    [\"pointerdown\", \"down\"],\r\n    [\"pointerenter\", \"move\"],\r\n    [\"pointerleave\", \"up\"],\r\n    [\"pointermove\", \"move\"],\r\n    [\"pointerrawupdate\", \"move\"],\r\n    [\"pointerout\", \"up\"],\r\n    [\"pointerup\", \"up\"],\r\n    [\"pointerover\", \"move\"],\r\n\r\n    [\"touchcancel\", \"up\"],\r\n    [\"touchend\", \"up\"],\r\n    [\"touchmove\", \"move\"],\r\n    [\"touchstart\", \"down\"]\r\n]));\r\n\r\nexport interface DirtEventMap {\r\n    \"update\": TypedEvent<\"update\">;\r\n}\r\n\r\nexport interface IDirtService extends TypedEventBase<DirtEventMap> {\r\n    checkPointer(id: number | string, x: number, y: number, type: string): void;\r\n    checkPointerUV(id: number | string, x: number, y: number, type: string): void;\r\n}\r\n\r\nexport class DirtService extends TypedEventBase<DirtEventMap> implements IDirtService {\r\n    private readonly sub: OffscreenCanvas;\r\n    private readonly subg: OffscreenCanvasRenderingContext2D;\r\n    private readonly updateEvt = new TypedEvent(\"update\");\r\n\r\n    private canvas: OffscreenCanvas = null;\r\n    private g: OffscreenCanvasRenderingContext2D = null;\r\n    private pointerId: number | string = null;\r\n    private fr: number = null;\r\n    private pr: number = null;\r\n    private height: number = null;\r\n    private x: number = null;\r\n    private y: number = null;\r\n    private lx: number = null;\r\n    private ly: number = null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.sub = new OffscreenCanvas(this.height, this.height);\r\n        this.subg = this.sub.getContext(\"2d\");\r\n    }\r\n\r\n    init(canvas: OffscreenCanvas, fr: number, pr: number): Promise<void> {\r\n        this.canvas = canvas;\r\n        this.g = this.canvas.getContext(\"2d\");\r\n        this.g.fillStyle = \"rgb(50%, 50%, 50%)\";\r\n        this.g.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        const imgData = this.g.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n        const { data, width, height } = imgData;\r\n        const components = data.length / (width * height);\r\n        for (let i = 0; i < data.length; i += components) {\r\n            const v = Math.floor(50 * (Math.random() - 0.5));\r\n            for (let c = 0; c < components - 1; ++c) {\r\n                data[i + c] += v;\r\n            }\r\n        }\r\n\r\n        this.g.putImageData(imgData, 0, 0);\r\n\r\n        this.fr = fr;\r\n        this.pr = pr;\r\n        this.height = 2 * (this.fr + this.pr) + 1;\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private update() {\r\n        if (this.pointerId !== null && this.canvas) {\r\n            const dx = this.lx - this.x;\r\n            const dy = this.ly - this.y;\r\n            if ((Math.abs(dx) + Math.abs(dy)) > 0) {\r\n                const a = Math.atan2(dy, dx) + Math.PI;\r\n                const d = Math.round(Math.sqrt(dx * dx + dy * dy));\r\n                const width = d + this.fr + this.pr;\r\n                this.sub.width = width;\r\n                this.sub.height = this.height;\r\n                this.subg.save();\r\n                this.subg.translate(0, this.fr + this.pr);\r\n                this.subg.rotate(-a);\r\n                this.subg.translate(-this.lx, -this.ly);\r\n                this.subg.drawImage(this.canvas, 0, 0);\r\n                this.subg.restore();\r\n\r\n                const imgData = this.subg.getImageData(0, 0, this.sub.width, this.sub.height);\r\n\r\n                const { data } = imgData;\r\n                const components = data.length / (width * this.height);\r\n\r\n                const I = (x: number, y: number) => xy2i(x, y + this.fr + this.pr, width, components);\r\n                const GET = (x: number, y: number) => data[I(x, y)] / 255;\r\n                const SET = (x: number, y: number, v: number) => data[I(x, y)] = 255 * v;\r\n\r\n                const start = GET(0, 0);\r\n                const level = Math.max(0, start - 0.25);\r\n\r\n                let accum = 0;\r\n                for (let x = 0; x < d; ++x) {\r\n                    const here = GET(x, 0);\r\n                    accum += here - level\r\n                    SET(x, 0, level);\r\n                    for (let y = -this.fr; y <= this.fr; ++y) {\r\n                        const dx = this.fr - Math.abs(y);\r\n                        const here = GET(x + dx, y);\r\n                        accum += here - level;\r\n                        SET(x + dx, y, level);\r\n                    }\r\n\r\n                    const deposit = level / (2 * this.fr * this.pr);\r\n                    for (let y = -this.fr - this.pr; y <= this.fr + this.pr && accum > 0; ++y) {\r\n                        if (y < -this.fr || this.fr < y) {\r\n                            const dx = this.fr - Math.abs(y);\r\n                            const there = GET(x + dx, y);\r\n                            const v = Math.min(accum, deposit);\r\n                            SET(x + dx, y, there + v);\r\n                            accum -= v;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (accum > 0) {\r\n                    const deposit = accum / (2 * this.fr * this.pr);\r\n                    for (let y = -this.fr - this.pr; y <= this.fr + this.pr && accum > 0; ++y) {\r\n                        if (y < -this.fr || this.fr < y) {\r\n                            const dx = this.fr - Math.abs(y);\r\n                            const there = GET(d + dx, y);\r\n                            const v = Math.min(accum, deposit);\r\n                            SET(d + dx, y, there + v);\r\n                            accum -= v;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                \r\n\r\n                // normalize green and blue channels\r\n                for (let i = 0; i < data.length; i += components) {\r\n                    const p = data[i];\r\n                    data[i + 1] = p;\r\n                    data[i + 2] = p;\r\n                }\r\n\r\n                this.subg.putImageData(imgData, 0, 0);\r\n\r\n                this.g.save();\r\n                this.g.translate(this.lx, this.ly);\r\n                this.g.rotate(a);\r\n                this.g.translate(-0, -this.fr - this.pr);\r\n                this.g.drawImage(this.sub, 0, 0);\r\n                this.g.restore();\r\n\r\n                this.dispatchEvent(this.updateEvt);\r\n            }\r\n        }\r\n\r\n        this.lx = this.x;\r\n        this.ly = this.y;\r\n    }\r\n\r\n    checkPointer(id: number | string, x: number, y: number, type: string) {\r\n        const action = actionTypes.get(type) || type;\r\n        if (this.pointerId === null) {\r\n            if (action === \"down\") {\r\n                this.pointerId = id;\r\n                this.lx = this.x = x;\r\n                this.ly = this.y = y;\r\n                this.update();\r\n            }\r\n        }\r\n        else if (id === this.pointerId) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.update();\r\n\r\n            if (action === \"up\") {\r\n                this.pointerId = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkPointerUV(id: number | string, x: number, y: number, type: string) {\r\n        this.checkPointer(id, x * this.canvas.width, y * this.canvas.height, type);\r\n    }\r\n}", "\uFEFFimport { WorkerServer } from \"@juniper-lib/workers\";\r\nimport { DirtService } from \"./DirtService\";\r\n\r\nexport class DirtWorkerServer extends WorkerServer {\r\n    constructor(self: DedicatedWorkerGlobalScope) {\r\n        super(self);\r\n\r\n        const dirtService = new DirtService();\r\n        this.addMethod(dirtService, \"init\", dirtService.init.bind(dirtService));\r\n        this.addVoidMethod(dirtService, \"checkPointer\", dirtService.checkPointer.bind(dirtService));\r\n        this.addEvent(dirtService, \"update\");\r\n    }\r\n}", "\uFEFFimport { DirtWorkerServer } from \"./DirtWorkerServer\";\r\n\r\n(globalThis as any).server = new DirtWorkerServer((globalThis as any) as DedicatedWorkerGlobalScope);"],
  "mappings": "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",
  "names": []
}
