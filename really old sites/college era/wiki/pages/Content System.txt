Content Management System for the [Asteroids Game].

Consider a networked game with different types of client resources: mostly image files and sounds, maybe some help documents. These resources need to be on the client machine to allow them to be consumed by the user, and will likely be consumed many times. The content provider wants to update these resources periodically, providing more content or altering existing content for whatever reason. Content creators might be collaberating via the Internet.

While a custom content distribution system is not out of the window, I'm contemplating the use of a pre-existing Content Management System to manage resource versions. Ideally, this will speed development, provide a level of stability not obtainable in a one-off CMS, provide an established toolchain for managing resources outside of the game's own management tools, and provide a mature feature set of management options (i.e. diff tools, merging, conflict resolution, etc).

For the users, obviously this management process is automatic. Security is an issue, we don't want random users changing the images of trees to images of phalluses. User's *might* have the chance of also becoming minor content providers, i.e. custom user avatars or user designed equipment. In the case of avatars, it may just be best to download them as they come, but equipment might be duplicated and shared.

With [SVN Kit|http://www.svnkit.com], I can choose either an open-source license or a pay-for closed source license, so that is nice. And using it allows me to leverage pre-existing infrastructure. A number of Web hosts offer SVN hosting, including my current host, and it scales pretty well, in case things take off and I need more bandwidth or disk space. I could conceivably host the content seperately from the game server, or even mirror the content.

I am a bit concerned that SVN might be overkill. I like to keep things to a minimum. I've had experience with hacking open source projects down to bare-minimum functionallity for what I need, but it is a rather involved process.

I guess I have to weigh building Yet Another Content Management System vs. hacking Yet Another Open Source Project. Actually, putting it that way has made it clear to me that I should hack SVN Kit down to just what I need, instead of introducing more cruft.

--- smcbeth