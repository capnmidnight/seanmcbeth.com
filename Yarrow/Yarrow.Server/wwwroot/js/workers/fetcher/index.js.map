{
  "version": 3,
  "sources": ["../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/typeChecks.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/arrays.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/identity.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/mapMap.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/makeLookup.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/PriorityList.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/PriorityMap.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/EventTarget.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/Task.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/once.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/using.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/indexdb/src/index.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/mapJoin.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/sleep.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/withRetry.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/TypedEventTarget.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/progress/src/BaseProgress.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/progress/src/ChildProgressCallback.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/progress/src/BaseParentProgressCallback.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/progress/src/progressSplit.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/src/translateResponse.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/mediatypes/src/util.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/mediatypes/src/text.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/src/FetchingServiceImplXHR.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/flags.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/workers/src/WorkerServer.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/src/FetchingService.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/fetcher/src/FetchingServiceServer.ts", "../../../../../Yarrow/src/workers/fetcher/index.ts"],
  "sourcesContent": ["function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is the special NaN value or one of the Infinities.\r\n */\r\nexport function isBadNumber(num: number): boolean {\r\n    return isNullOrUndefined(num)\r\n        || !Number.isFinite(num)\r\n        || Number.isNaN(num);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value nor one of the Infinities.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !isBadNumber(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { isDefined, isFunction, isNullOrUndefined, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\ninterface IComparable<T> {\r\n    compareTo(b: T): number;\r\n}\r\n\r\nfunction isIComparable<T>(obj: any): obj is IComparable<T> {\r\n    return isObject(obj)\r\n        && \"compareTo\" in obj\r\n        && isFunction(obj.compareTo);\r\n}\r\n\r\nexport type Comparable = number | Date | string | IComparable<any>;\r\nexport type CompareDirection = \"ascending\" | \"descending\";\r\nexport type CompareFunction<T> = ((a: T, b: T) => number) & {\r\n    direction: CompareDirection;\r\n}\r\n\r\nexport type ComparableSelector<T> = (obj: T) => Comparable;\r\n\r\nexport function compareBy<T>(direction: CompareDirection, ...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\r\nexport function compareBy<T>(...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\r\nexport function compareBy<T>(directionOrFirstKeyGetter: CompareDirection | ComparableSelector<T>, ...getKeys: ((obj: T) => Comparable)[]): CompareFunction<T> {\r\n    let direction: CompareDirection = null;\r\n    if (isString(directionOrFirstKeyGetter)) {\r\n        direction = directionOrFirstKeyGetter;\r\n    }\r\n    else {\r\n        direction = \"ascending\";\r\n        getKeys.unshift(directionOrFirstKeyGetter);\r\n    }\r\n\r\n    const d = direction === \"ascending\" ? 1 : -1;\r\n\r\n    const comparer = (a: T, b: T) => {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        for (const getKey of getKeys) {\r\n            const keyA = isNullOrUndefined(a) ? null : getKey(a);\r\n            const keyB = isNullOrUndefined(b) ? null : getKey(b);\r\n            const relation = keyA === keyB\r\n                ? 0\r\n                : isString(keyA) && isString(keyB)\r\n                    ? d * keyA.localeCompare(keyB)\r\n                    : isIComparable(keyA) && isIComparable(keyB)\r\n                        ? d * keyA.compareTo(keyB)\r\n                        : direction === \"ascending\" && keyA > keyB\r\n                            || direction === \"descending\" && keyA < keyB\r\n                            ? 1 : -1;\r\n\r\n            if (relation !== 0) {\r\n                return relation;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    };\r\n\r\n    return Object.assign(comparer, {\r\n        direction\r\n    });\r\n}\r\n\r\nexport type SearchMode = \"append\" | \"prepend\" | \"search\";\r\n\r\nexport function binarySearch<T>(arr: ArrayLike<T>, searchValue: T, comparer: CompareFunction<T>, mode: SearchMode = \"search\") {\r\n    let left = 0;\r\n    let right = arr.length - 1;\r\n    while (left <= right) {\r\n        let mid = (left + right) >> 1;\r\n        let relation = comparer(arr[mid], searchValue);\r\n        if (relation === 0) {\r\n            if (mode !== \"search\") {\r\n                const scanDirection = mode === \"append\" ? 1 : -1;\r\n                if (scanDirection > 0) {\r\n                    mid += scanDirection;\r\n                }\r\n                while (0 <= mid\r\n                    && mid < arr.length\r\n                    && (relation = comparer(arr[mid], searchValue)) === 0) {\r\n                    mid += scanDirection;\r\n                }\r\n                if (scanDirection < 0) {\r\n                    mid -= scanDirection;\r\n                }\r\n            }\r\n\r\n            return mid;\r\n        }\r\n        else if (relation < 0) {\r\n            left = mid - relation;\r\n        }\r\n        else {\r\n            right = mid - relation;\r\n        }\r\n    }\r\n\r\n    return -left - 1;\r\n}\r\n\r\nexport function insertSorted<T>(arr: T[], val: T, idx: number): number;\r\nexport function insertSorted<T>(arr: T[], val: T, idx: number, mode: SearchMode): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>, mode: SearchMode): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparerOrIdx: CompareFunction<T> | number, mode: SearchMode = \"search\"): number {\r\n    let idx: number = null;\r\n    if (isNumber(comparerOrIdx)) {\r\n        idx = comparerOrIdx;\r\n    }\r\n    else {\r\n        idx = binarySearch(arr, val, comparerOrIdx, mode);\r\n    }\r\n\r\n    if (idx < 0) {\r\n        idx = -idx - 1;\r\n    }\r\n\r\n    arrayInsertAt(arr, val, idx);\r\n    return idx;\r\n}\r\n\r\nexport function removeSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number {\r\n    const idx = binarySearch(arr, val, comparer);\r\n    if (idx >= 0) {\r\n        arrayRemoveAt(arr, idx);\r\n        return idx;\r\n    }\r\n    return -1;\r\n}\r\n\r\n\r\n/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}\r\n\r\n/**\r\n * Checks to see if two arrays contain the same elements\r\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\r\n * @param arr1\r\n * @param arr2\r\n */\r\n\r\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\r\n    for (let i = 0; i < arr1.length; ++i) {\r\n        if (arr1[i] !== arr2[i]) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n\r\nexport function arrayGen<T>(count: number, thunk: (i: number) => T): T[] {\r\n    return Array.from(iterableGen(count, thunk));\r\n}\r\n\r\nexport function* iterableGen<T>(count: number, thunk: (i: number) => T) {\r\n    for (let i = 0; i < count; ++i) {\r\n        yield thunk(i);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Inserts an item at the given index into an array.\r\n * @param arr\r\n * @param item\r\n * @param idx\r\n */\r\n\r\nexport function arrayInsertAt<T>(arr: T[], item: T, idx: number) {\r\n    arr.splice(idx, 0, item);\r\n}\r\n\r\n/**\r\n * Returns a random item from an array of items.\r\n *\r\n * Provides an option to consider an additional item as part of the collection\r\n * for random selection.\r\n */\r\nexport function arrayRandom<T>(arr: T[], defaultValue?: T): T | undefined {\r\n    const offset = defaultValue != null ? 1 : 0,\r\n        idx = Math.floor(Math.random() * (arr.length + offset)) - offset;\r\n    if (idx < 0) {\r\n        return defaultValue;\r\n    }\r\n    else {\r\n        return arr[idx];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}\r\n\r\n/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}\r\n\r\n/**\r\n * Replaces all of the items in an array with the given items.\r\n *\r\n * This helps reduce GC pressure as you're not creating arrays\r\n * and then dropping them on the floor.\r\n * \r\n * @param arr the array to fill\r\n * @param items the items to put into the array\r\n */\r\nexport function arrayReplace<T>(arr: T[], ...items: T[]) {\r\n    arr.splice(0, arr.length, ...items);\r\n}\r\n\r\nexport function arrayCreate<T>(count: number, make: (i: number, len?: number) => T): T[] {\r\n    const arr = new Array<T>(count);\r\n    for (let i = 0; i < count; ++i) {\r\n        arr[i] = make(i, count);\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nfunction _arrayScan<T>(forward: boolean, arr: readonly T[], tests: ((val: T) => boolean)[]): T {\r\n    const start = forward ? 0 : arr.length - 1;\r\n    const end = forward ? arr.length : -1;\r\n    const inc = forward ? 1 : -1;\r\n    for (const test of tests) {\r\n        for (let i = start; i != end; i += inc) {\r\n            const item = arr[i];\r\n            if (test(item)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The first item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScan<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(true, arr, tests);\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The last item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScanReverse<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(false, arr, tests);\r\n}\r\n\r\nexport function arrayShuffleInplace<T>(arr: T[]): void {\r\n    for (let i = 0; i < arr.length - 1; ++i) {\r\n        const subLength = arr.length - i;\r\n        const subIndex = Math.floor(Math.random() * subLength);\r\n        const temp = arr[i];\r\n        const j = subIndex + i;\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}\r\n\r\nexport function arrayShuffle<T>(arr: readonly T[]): T[] {\r\n    const output = arr.slice();\r\n    arrayShuffleInplace(output);\r\n    return output;\r\n}\r\n\r\nconst numericPattern = /^(-?(?:\\d+\\.)\\d+)/;\r\n/**\r\n * Creates a new array that is sorted by the key extracted\r\n * by the keySelector callback, not modifying the input array,\r\n * (unlike JavaScript's own Array.prototype.sort).\r\n *\r\n * If the values have a number at the beginning, they'll be sorted\r\n * by that number.\r\n * @param arr\r\n * @param keySelector\r\n */\r\nexport function arraySortNumericByKey<T>(arr: ReadonlyArray<T>, keySelector: (obj: T) => string): T[] {\r\n    const comparer = compareBy<T>(v => {\r\n        const key = keySelector(v);\r\n        const match = key.match(numericPattern);\r\n        if (isDefined(match)) {\r\n            return parseFloat(match[1]);\r\n        }\r\n        return key;\r\n    });\r\n\r\n    return Array\r\n        .from(arr)\r\n        .sort(comparer);\r\n}\r\n\r\nexport function arrayZip<T, V>(arr1: readonly T[], arr2: readonly T[], combine: (a: T, b: T) => V): V[] {\r\n    const len = Math.max(arr1.length, arr2.length);\r\n    const output = new Array<V>(len);\r\n    for (let i = 0; i < len; ++i) {\r\n        output[i] = combine(arr1[i], arr2[i]);\r\n    }\r\n\r\n    return output;\r\n}\r\n", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport function reflectValue<T>(v: T): () => T {\r\n    return () => v;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "export function mapMap<T, U, V>(items: readonly T[], makeID: (item: T) => U, makeValue: (item: T) => V) {\r\n    return new Map(items.map((item) => [makeID(item), makeValue(item)]));\r\n}", "import { identity } from \"@juniper-lib/tslib/dist/identity\";\r\nimport { mapMap } from \"./mapMap\";\r\n\r\nexport function makeLookup<T, U>(items: readonly T[], makeID: (item: T) => U): Map<U, T> {\r\n    return mapMap(items, makeID, identity);\r\n}", "import { isDefined, isNullOrUndefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { arrayClear, arrayRemove } from \"./arrays\";\r\n\r\nexport class PriorityList<KeyT, ValueT> {\r\n    private readonly items = new Map<KeyT, ValueT[]>();\r\n    private readonly defaultItems = new Array<ValueT>();\r\n\r\n    constructor(init?: [KeyT, ValueT][]) {\r\n        if (isDefined(init)) {\r\n            for (const [key, value] of init) {\r\n                this.add(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key: KeyT, ...values: ValueT[]): this {\r\n        for (const value of values) {\r\n            if (isNullOrUndefined(key)) {\r\n                this.defaultItems.push(value);\r\n            }\r\n            else {\r\n                let list = this.items.get(key);\r\n                if (isNullOrUndefined(list)) {\r\n                    this.items.set(key, list = []);\r\n                }\r\n\r\n                list.push(value);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    entries(): IterableIterator<[KeyT, ValueT[]]> {\r\n        return this.items.entries();\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n\r\n    keys(): IterableIterator<KeyT> {\r\n        return this.items.keys();\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const item of this.defaultItems) {\r\n            yield item;\r\n        }\r\n        for (const list of this.items.values()) {\r\n            for (const item of list) {\r\n                yield item;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key: KeyT): boolean {\r\n        if (isDefined(key)) {\r\n            return this.items.has(key);\r\n        }\r\n        else {\r\n            return this.defaultItems.length > 0;\r\n        }\r\n    }\r\n\r\n    get(key: KeyT): ValueT[] {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems;\r\n        }\r\n\r\n        return this.items.get(key) || [];\r\n    }\r\n\r\n    count(key: KeyT): number {\r\n        if (isNullOrUndefined(key)) {\r\n            return this.defaultItems.length;\r\n        }\r\n\r\n        const list = this.get(key);\r\n        if (isDefined(list)) {\r\n            return list.length;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = this.defaultItems.length;\r\n        for (const list of this.items.values()) {\r\n            size += list.length;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key: KeyT) {\r\n        if (isNullOrUndefined(key)) {\r\n            return arrayClear(this.defaultItems).length > 0;\r\n        }\r\n        else {\r\n            return this.items.delete(key);\r\n        }\r\n    }\r\n\r\n    remove(key: KeyT, value: ValueT) {\r\n        if (isNullOrUndefined(key)) {\r\n            arrayRemove(this.defaultItems, value);\r\n        }\r\n        else {\r\n            const list = this.items.get(key);\r\n            if (isDefined(list)) {\r\n                arrayRemove(list, value);\r\n                if (list.length === 0) {\r\n                    this.items.delete(key);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n        arrayClear(this.defaultItems);\r\n    }\r\n}\r\n\r\n\r\n", "import { isDefined, isNullOrUndefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\n\r\n\r\nexport class PriorityMap<Key1T, Key2T, ValueT> {\r\n    private readonly items = new Map<Key1T, Map<Key2T, ValueT>>();\r\n\r\n    constructor(init?: Iterable<[Key1T, Key2T, ValueT]>) {\r\n        if (isDefined(init)) {\r\n            for (const [key1, key2, value] of init) {\r\n                this.add(key1, key2, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    add(key1: Key1T, key2: Key2T, value: ValueT): this {\r\n        let level1 = this.items.get(key1);\r\n        if (isNullOrUndefined(level1)) {\r\n            this.items.set(key1, level1 = new Map());\r\n        }\r\n\r\n        level1.set(key2, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    *entries(): IterableIterator<[Key1T, Key2T, ValueT]> {\r\n        for (const [key1, level1] of this.items) {\r\n            for (const [key2, value] of level1) {\r\n                yield [key1, key2, value];\r\n            }\r\n        }\r\n    }\r\n    keys(): IterableIterator<Key1T>;\r\n    keys(key1: Key1T): IterableIterator<Key2T>;\r\n    keys(key1?: Key1T): IterableIterator<Key1T | Key2T> {\r\n        if (isNullOrUndefined(key1)) {\r\n            return this.items.keys();\r\n        }\r\n        else {\r\n            return this.items.get(key1).keys();\r\n        }\r\n    }\r\n\r\n    *values(): IterableIterator<ValueT> {\r\n        for (const level1 of this.items.values()) {\r\n            for (const value of level1.values()) {\r\n                yield value;\r\n            }\r\n        }\r\n    }\r\n\r\n    has(key1: Key1T, key2?: Key2T): boolean {\r\n        return this.items.has(key1)\r\n            && (isNullOrUndefined(key2)\r\n                || this.items.get(key1).has(key2));\r\n    }\r\n\r\n    get(key1: Key1T): Map<Key2T, ValueT>;\r\n    get(key1: Key1T, key2: Key2T): ValueT;\r\n    get(key1: Key1T, key2?: Key2T): ValueT | Map<Key2T, ValueT> {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.get(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            return this.items.get(key1).get(key2);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    count(key1: Key1T): number {\r\n        if (this.items.has(key1)) {\r\n            return this.items.get(key1).size;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    get size(): number {\r\n        let size = 0;\r\n        for (const list of this.items.values()) {\r\n            size += list.size;\r\n        }\r\n        return size;\r\n    }\r\n\r\n    delete(key1: Key1T, key2?: Key2T) {\r\n        if (isNullOrUndefined(key2)) {\r\n            return this.items.delete(key1);\r\n        }\r\n        else if (this.items.has(key1)) {\r\n            const items = this.items.get(key1);\r\n            const deleted = items.delete(key2);\r\n            if (items.size === 0) {\r\n                this.items.delete(key1);\r\n            }\r\n\r\n            return deleted;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.items.clear();\r\n    }\r\n}\r\n", "\uFEFFimport { arrayClear, arrayRemoveAt } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { isBoolean, isDefined, isFunction, isNullOrUndefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nexport interface EventMap {\r\n    [type: string]: Event;\r\n}\r\n\r\nexport interface IEventTarget extends EventTarget {\r\n    clearEventListeners(type?: string): void;\r\n    addBubbler(bubbler: EventTarget): void;\r\n    removeBubbler(bubbler: EventTarget): void;\r\n    addScopedEventListener(scope: object, type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\r\n    removeScope(scope: object): void;\r\n}\r\n\r\nexport class CustomEventTarget implements IEventTarget {\r\n    private readonly listeners = new Map<string, EventListenerOrEventListenerObject[]>();\r\n    private readonly listenerOptions = new Map<EventListenerOrEventListenerObject, boolean | AddEventListenerOptions>();\r\n    private readonly bubblers = new Set<EventTarget>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: EventTarget) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: EventTarget) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    addScopedEventListener(scope: object, type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        let listeners = this.listeners.get(type);\r\n        if (!listeners) {\r\n            listeners = new Array<EventListenerOrEventListenerObject>();\r\n            this.listeners.set(type, listeners);\r\n        }\r\n\r\n        if (!listeners.find((c) => c === callback)) {\r\n            listeners.push(callback);\r\n\r\n            if (options) {\r\n                this.listenerOptions.set(callback, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject) {\r\n        const listeners = this.listeners.get(type);\r\n        if (listeners) {\r\n            this.removeListener(listeners, callback);\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventListenerOrEventListenerObject[], callback: EventListenerOrEventListenerObject) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                if (isFunction(callback)) {\r\n                    callback.call(this, evt);\r\n                }\r\n                else {\r\n                    callback.handleEvent(evt);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (evt.defaultPrevented) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nexport class EventTargetMixin implements IEventTarget {\r\n    private readonly listeners = new Map<string, EventListenerOrEventListenerObject[]>();\r\n    private readonly listenerOptions = new Map<EventListenerOrEventListenerObject, boolean | AddEventListenerOptions>();\r\n    private readonly bubblers = new Set<EventTarget>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    constructor(\r\n        private readonly _addEventListener: (type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions) => void,\r\n        private readonly _removeEventListener: (type: string, callback: EventListenerOrEventListenerObject) => void,\r\n        private readonly _dispatchEvent: (evt: Event) => boolean\r\n    ) {\r\n    }\r\n\r\n    addBubbler(bubbler: EventTarget): void {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: EventTarget): void {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    addScopedEventListener(scope: object, type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListener(type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        let listeners = this.listeners.get(type);\r\n        if (!listeners) {\r\n            listeners = new Array<EventListenerOrEventListenerObject>();\r\n            this.listeners.set(type, listeners);\r\n        }\r\n\r\n        if (!listeners.find((c) => c === callback)) {\r\n            listeners.push(callback);\r\n\r\n            if (options) {\r\n                this.listenerOptions.set(callback, options);\r\n            }\r\n        }\r\n\r\n        this._addEventListener(type, callback, options);\r\n    }\r\n\r\n    removeEventListener(type: string, callback: EventListenerOrEventListenerObject): void {\r\n        const listeners = this.listeners.get(type);\r\n        if (listeners) {\r\n            this.removeListener(listeners, callback);\r\n        }\r\n\r\n        this._removeEventListener(type, callback);\r\n    }\r\n\r\n    private removeListener(listeners: EventListenerOrEventListenerObject[], callback: EventListenerOrEventListenerObject) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string): void {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const result = this._dispatchEvent(evt);\r\n\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!result) {\r\n            return false;\r\n        }\r\n\r\n        for (const bubbler of this.bubblers) {\r\n            if (!bubbler.dispatchEvent(evt)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n/**\r\n * Don't actually instantiate or subclass this class. Use it as template to create new classes.\r\n * Make sure to decorate your custom element with the `@CustomElement` decorator.\r\n * \r\n * I know this sucks, but I can't get the type system to do what I want right now.\r\n */\r\nexport abstract class CustomHTMLElementExample extends HTMLElement implements IEventTarget {\r\n\r\n    private readonly eventTarget: EventTargetMixin;\r\n\r\n    constructor() {\r\n        super();\r\n        this.eventTarget = new EventTargetMixin(\r\n            super.addEventListener.bind(this),\r\n            super.removeEventListener.bind(this),\r\n            super.dispatchEvent.bind(this)\r\n        );\r\n    }\r\n\r\n    override addEventListener(type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.eventTarget.addEventListener(type, callback, options);\r\n    }\r\n\r\n    override removeEventListener(type: string, callback: EventListenerOrEventListenerObject) {\r\n        this.eventTarget.removeEventListener(type, callback);\r\n    }\r\n\r\n    override dispatchEvent(evt: Event): boolean {\r\n        return this.eventTarget.dispatchEvent(evt);\r\n    }\r\n\r\n    addBubbler(bubbler: EventTarget) {\r\n        this.eventTarget.addBubbler(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: EventTarget) {\r\n        this.eventTarget.removeBubbler(bubbler);\r\n    }\r\n\r\n    addScopedEventListener(scope: object, type: string, callback: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void {\r\n        this.eventTarget.addScopedEventListener(scope, type, callback, options);\r\n    }\r\n\r\n    removeScope(scope: object) {\r\n        this.eventTarget.removeScope(scope);\r\n    }\r\n\r\n    clearEventListeners(type?: string): void {\r\n        this.eventTarget.clearEventListeners(type);\r\n    }\r\n}\r\n", "import { arrayClear } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { TypedEventTarget, TypedEventMap } from \"./TypedEventTarget\";\r\n\r\nexport type TaskExecutionState =\r\n    | \"waiting\"\r\n    | \"running\"\r\n    | \"finished\"\r\n\r\nexport type TaskResultState =\r\n    | \"none\"\r\n    | \"resolved\"\r\n    | \"errored\";\r\n\r\n/**\r\n * A Task represents a Promise that exposes its resolve/reject functions\r\n * as methods, rather than requiring a callback being passed to its constructor.\r\n * Tasks can be used to build manually-resolved Promises with less\r\n * boilerplate of nested function blocks.\r\n **/\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n\r\n    private _result: ResultsT = undefined;\r\n    private _error: any = undefined;\r\n    private _executionState: TaskExecutionState = \"waiting\";\r\n    private _resultState: TaskResultState = \"none\";\r\n\r\n    /**\r\n     * Signal success for the Task\r\n     *\r\n     * @param value - the value to store with the resolved Task.\r\n     **/\r\n    public readonly resolve: (value: ResultsT) => void;\r\n\r\n    /**\r\n     * Signal failrue for the Task\r\n     *\r\n     * @param value - the error to store with the rejected Task.\r\n     **/\r\n    public readonly reject: (reason: any) => void;\r\n\r\n\r\n    /**\r\n     * Create a new Task\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(private readonly autoStart = true) {\r\n        // It's very likely that we will want to use resolve/reject\r\n        // as values to pass to another function/method, so we create\r\n        // them not as methods, but as bound lambda expressions stored\r\n        // in public fields.\r\n        this.resolve = (value) => {\r\n            if (this.running) {\r\n                this._result = value;\r\n                this._resultState = \"resolved\";\r\n\r\n                for (const thenner of this.onThens) {\r\n                    thenner(value);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        this.reject = (reason) => {\r\n            if (this.running) {\r\n                this._error = reason;\r\n                this._resultState = \"errored\";\r\n\r\n                for (const catcher of this.onCatches) {\r\n                    catcher(reason);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private clear() {\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n    }\r\n\r\n    /**\r\n     * If the task was not auto-started, signal that the task is now ready to recieve\r\n     * resolutions or rejections.\r\n     **/\r\n    start() {\r\n        this._executionState = \"running\";\r\n    }\r\n\r\n    /**\r\n     * Creates a resolving callback for a static value.\r\n     * @param value\r\n     */\r\n    resolver(value: ResultsT) {\r\n        return () => this.resolve(value);\r\n    }\r\n\r\n    resolveOn<EventMapT extends TypedEventMap<string>, EventT extends keyof EventMapT = keyof EventMapT>(\r\n        target: TypedEventTarget<EventMapT> | EventTarget,\r\n        resolveEvt: EventT,\r\n        value: ResultsT) {\r\n        const resolver = this.resolver(value);\r\n        target.addEventListener(resolveEvt as any, resolver);\r\n        this.finally(() =>\r\n            target.removeEventListener(resolveEvt as any, resolver));\r\n    }\r\n\r\n    /**\r\n     * Get the last result that the task had resolved to, if any is available.\r\n     *\r\n     * If the Task had been rejected, attempting to get the result will rethrow\r\n     * the error that had rejected the task.\r\n     **/\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    /**\r\n     * Get the last error that the task had been rejected by, if any.\r\n     **/\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Get the current state of the task.\r\n     **/\r\n    get executionState() {\r\n        return this._executionState;\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is hasn't started yet.\r\n     **/\r\n    get waiting(): boolean {\r\n        return this.executionState === \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is waiting to be resolved or rejected.\r\n     **/\r\n    get started(): boolean {\r\n        return this.executionState !== \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true after the Task has started, but before it has finished.\r\n     **/\r\n    get running(): boolean {\r\n        return this.executionState === \"running\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task has been resolved or rejected.\r\n     **/\r\n    get finished(): boolean {\r\n        return this.executionState === \"finished\";\r\n    }\r\n\r\n    get resultState() {\r\n        return this._resultState;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been resolved successfully.\r\n     **/\r\n    get resolved(): boolean {\r\n        return this.resultState === \"resolved\";\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been rejected, regardless of any\r\n     * reason being given.\r\n     **/\r\n    get errored(): boolean {\r\n        return this.resultState === \"errored\";\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Calling Task.then(), Task.catch(), or Task.finally() creates a new Promise.\r\n     * This method creates that promise and links it with the task.\r\n     **/\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to the task that fires when the task is resolved.\r\n     * \r\n     * @param onfulfilled\r\n     * @param onrejected\r\n     */\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires when the Task is rejected.\r\n     * \r\n     * @param onrejected\r\n     */\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires regardless of whether the Task is resolved\r\n     * or rejected.\r\n     * \r\n     * @param onfinally\r\n     */\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    /**\r\n     * Resets the Task to an unsignalled state, which is useful for\r\n     * reducing GC pressure when working with lots of tasks.\r\n     **/\r\n    reset() {\r\n        this._reset(this.autoStart);\r\n    }\r\n\r\n    restart() {\r\n        this._reset(true);\r\n    }\r\n\r\n    private _reset(start: boolean) {\r\n        if (this.running) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        this.clear();\r\n        this._result = undefined;\r\n        this._error = undefined;\r\n        this._executionState = \"waiting\";\r\n        this._resultState = \"none\";\r\n\r\n        if (start) {\r\n            this.start();\r\n        }\r\n    }\r\n}", "import { alwaysFalse, alwaysTrue } from \"@juniper-lib/tslib/dist/identity\";\r\nimport { isNullOrUndefined, isNumber, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { CustomEventTarget, EventMap } from \"./EventTarget\";\r\nimport { Task } from \"./Task\";\r\nimport { TypedEventTarget, TypedEventMap } from \"./TypedEventTarget\";\r\n\r\nfunction targetValidateEvent(target: EventTarget, type: string) {\r\n    return (\"on\" + type) in target;\r\n}\r\n\r\n/**\r\n * Wait for a specific event, one time.\r\n * @param target - the event target.\r\n * @param resolveEvt - the name of the event that will resolve the Promise this method creates.\r\n * @param [rejectEvt] - the name of the event that could reject the Promise this method creates.\r\n * @param [timeout] - the number of milliseconds to wait for the resolveEvt, before rejecting.\r\n */\r\nexport function once<EventMapT extends TypedEventMap<string>, EventT extends keyof EventMapT = keyof EventMapT>(target: TypedEventTarget<EventMapT>, resolveEvt: EventT, timeout: number, ...rejectEvts: (keyof EventMapT & string)[]): Task<EventMapT[EventT]>;\r\nexport function once<EventMapT extends TypedEventMap<string>, EventT extends keyof EventMapT = keyof EventMapT>(target: TypedEventTarget<EventMapT>, resolveEvt: EventT, ...rejectEvts: (keyof EventMapT & string)[]): Task<EventMapT[EventT]>;\r\nexport function once<EventMapT extends EventMap, EventT extends keyof EventMapT = keyof EventMapT>(target: EventTarget, resolveEvt: EventT, rejectEvtOrTimeout?: number | string, ...rejectEvts: EventT[]): Task<Event>\r\nexport function once(target: EventTarget, resolveEvt: string, rejectEvtOrTimeout?: number | string, ...rejectEvts: string[]): Task<Event> {\r\n\r\n    if (isNullOrUndefined(rejectEvts)) {\r\n        rejectEvts = [];\r\n    }\r\n\r\n    let timeout: number = undefined;\r\n    if (isString(rejectEvtOrTimeout)) {\r\n        rejectEvts.unshift(rejectEvtOrTimeout);\r\n    }\r\n    else if (isNumber(rejectEvtOrTimeout)) {\r\n        timeout = rejectEvtOrTimeout;\r\n    }\r\n\r\n    if (!(target instanceof CustomEventTarget)) {\r\n        if (!targetValidateEvent(target, resolveEvt)) {\r\n            throw new Error(`Target does not have a ${resolveEvt} rejection event`);\r\n        }\r\n\r\n        for (const evt of rejectEvts) {\r\n            if (!targetValidateEvent(target, evt)) {\r\n                throw new Error(`Target does not have a ${evt} rejection event`);\r\n            }\r\n        }\r\n    }\r\n\r\n    const task = new Task<Event>();\r\n\r\n    if (isNumber(timeout)) {\r\n        const timeoutHandle = setTimeout(task.reject, timeout, `'${resolveEvt}' has timed out.`);\r\n        task.finally(clearTimeout.bind(globalThis, timeoutHandle));\r\n    }\r\n\r\n    const register = (evt: string, callback: (evt: Event) => void) => {\r\n        target.addEventListener(evt, callback);\r\n        task.finally(() => target.removeEventListener(evt, callback));\r\n    };\r\n\r\n    register(resolveEvt, (evt) => task.resolve(evt));\r\n\r\n    const onReject = (evt: Event) => task.reject(evt);\r\n    for (const rejectEvt of rejectEvts) {\r\n        register(rejectEvt, onReject);\r\n    }\r\n\r\n    return task;\r\n}\r\n\r\nexport function success<T>(task: Task<T>): Promise<boolean> {\r\n    return task.then(alwaysTrue)\r\n        .catch(alwaysFalse);\r\n}", "import { isDefined, isFunction, isObject } from \"./typeChecks\";\r\n\r\nexport interface IDisposable {\r\n    dispose(): void;\r\n}\r\n\r\nexport interface IClosable {\r\n    close(): void;\r\n}\r\n\r\nexport interface ICloneable {\r\n    clone(): unknown;\r\n}\r\n\r\nexport interface IDestroyable {\r\n    destroy(): void;\r\n}\r\n\r\nfunction interfaceSigCheck<T>(obj: any, ...funcNames: string[]): obj is T {\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n\r\n    obj = obj as any;\r\n\r\n    for (const funcName of funcNames) {\r\n        if (!(funcName in obj)) {\r\n            return false;\r\n        }\r\n\r\n        const func = obj[funcName];\r\n        if (!isFunction(func)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function isDisposable(obj: any): obj is IDisposable {\r\n    return interfaceSigCheck(obj, \"dispose\");\r\n}\r\n\r\nexport function isDestroyable(obj: any): obj is IDestroyable {\r\n    return interfaceSigCheck(obj, \"destroy\");\r\n}\r\n\r\nexport function isClosable(obj: any): obj is IClosable {\r\n    return interfaceSigCheck(obj, \"close\");\r\n}\r\n\r\nexport function isCloneable(obj: any): obj is ICloneable {\r\n    return interfaceSigCheck(obj, \"clone\");\r\n}\r\n\r\nexport function dispose(val: any): void {\r\n    if (isDisposable(val)) {\r\n        val.dispose();\r\n    }\r\n\r\n    if (isClosable(val)) {\r\n        val.close();\r\n    }\r\n\r\n    if (isDestroyable(val)) {\r\n        val.destroy();\r\n    }\r\n}\r\n\r\ntype Cleanupable = IDisposable | IClosable | IDestroyable;\r\n\r\nexport function using<T extends Cleanupable, U>(val: T, thunk: (val: T) => U): U {\r\n    try {\r\n        return thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\nexport function usingArray<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => U): U {\r\n    try {\r\n        return thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport async function usingAsync<T extends Cleanupable, U>(val: T, thunk: (val: T) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(val);\r\n    } finally {\r\n        dispose(val);\r\n    }\r\n}\r\n\r\n\r\nexport async function usingArrayAsync<T extends Cleanupable, U>(vals: T[], thunk: (val: T[]) => Promise<U>): Promise<U> {\r\n    try {\r\n        return await thunk(vals);\r\n    } finally {\r\n        if (isDefined(vals)) {\r\n            for (const val of vals) {\r\n                dispose(val);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass TrashHeap implements IDisposable {\r\n    constructor(private readonly objs: IDisposable[]) {\r\n    }\r\n\r\n    dispose() {\r\n        for (const obj of this.objs) {\r\n            dispose(obj);\r\n        }\r\n    }\r\n\r\n    add(obj: IDisposable) {\r\n        this.objs.push(obj);\r\n    }\r\n}\r\n\r\nexport function trashHeap(...objs: IDisposable[]): TrashHeap {\r\n    return new TrashHeap(objs);\r\n}", "import { arrayCompare } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { makeLookup } from \"@juniper-lib/collections/dist/makeLookup\";\r\nimport { PriorityList } from \"@juniper-lib/collections/dist/PriorityList\";\r\nimport { PriorityMap } from \"@juniper-lib/collections/dist/PriorityMap\";\r\nimport { once, success } from \"@juniper-lib/events/dist/once\";\r\nimport { Task } from \"@juniper-lib/events/dist/Task\";\r\nimport { isArray, isDefined, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { dispose, IDisposable } from \"@juniper-lib/tslib/dist/using\";\r\n\r\nexport interface IDexDBIndexDef<T = any> {\r\n    name: string;\r\n    keyPath: (keyof T & string) | (keyof T & string)[];\r\n    options?: IDBIndexParameters;\r\n}\r\n\r\nexport interface IDexDBOptionsDef<T = any> {\r\n    autoIncrement?: boolean;\r\n    keyPath?: (keyof T & string) | (keyof T & string)[];\r\n}\r\n\r\ninterface StoreDef {\r\n    name: string;\r\n    options?: IDexDBOptionsDef;\r\n    indexes?: IDexDBIndexDef[];\r\n}\r\n\r\nexport class IDexDB implements IDisposable {\r\n\r\n    static delete(dbName: string) {\r\n        const deleteRequest = indexedDB.deleteDatabase(dbName);\r\n        const task = once(deleteRequest, \"success\", \"error\", \"blocked\");\r\n        return success(task);\r\n    }\r\n\r\n    static async open(name: string, ...storeDefs: StoreDef[]): Promise<IDexDB> {\r\n        const storesByName = makeLookup(storeDefs, (v) => v.name);\r\n        const indexesByName = new PriorityMap<string, string, IDexDBIndexDef>(\r\n            storeDefs\r\n                .filter((storeDef) => isDefined(storeDef.indexes))\r\n                .flatMap<[string, string, IDexDBIndexDef]>((storeDef) =>\r\n                    storeDef.indexes.map<[string, string, IDexDBIndexDef]>((indexDef) =>\r\n                        [storeDef.name, indexDef.name, indexDef])));\r\n\r\n        const storesToAdd = new Array<string>();\r\n        const storesToRemove = new Array<string>();\r\n        const storesToChange = new Array<string>();\r\n        const indexesToAdd = new PriorityList<string, string>();\r\n        const indexesToRemove = new PriorityList<string, string>();\r\n\r\n        let version: number = null;\r\n\r\n        const D = indexedDB.open(name);\r\n        if (await success(once(D, \"success\", \"error\", \"blocked\"))) {\r\n            const db = D.result;\r\n            version = db.version;\r\n            const storesToScrutinize = new Array<string>();\r\n\r\n            for (const storeName of db.objectStoreNames) {\r\n                if (!storesByName.has(storeName)) {\r\n                    storesToRemove.push(storeName);\r\n                }\r\n            }\r\n\r\n            for (const storeName of storesByName.keys()) {\r\n                if (!db.objectStoreNames.contains(storeName)) {\r\n                    storesToAdd.push(storeName);\r\n                }\r\n                else {\r\n                    storesToScrutinize.push(storeName);\r\n                }\r\n            }\r\n            if (storesToScrutinize.length > 0) {\r\n                const transaction = db.transaction(storesToScrutinize);\r\n                const transacting = once(transaction, \"complete\", \"error\", \"abort\");\r\n                const transacted = success(transacting);\r\n\r\n                for (const storeName of storesToScrutinize) {\r\n                    const store = transaction.objectStore(storeName);\r\n                    const storeDef = storesByName.get(storeName);\r\n                    if (isDefined(storeDef.options) && store.keyPath !== storeDef.options.keyPath) {\r\n                        storesToRemove.push(storeName);\r\n                        storesToAdd.push(storeName);\r\n                    }\r\n\r\n                    for (const indexName of store.indexNames) {\r\n                        if (!indexesByName.has(storeName, indexName)) {\r\n                            if (storesToChange.indexOf(storeName) === -1) {\r\n                                storesToChange.push(storeName);\r\n                            }\r\n                            indexesToRemove.add(storeName, indexName);\r\n                        }\r\n                    }\r\n\r\n                    if (indexesByName.has(storeName)) {\r\n                        for (const indexName of indexesByName.get(storeName).keys()) {\r\n                            if (!store.indexNames.contains(indexName)) {\r\n                                if (storesToChange.indexOf(storeName) === -1) {\r\n                                    storesToChange.push(storeName);\r\n                                }\r\n                                indexesToAdd.add(storeName, indexName);\r\n                            }\r\n                            else {\r\n                                const indexDef = indexesByName.get(storeName, indexName);\r\n                                const index = store.index(indexName);\r\n                                if (isString(indexDef.keyPath) !== isString(index.keyPath)\r\n                                    || isString(indexDef.keyPath) && isString(index.keyPath) && indexDef.keyPath !== index.keyPath\r\n                                    || isArray(indexDef.keyPath) && isArray(index.keyPath) && arrayCompare(indexDef.keyPath, index.keyPath)) {\r\n                                    if (storesToChange.indexOf(storeName) === -1) {\r\n                                        storesToChange.push(storeName);\r\n                                    }\r\n                                    indexesToRemove.add(storeName, indexName);\r\n                                    indexesToAdd.add(storeName, indexName);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                transaction.commit();\r\n                await transacted;\r\n            }\r\n\r\n            dispose(db);\r\n        }\r\n        else {\r\n            version = 0;\r\n            storesToAdd.push(...storesByName.keys());\r\n            for (const storeDef of storeDefs) {\r\n                if (isDefined(storeDef.indexes)) {\r\n                    for (const indexDef of storeDef.indexes) {\r\n                        indexesToAdd.add(storeDef.name, indexDef.name);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (storesToAdd.length > 0\r\n            || storesToRemove.length > 0\r\n            || indexesToAdd.size > 0\r\n            || indexesToRemove.size > 0) {\r\n            ++version;\r\n        }\r\n\r\n        const upgrading = new Task<boolean>();\r\n        const openRequest = isDefined(version)\r\n            ? indexedDB.open(name, version)\r\n            : indexedDB.open(name);\r\n        const opening = once(openRequest, \"success\", \"error\", \"blocked\");\r\n        const upgraded = success(upgrading);\r\n        const opened = success(opening);\r\n\r\n        const noUpgrade = upgrading.resolver(false);\r\n        openRequest.addEventListener(\"success\", noUpgrade);\r\n\r\n        openRequest.addEventListener(\"upgradeneeded\", () => {\r\n            const transacting = once(openRequest.transaction, \"complete\", \"error\", \"abort\");\r\n            const db = openRequest.result;\r\n            for (const storeName of storesToRemove) {\r\n                db.deleteObjectStore(storeName);\r\n            }\r\n\r\n            const stores = new Map<string, IDBObjectStore>();\r\n\r\n            for (const storeName of storesToAdd) {\r\n                const storeDef = storesByName.get(storeName);\r\n                const store = db.createObjectStore(storeName, storeDef.options);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const storeName of storesToChange) {\r\n                const store = openRequest.transaction.objectStore(storeName);\r\n                stores.set(storeName, store);\r\n            }\r\n\r\n            for (const [storeName, store] of stores) {\r\n                for (const indexName of indexesToRemove.get(storeName)) {\r\n                    store.deleteIndex(indexName);\r\n                }\r\n\r\n                for (const indexName of indexesToAdd.get(storeName)) {\r\n                    const indexDef = indexesByName.get(storeName, indexName);\r\n                    store.createIndex(indexName, indexDef.keyPath, indexDef.options);\r\n                }\r\n            }\r\n\r\n            success(transacting)\r\n                .then(upgrading.resolve)\r\n                .catch(upgrading.reject)\r\n                .finally(() => openRequest.removeEventListener(\"success\", noUpgrade));\r\n        });\r\n\r\n        if (!(await upgraded)) {\r\n            throw upgrading.error;\r\n        }\r\n\r\n        if (!(await opened)) {\r\n            throw opening.error;\r\n        }\r\n\r\n        return new IDexDB(openRequest.result);\r\n    }\r\n\r\n    constructor(private readonly db: IDBDatabase) {\r\n\r\n    }\r\n\r\n    dispose() {\r\n        dispose(this.db);\r\n    }\r\n\r\n    get name() {\r\n        return this.db.name;\r\n    }\r\n\r\n    get version() {\r\n        return this.db.version;\r\n    }\r\n\r\n    get storeNames() {\r\n        return Array.from(this.db.objectStoreNames);\r\n    }\r\n\r\n    getStore<T>(storeName: string): IDexStore<T> {\r\n        return new IDexStore<T>(this.db, storeName);\r\n    }\r\n}\r\n\r\nexport class IDexStore<T> {\r\n    constructor(private readonly db: IDBDatabase, private readonly storeName: string) {\r\n\r\n    }\r\n\r\n    private async request<T>(makeRequest: (store: IDBObjectStore) => IDBRequest<T>, mode: IDBTransactionMode): Promise<T> {\r\n        const transaction = this.db.transaction(this.storeName, mode);\r\n        const transacting = once(transaction, \"complete\", \"error\");\r\n\r\n        const store = transaction.objectStore(this.storeName);\r\n        const request = makeRequest(store);\r\n        const requesting = once(request, \"success\", \"error\");\r\n\r\n        if (!(await success(requesting))) {\r\n            transaction.abort();\r\n            throw requesting.error;\r\n        }\r\n\r\n        transaction.commit();\r\n        if (!(await success(transacting))) {\r\n            throw transacting.error;\r\n        }\r\n\r\n        return request.result;\r\n    }\r\n\r\n    add<T>(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.add(value, key), \"readwrite\");\r\n    }\r\n\r\n    clear() {\r\n        return this.request((store) => store.clear(), \"readwrite\");\r\n    }\r\n\r\n    getCount(query?: IDBValidKey | IDBKeyRange): Promise<number> {\r\n        return this.request((store) => store.count(query), \"readonly\");\r\n    }\r\n\r\n    async has(query: IDBValidKey): Promise<boolean> {\r\n        return (await this.getCount(query)) > 0;\r\n    }\r\n\r\n    delete(query: IDBValidKey | IDBKeyRange) {\r\n        return this.request((store) => store.delete(query), \"readwrite\");\r\n    }\r\n\r\n    get(key: IDBValidKey): Promise<T> {\r\n        return this.request((store) => store.get<T>(key), \"readonly\");\r\n    }\r\n\r\n    getAll(): Promise<T[]> {\r\n        return this.request((store) => store.getAll<T>(), \"readonly\");\r\n    }\r\n\r\n    getAllKeys(): Promise<IDBValidKey[]> {\r\n        return this.request((store) => store.getAllKeys(), \"readonly\");\r\n    }\r\n\r\n    getKey(query: IDBValidKey | IDBKeyRange): Promise<IDBValidKey | undefined> {\r\n        return this.request((store) => store.getKey(query), \"readonly\");\r\n    }\r\n\r\n    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursorWithValue | null> {\r\n        return this.request((store) => store.openCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): Promise<IDBCursor | null> {\r\n        return this.request((store) => store.openKeyCursor(query, direction), \"readonly\");\r\n    }\r\n\r\n    put(value: T, key?: IDBValidKey): Promise<IDBValidKey> {\r\n        return this.request((store) => store.put(value, key), \"readwrite\");\r\n    }\r\n}", "import { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nexport function mapJoin<KeyT, ValueT>(dest: Map<KeyT, ValueT>, ...sources: Map<KeyT, ValueT>[]): Map<KeyT, ValueT> {\r\n    for (const source of sources) {\r\n        if (isDefined(source)) {\r\n            for (const [key, value] of source) {\r\n                dest.set(key, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    return dest;\r\n}\r\n", "import { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { Task } from \"./Task\";\r\n\r\nexport class SleepTask extends Task {\r\n\r\n    private _timer: number = null;\r\n\r\n    constructor(private readonly milliseconds: number) {\r\n        super(false);\r\n    }\r\n\r\n    override start(): void {\r\n        super.start();\r\n        this._timer = setTimeout(() => {\r\n            this._timer = null;\r\n            this.resolve();\r\n        }, this.milliseconds) as unknown as number;\r\n    }\r\n\r\n    override reset(): void {\r\n        super.reset();\r\n        if (isDefined(this._timer)) {\r\n            clearTimeout(this._timer);\r\n            this._timer = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport function sleep(milliseconds: number): SleepTask {\r\n    const task = new SleepTask(milliseconds);\r\n    task.start();\r\n    return task;\r\n}\r\n", "import { sleep } from \"./sleep\";\r\n\r\n/**\r\n * Performs an awaitable action, and if it fails, retries it up to `retryCount` times.\r\n *\r\n * If the action failed, the retry system will sleep for a geometrically growing amount of\r\n * time before retrying. This is to let potentially swamped resources have time to hopefully\r\n * recover before we hammer them again.\r\n *\r\n * The first wait time is 0.5s. Each subsequent wait time is twice the previous wait time.\r\n * \r\n * @param retryCount the number of times to re-attempt the action, after the first failed attempt.\r\n * @param action the action to perform.\r\n * @returns A promise that resolves to the same value as the action.\r\n **/\r\nexport function withRetry<T>(retryCount: number, action: () => Promise<T>): () => Promise<T> {\r\n    return async () => {\r\n        let lastError: Error = null;\r\n        let retryTime = 500;\r\n        for (let retry = 0; retry <= retryCount; ++retry) {\r\n            try {\r\n                if (retry > 0) {\r\n                    await sleep(retryTime);\r\n                    retryTime *= 2;\r\n                }\r\n                return await action();\r\n            }\r\n            catch (error) {\r\n                lastError = error;\r\n            }\r\n        }\r\n\r\n        throw lastError;\r\n    };\r\n}\r\n", "import { CustomEventTarget, EventMap, IEventTarget } from \"./EventTarget\";\r\n\r\nexport class TypedEvent<EventTypeT extends string> extends Event {\r\n    override get type(): EventTypeT {\r\n        return super.type as EventTypeT;\r\n    }\r\n\r\n    constructor(type: EventTypeT, eventInitDict?: EventInit) {\r\n        super(type, eventInitDict);\r\n    }\r\n}\r\n\r\nexport type TypedEventMap<EventTypeT extends string> =\r\n    EventMap\r\n    | Record<EventTypeT, TypedEvent<EventTypeT>>;\r\n\r\ntype TypedEventHandler<EventT> =\r\n    (evt: EventT) => void;\r\n\r\nexport type TypedEventListener<EventMapT, EventTypeT extends keyof EventMapT> =\r\n    TypedEventHandler<EventMapT[EventTypeT]>;\r\n\r\nexport interface TypedEventListenerObject<EventMapT, EventTypeT extends keyof EventMapT> {\r\n    handleEvent: TypedEventListener<EventMapT, EventTypeT>;\r\n}\r\n\r\nexport type TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT extends keyof EventMapT> =\r\n    TypedEventListener<EventMapT, EventTypeT>\r\n    | TypedEventListenerObject<EventMapT, EventTypeT>;\r\n\r\nexport interface ITypedEventTarget<EventMapT extends TypedEventMap<string> = TypedEventMap<string>> extends IEventTarget {\r\n    clearEventListeners<EventTypeT extends keyof EventMapT>(type?: EventTypeT): void;\r\n    addBubbler(bubbler: ITypedEventTarget<EventMapT>): void;\r\n    removeBubbler(bubbler: ITypedEventTarget<EventMapT>): void;\r\n    addScopedEventListener<EventTypeT extends keyof EventMapT>(scope: object, type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>, options?: boolean | AddEventListenerOptions): void;\r\n    addEventListener<EventTypeT extends keyof EventMapT>(type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>, options?: boolean | AddEventListenerOptions): void;\r\n    removeEventListener<EventTypeT extends keyof EventMapT>(type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>): void;\r\n}\r\n\r\nexport class TypedEventTarget<EventMapT extends TypedEventMap<string> = TypedEventMap<string>> extends CustomEventTarget implements ITypedEventTarget<EventMapT> {\r\n    override addBubbler(bubbler: ITypedEventTarget<EventMapT>) {\r\n        super.addBubbler(bubbler);\r\n    }\r\n\r\n    override removeBubbler(bubbler: ITypedEventTarget<EventMapT>) {\r\n        super.removeBubbler(bubbler);\r\n    }\r\n\r\n    override addScopedEventListener<EventTypeT extends keyof EventMapT>(scope: object, type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>, options?: boolean | AddEventListenerOptions): void {\r\n        super.addScopedEventListener(scope, type as string, callback as EventListenerOrEventListenerObject, options);\r\n    }\r\n\r\n    override addEventListener<EventTypeT extends keyof EventMapT>(type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type as string, callback as EventListenerOrEventListenerObject, options);\r\n    }\r\n\r\n    override removeEventListener<EventTypeT extends keyof EventMapT>(type: EventTypeT, callback: TypedEventListenerOrEventListenerObject<EventMapT, EventTypeT>): void {\r\n        super.removeEventListener(type as string, callback as EventListenerOrEventListenerObject);\r\n    }\r\n\r\n    override clearEventListeners<EventTypeT extends keyof EventMapT>(type?: EventTypeT): void {\r\n        return super.clearEventListeners(type as string);\r\n    }\r\n}\r\n", "import { arrayClear } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { TypedEventTarget, TypedEventMap } from \"@juniper-lib/events/dist/TypedEventTarget\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseProgress<T extends TypedEventMap<string> = TypedEventMap<string>>\r\n    extends TypedEventTarget<T>\r\n    implements IProgress {\r\n    private readonly attached = new Array<IProgress>();\r\n    private soFar: number = null;\r\n    private total: number = null;\r\n    private msg: string = null;\r\n    private est: number = null;\r\n\r\n    protected get p() {\r\n        return this.total > 0\r\n            ? this.soFar / this.total\r\n            : 0;\r\n    }\r\n\r\n    report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n\r\n    attach(prog: IProgress): void {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n\r\n    clear() {\r\n        this.report(0, 0);\r\n        this._clear();\r\n    }\r\n\r\n    start(msg?: string) {\r\n        this.report(0, 1, msg || \"starting\");\r\n    }\r\n\r\n    end(msg?: string) {\r\n        this.report(1, 1, msg || \"done\");\r\n        this._clear();\r\n    }\r\n\r\n    private _clear() {\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}", "import type { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { BaseProgress } from \"./BaseProgress\";\r\n\r\nexport class ChildProgressCallback extends BaseProgress {\r\n    constructor(private readonly i: number, private readonly prog: BaseParentProgressCallback) {\r\n        super();\r\n    }\r\n\r\n    override report(soFar: number, total: number, msg?: string, est?: number) {\r\n        super.report(soFar, total, msg, est);\r\n        this.prog.update(this.i, soFar, total, msg);\r\n    }\r\n}\r\n", "import { ChildProgressCallback } from \"./ChildProgressCallback\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseParentProgressCallback {\r\n    private weightTotal = 0;\r\n    private readonly start: number;\r\n\r\n    readonly subProgressCallbacks = new Array<IProgress>();\r\n    private readonly subProgressWeights = new Array<number>();\r\n    private readonly subProgressValues = new Array<number>();\r\n\r\n    constructor(private readonly prog: IProgress) {\r\n        this.start = performance.now();\r\n\r\n        for (let i = 0; i < this.subProgressWeights.length; ++i) {\r\n            this.subProgressValues[i] = 0;\r\n            this.subProgressCallbacks[i] = new ChildProgressCallback(i, this);\r\n        }\r\n    }\r\n\r\n    protected addSubProgress(weight?: number): IProgress {\r\n        weight = weight || 1;\r\n        this.weightTotal += weight;\r\n        this.subProgressWeights.push(weight);\r\n        this.subProgressValues.push(0);\r\n        const child = new ChildProgressCallback(this.subProgressCallbacks.length, this);\r\n        this.subProgressCallbacks.push(child);\r\n        return child;\r\n    }\r\n\r\n\r\n    update(i: number, subSoFar: number, subTotal: number, msg?: string) {\r\n        if (this.prog) {\r\n            this.subProgressValues[i] = subSoFar / subTotal;\r\n            let soFar = 0;\r\n            for (let j = 0; j < this.subProgressWeights.length; ++j) {\r\n                soFar += this.subProgressValues[j] * this.subProgressWeights[j];\r\n            }\r\n\r\n            const end = performance.now();\r\n            const delta = end - this.start;\r\n            const est = this.start - end + delta * this.weightTotal / soFar;\r\n            this.prog.report(soFar, this.weightTotal, msg, est);\r\n        }\r\n    }\r\n}\r\n", "import { BaseParentProgressCallback } from \"./BaseParentProgressCallback\";\r\nimport { IProgress } from \"./IProgress\";\r\n\r\nexport function progressSplitWeighted(prog: IProgress, subProgressWeights: number[]) {\r\n    const subProg = new WeightedParentProgressCallback(subProgressWeights, prog);\r\n    return subProg.subProgressCallbacks;\r\n}\r\n\r\n\r\nexport function progressSplit(prog: IProgress, taskCount: number) {\r\n    const subProgressWeights = new Array<number>(taskCount);\r\n    for (let i = 0; i < taskCount; ++i) {\r\n        subProgressWeights[i] = 1;\r\n    }\r\n\r\n    return progressSplitWeighted(prog, subProgressWeights);\r\n}\r\n\r\nclass WeightedParentProgressCallback extends BaseParentProgressCallback {\r\n\r\n    constructor(subProgressWeights: number[], prog: IProgress) {\r\n        super(prog);\r\n\r\n        for (const weight of subProgressWeights) {\r\n            this.addSubProgress(weight);\r\n        }\r\n    }\r\n}\r\n", "import { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { IResponse } from \"./IResponse\";\r\n\r\nexport async function translateResponse<T>(response: IResponse<T>): Promise<IResponse>;\r\nexport async function translateResponse<T, U>(response: IResponse<T>, translate: (v: T) => U | Promise<U>): Promise<IResponse<U>>;\r\nexport async function translateResponse<T, U>(response: IResponse<T>, translate?: (v: T) => U | Promise<U>): Promise<IResponse<U>> {\r\n    const {\r\n        status,\r\n        requestPath,\r\n        responsePath,\r\n        content,\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    } = response;\r\n\r\n    return {\r\n        status,\r\n        requestPath,\r\n        responsePath,\r\n        content: isDefined(translate)\r\n            ? await translate(content)\r\n            : undefined,\r\n        contentType,\r\n        contentLength,\r\n        fileName,\r\n        headers,\r\n        date\r\n    };\r\n}", "import { isDefined, isNullOrUndefined, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nexport const typePattern = /([^\\/]+)\\/(.+)/;\r\nconst subTypePattern = /(?:([^\\.]+)\\.)?([^\\+;]+)(?:\\+([^;]+))?((?:; *([^=]+)=([^;]+))*)/;\r\n\r\nexport function mediaTypesToAcceptValue(types: MediaType[]): string {\r\n    return types\r\n        .flatMap(type =>\r\n            type.extensions.map(ext =>\r\n                \".\" + ext))\r\n        .sort()\r\n        .join(\", \");\r\n}\r\n\r\nexport class MediaType {\r\n    private readonly _tree: string;\r\n    private readonly _subType: string;\r\n    private readonly _suffix: string;\r\n    private readonly _parameters: ReadonlyMap<string, string>;\r\n\r\n    private readonly _value: string;\r\n    private readonly _fullValue: string;\r\n\r\n    private readonly _extensions: ReadonlyArray<string>;\r\n    private readonly _primaryExtension: string = null;\r\n\r\n    private depMessage: string = null;\r\n\r\n\r\n    constructor(\r\n        private readonly _type: string,\r\n        private readonly _fullSubType: string,\r\n        extensions?: ReadonlyArray<string>) {\r\n\r\n        const parameters = new Map<string, string>();\r\n        this._parameters = parameters;\r\n\r\n        const subTypeParts = this._fullSubType.match(subTypePattern);\r\n        this._tree = subTypeParts[1];\r\n        this._subType = subTypeParts[2];\r\n        this._suffix = subTypeParts[3];\r\n        const paramStr = subTypeParts[4];\r\n\r\n        this._value = this._fullValue = this._type + \"/\";\r\n\r\n        if (isDefined(this._tree)) {\r\n            this._value = this._fullValue += this._tree + \".\";\r\n        }\r\n\r\n        this._value = this._fullValue += this._subType;\r\n\r\n        if (isDefined(this._suffix)) {\r\n            this._value = this._fullValue += \"+\" + this._suffix;\r\n        }\r\n\r\n        if (isDefined(paramStr)) {\r\n            const pairs = paramStr.split(\";\")\r\n                .map((p) => p.trim())\r\n                .filter((p) => p.length > 0)\r\n                .map((p) => p.split(\"=\"));\r\n            for (const [key, ...values] of pairs) {\r\n                const value = values.join(\"=\");\r\n                parameters.set(key, value);\r\n                const slug = `; ${key}=${value}`;\r\n                this._fullValue += slug;\r\n                if (key !== \"q\") {\r\n                    this._value += slug;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._extensions = extensions || [];\r\n        this._primaryExtension = this._extensions[0] || null;\r\n    }\r\n\r\n    static parse(value: string): MediaType {\r\n        if (!value) {\r\n            return null;\r\n        }\r\n\r\n        const match = value.match(typePattern);\r\n        if (!match) {\r\n            return null;\r\n        }\r\n\r\n        const type = match[1];\r\n        const subType = match[2];\r\n        return new MediaType(type, subType);\r\n    }\r\n\r\n    deprecate(message: string): this {\r\n        this.depMessage = message;\r\n        return this;\r\n    }\r\n\r\n    private check() {\r\n        if (isDefined(this.depMessage)) {\r\n            console.warn(`${this._value} is deprecated ${this.depMessage}`);\r\n        }\r\n    }\r\n\r\n    matches(value: MediaType | string): boolean {\r\n        if (isNullOrUndefined(value)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.typeName === \"*\" && this.subTypeName === \"*\") {\r\n            return true;\r\n        }\r\n\r\n        let typeName: string = null;\r\n        let subTypeName: string = null;\r\n        if (isString(value)) {\r\n            const match = value.match(typePattern);\r\n            if (!match) {\r\n                return false;\r\n            }\r\n\r\n            typeName = match[1];\r\n            subTypeName = match[2];\r\n        }\r\n        else {\r\n            typeName = value.typeName;\r\n            subTypeName = value._fullSubType;\r\n        }\r\n\r\n        return this.typeName === typeName\r\n            && (this._fullSubType === \"*\" || this._fullSubType === subTypeName);\r\n    }\r\n\r\n    withParameter(key: string, value: string): MediaType {\r\n        const newSubType = `${this._fullSubType}; ${key}=${value}`;\r\n        return new MediaType(this.typeName, newSubType, this.extensions);\r\n    }\r\n\r\n    get typeName(): string {\r\n        this.check();\r\n        return this._type;\r\n    }\r\n\r\n    get tree(): string {\r\n        this.check();\r\n        return this._tree;\r\n    }\r\n\r\n    get suffix(): string {\r\n        return this._suffix;\r\n    }\r\n\r\n    get subTypeName(): string {\r\n        this.check();\r\n        return this._subType;\r\n    }\r\n\r\n    get value(): string {\r\n        this.check();\r\n        return this._value;\r\n    }\r\n\r\n    __getValueUnsafe() {\r\n        return this._value;\r\n    }\r\n\r\n    get fullValue(): string {\r\n        this.check();\r\n        return this._fullValue;\r\n    }\r\n\r\n    get parameters(): ReadonlyMap<string, string> {\r\n        this.check();\r\n        return this._parameters;\r\n    }\r\n\r\n    get extensions(): ReadonlyArray<string> {\r\n        this.check();\r\n        return this._extensions;\r\n    }\r\n\r\n    __getExtensionsUnsafe() {\r\n        return this._extensions;\r\n    }\r\n\r\n    get primaryExtension(): string {\r\n        this.check();\r\n        return this._primaryExtension;\r\n    }\r\n\r\n    toString() {\r\n        if (this.parameters.get(\"q\") === \"1\") {\r\n            return this.value;\r\n        }\r\n        else {\r\n            return this.fullValue;\r\n        }\r\n    }\r\n\r\n    toFileSystemAPIAccepts(): Record<string, string | string[]> {\r\n        return {\r\n            [this.value]: this.extensions.map(v => \".\" + v)\r\n        };\r\n    }\r\n\r\n    addExtension(fileName: string): string {\r\n        if (!fileName) {\r\n            throw new Error(\"File name is not defined\");\r\n        }\r\n\r\n        if (this.primaryExtension) {\r\n            fileName = MediaType.removeExtension(fileName);\r\n            fileName = `${fileName}.${this.primaryExtension}`;\r\n        }\r\n\r\n        return fileName;\r\n    }\r\n\r\n    static removeExtension(fileName: string) {\r\n        const idx = fileName.lastIndexOf(\".\");\r\n        if (idx > -1) {\r\n            fileName = fileName.substring(0, idx);\r\n        }\r\n        return fileName;\r\n    }\r\n}\r\n\r\nexport function create(group: string, value: string, ...extensions: string[]): MediaType {\r\n    return new MediaType(group, value, extensions);\r\n}\r\n\r\nexport function specialize(group: string) {\r\n    return create.bind(null, group);\r\n}", "import { specialize } from \"./util\";\r\n\r\nconst text = /*@__PURE__*/ specialize(\"text\");\r\n\r\nexport const Text_Cache_Manifest = /*@__PURE__*/ text(\"cache-manifest\", \"appcache\");\r\nexport const Text_Calendar = /*@__PURE__*/ text(\"calendar\", \"ics\", \"ifb\");\r\nexport const Text_Calender = /*@__PURE__*/ text(\"calender\");\r\nexport const Text_Cmd = /*@__PURE__*/ text(\"cmd\");\r\nexport const Text_Coffeescript = /*@__PURE__*/ text(\"coffeescript\", \"coffee\", \"litcoffee\");\r\nexport const Text_Css = /*@__PURE__*/ text(\"css\", \"css\");\r\nexport const Text_Csv = /*@__PURE__*/ text(\"csv\", \"csv\");\r\nexport const Text_Csv_Schema = /*@__PURE__*/ text(\"csv-schema\");\r\nexport const Text_Directory = /*@__PURE__*/ text(\"directory\").deprecate(\"by RFC6350\");\r\nexport const Text_Dns = /*@__PURE__*/ text(\"dns\");\r\nexport const Text_Ecmascript = /*@__PURE__*/ text(\"ecmascript\").deprecate(\"in favor of application/ecmascript\");\r\nexport const Text_Encaprtp = /*@__PURE__*/ text(\"encaprtp\");\r\nexport const Text_Enriched = /*@__PURE__*/ text(\"enriched\");\r\nexport const Text_Event_Stream = /*@__PURE__*/ text(\"event-stream\");\r\nexport const Text_Example = /*@__PURE__*/ text(\"example\");\r\nexport const Text_Flexfec = /*@__PURE__*/ text(\"flexfec\");\r\nexport const Text_Fwdred = /*@__PURE__*/ text(\"fwdred\");\r\nexport const Text_Grammar_Ref_List = /*@__PURE__*/ text(\"grammar-ref-list\");\r\nexport const Text_Html = /*@__PURE__*/ text(\"html\", \"html\", \"htm\");\r\nexport const Text_Jade = /*@__PURE__*/ text(\"jade\", \"jade\");\r\nexport const Text_Javascript = /*@__PURE__*/ text(\"javascript\").deprecate(\"in favor of application/javascript\");\r\nexport const Text_Jcr_Cnd = /*@__PURE__*/ text(\"jcr-cnd\");\r\nexport const Text_Jsx = /*@__PURE__*/ text(\"jsx\", \"jsx\");\r\nexport const Text_Less = /*@__PURE__*/ text(\"less\", \"less\");\r\nexport const Text_Markdown = /*@__PURE__*/ text(\"markdown\");\r\nexport const Text_Mdx = /*@__PURE__*/ text(\"mdx\", \"mdx\");\r\nexport const Text_Mizar = /*@__PURE__*/ text(\"mizar\");\r\nexport const Text_N3 = /*@__PURE__*/ text(\"n3\", \"n3\");\r\nexport const Text_Parameters = /*@__PURE__*/ text(\"parameters\");\r\nexport const Text_Parityfec = /*@__PURE__*/ text(\"parityfec\");\r\nexport const Text_Plain = /*@__PURE__*/ text(\"plain\", \"txt\", \"text\", \"conf\", \"def\", \"list\", \"log\", \"in\");\r\nexport const Text_PlainUTF8 = /*@__PURE__*/ text(\"plain; charset=UTF-8\", \"txt\", \"text\", \"conf\", \"def\", \"list\", \"log\", \"in\");\r\nexport const Text_Provenance_Notation = /*@__PURE__*/ text(\"provenance-notation\");\r\nexport const Text_PrsFallensteinRst = /*@__PURE__*/ text(\"prs.fallenstein.rst\");\r\nexport const Text_PrsLinesTag = /*@__PURE__*/ text(\"prs.lines.tag\", \"dsc\");\r\nexport const Text_PrsPropLogic = /*@__PURE__*/ text(\"prs.prop.logic\");\r\nexport const Text_Raptorfec = /*@__PURE__*/ text(\"raptorfec\");\r\nexport const Text_RED = /*@__PURE__*/ text(\"red\");\r\nexport const Text_Rfc822_Headers = /*@__PURE__*/ text(\"rfc822-headers\");\r\nexport const Text_Richtext = /*@__PURE__*/ text(\"richtext\", \"rtx\");\r\nexport const Text_Rtf = /*@__PURE__*/ text(\"rtf\");\r\nexport const Text_Rtp_Enc_Aescm128 = /*@__PURE__*/ text(\"rtp-enc-aescm128\");\r\nexport const Text_Rtploopback = /*@__PURE__*/ text(\"rtploopback\");\r\nexport const Text_Rtx = /*@__PURE__*/ text(\"rtx\");\r\nexport const Text_Sgml = /*@__PURE__*/ text(\"sgml\", \"sgml\", \"sgm\");\r\nexport const Text_Shex = /*@__PURE__*/ text(\"shex\", \"shex\");\r\nexport const Text_Slim = /*@__PURE__*/ text(\"slim\", \"slim\", \"slm\");\r\nexport const Text_Strings = /*@__PURE__*/ text(\"strings\");\r\nexport const Text_Stylus = /*@__PURE__*/ text(\"stylus\", \"stylus\", \"styl\");\r\nexport const Text_T140 = /*@__PURE__*/ text(\"t140\");\r\nexport const Text_Tab_Separated_Values = /*@__PURE__*/ text(\"tab-separated-values\", \"tsv\");\r\nexport const Text_Troff = /*@__PURE__*/ text(\"troff\", \"t\", \"tr\", \"roff\", \"man\", \"me\", \"ms\");\r\nexport const Text_Turtle = /*@__PURE__*/ text(\"turtle\", \"ttl\");\r\nexport const Text_Ulpfec = /*@__PURE__*/ text(\"ulpfec\");\r\nexport const Text_Uri_List = /*@__PURE__*/ text(\"uri-list\", \"uri\", \"uris\", \"urls\");\r\nexport const Text_Vcard = /*@__PURE__*/ text(\"vcard\", \"vcard\");\r\nexport const Text_Vendor_1d_Interleaved_Parityfec = /*@__PURE__*/ text(\"1d-interleaved-parityfec\");\r\nexport const Text_Vendor_A = /*@__PURE__*/ text(\"vnd.a\");\r\nexport const Text_Vendor_Abc = /*@__PURE__*/ text(\"vnd.abc\");\r\nexport const Text_Vendor_Ascii_Art = /*@__PURE__*/ text(\"vnd.ascii-art\");\r\nexport const Text_Vendor_Curl = /*@__PURE__*/ text(\"vnd.curl\", \"curl\");\r\nexport const Text_Vendor_CurlDcurl = /*@__PURE__*/ text(\"vnd.curl.dcurl\", \"dcurl\");\r\nexport const Text_Vendor_CurlMcurl = /*@__PURE__*/ text(\"vnd.curl.mcurl\", \"mcurl\");\r\nexport const Text_Vendor_CurlScurl = /*@__PURE__*/ text(\"vnd.curl.scurl\", \"scurl\");\r\nexport const Text_Vendor_DebianCopyright = /*@__PURE__*/ text(\"vnd.debian.copyright\");\r\nexport const Text_Vendor_DMClientScript = /*@__PURE__*/ text(\"vnd.dmclientscript\");\r\nexport const Text_Vendor_DvbSubtitle = /*@__PURE__*/ text(\"vnd.dvb.subtitle\", \"sub\");\r\nexport const Text_Vendor_EsmertecTheme_Descriptor = /*@__PURE__*/ text(\"vnd.esmertec.theme-descriptor\");\r\nexport const Text_Vendor_FiclabFlt = /*@__PURE__*/ text(\"vnd.ficlab.flt\");\r\nexport const Text_Vendor_Fly = /*@__PURE__*/ text(\"vnd.fly\", \"fly\");\r\nexport const Text_Vendor_FmiFlexstor = /*@__PURE__*/ text(\"vnd.fmi.flexstor\", \"flx\");\r\nexport const Text_Vendor_Gml = /*@__PURE__*/ text(\"vnd.gml\");\r\nexport const Text_Vendor_Graphviz = /*@__PURE__*/ text(\"vnd.graphviz\", \"gv\");\r\nexport const Text_Vendor_Hgl = /*@__PURE__*/ text(\"vnd.hgl\");\r\nexport const Text_Vendor_In3d3dml = /*@__PURE__*/ text(\"vnd.in3d.3dml\", \"3dml\");\r\nexport const Text_Vendor_In3dSpot = /*@__PURE__*/ text(\"vnd.in3d.spot\", \"spot\");\r\nexport const Text_Vendor_IPTCNewsML = /*@__PURE__*/ text(\"vnd.iptc.newsml\");\r\nexport const Text_Vendor_IPTCNITF = /*@__PURE__*/ text(\"vnd.iptc.nitf\");\r\nexport const Text_Vendor_Latex_Z = /*@__PURE__*/ text(\"vnd.latex-z\");\r\nexport const Text_Vendor_MotorolaReflex = /*@__PURE__*/ text(\"vnd.motorola.reflex\");\r\nexport const Text_Vendor_Ms_Mediapackage = /*@__PURE__*/ text(\"vnd.ms-mediapackage\");\r\nexport const Text_Vendor_Net2phoneCommcenterCommand = /*@__PURE__*/ text(\"vnd.net2phone.commcenter.command\");\r\nexport const Text_Vendor_RadisysMsml_Basic_Layout = /*@__PURE__*/ text(\"vnd.radisys.msml-basic-layout\");\r\nexport const Text_Vendor_SenxWarpscript = /*@__PURE__*/ text(\"vnd.senx.warpscript\");\r\nexport const Text_Vendor_SiUricatalogue = /*@__PURE__*/ text(\"vnd.si.uricatalogue\").deprecate(\"by request\");\r\nexport const Text_Vendor_Sosi = /*@__PURE__*/ text(\"vnd.sosi\");\r\nexport const Text_Vendor_SunJ2meApp_Descriptor = /*@__PURE__*/ text(\"vnd.sun.j2me.app-descriptor\", \"jad\");\r\nexport const Text_Vendor_TrolltechLinguist = /*@__PURE__*/ text(\"vnd.trolltech.linguist\");\r\nexport const Text_Vendor_WapSi = /*@__PURE__*/ text(\"vnd.wap.si\");\r\nexport const Text_Vendor_WapSl = /*@__PURE__*/ text(\"vnd.wap.sl\");\r\nexport const Text_Vendor_WapWml = /*@__PURE__*/ text(\"vnd.wap.wml\", \"wml\");\r\nexport const Text_Vendor_WapWmlscript = /*@__PURE__*/ text(\"vnd.wap.wmlscript\", \"wmls\");\r\nexport const Text_Vtt = /*@__PURE__*/ text(\"vtt\");\r\nexport const Text_X_Asm = /*@__PURE__*/ text(\"x-asm\", \"s\", \"asm\");\r\nexport const Text_X_C = /*@__PURE__*/ text(\"x-c\", \"c\", \"cc\", \"cxx\", \"cpp\", \"h\", \"hh\", \"dic\");\r\nexport const Text_X_Fortran = /*@__PURE__*/ text(\"x-fortran\", \"f\", \"for\", \"f77\", \"f90\");\r\nexport const Text_X_Gwt_Rpc = /*@__PURE__*/ text(\"x-gwt-rpc\");\r\nexport const Text_X_Handlebars_Template = /*@__PURE__*/ text(\"x-handlebars-template\", \"hbs\");\r\nexport const Text_X_Java_Source = /*@__PURE__*/ text(\"x-java-source\", \"java\");\r\nexport const Text_X_Jquery_Tmpl = /*@__PURE__*/ text(\"x-jquery-tmpl\");\r\nexport const Text_X_Lua = /*@__PURE__*/ text(\"x-lua\", \"lua\");\r\nexport const Text_X_Markdown = /*@__PURE__*/ text(\"x-markdown\", \"mkd\");\r\nexport const Text_X_Nfo = /*@__PURE__*/ text(\"x-nfo\", \"nfo\");\r\nexport const Text_X_Opml = /*@__PURE__*/ text(\"x-opml\", \"opml\");\r\nexport const Text_X_Org = /*@__PURE__*/ text(\"x-org\", \"org\");\r\nexport const Text_X_Pascal = /*@__PURE__*/ text(\"x-pascal\", \"p\", \"pas\");\r\nexport const Text_X_Processing = /*@__PURE__*/ text(\"x-processing\", \"pde\");\r\nexport const Text_X_Sass = /*@__PURE__*/ text(\"x-sass\", \"sass\");\r\nexport const Text_X_Scss = /*@__PURE__*/ text(\"x-scss\", \"scss\");\r\nexport const Text_X_Setext = /*@__PURE__*/ text(\"x-setext\", \"etx\");\r\nexport const Text_X_Sfv = /*@__PURE__*/ text(\"x-sfv\", \"sfv\");\r\nexport const Text_X_Suse_Ymp = /*@__PURE__*/ text(\"x-suse-ymp\", \"ymp\");\r\nexport const Text_X_Uuencode = /*@__PURE__*/ text(\"x-uuencode\", \"uu\");\r\nexport const Text_X_Vcalendar = /*@__PURE__*/ text(\"x-vcalendar\", \"vcs\");\r\nexport const Text_X_Vcard = /*@__PURE__*/ text(\"x-vcard\", \"vcf\");\r\nexport const Text_Xml = /*@__PURE__*/ text(\"xml\");\r\nexport const Text_Xml_External_Parsed_Entity = /*@__PURE__*/ text(\"xml-external-parsed-entity\");\r\nexport const Text_Yaml = /*@__PURE__*/ text(\"yaml\", \"yaml\", \"yml\");", "import { IDexDB, IDexDBOptionsDef, IDexStore } from \"@juniper-lib/indexdb\";\r\nimport { mapJoin } from \"@juniper-lib/collections/dist/mapJoin\";\r\nimport { PriorityList } from \"@juniper-lib/collections/dist/PriorityList\";\r\nimport { PriorityMap } from \"@juniper-lib/collections/dist/PriorityMap\";\r\nimport { Task } from \"@juniper-lib/events/dist/Task\";\r\nimport { withRetry } from \"@juniper-lib/events/dist/withRetry\";\r\nimport { identity } from \"@juniper-lib/tslib/dist/identity\";\r\nimport { IProgress } from \"@juniper-lib/progress/dist/IProgress\";\r\nimport { progressSplit } from \"@juniper-lib/progress/dist/progressSplit\";\r\nimport { assertNever, isArrayBuffer, isArrayBufferView, isDefined, isNullOrUndefined, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { using } from \"@juniper-lib/tslib/dist/using\";\r\nimport type { HTTPMethods } from \"./HTTPMethods\";\r\nimport type { IFetchingServiceImpl, XMLHttpRequestResponseTypeMap } from \"./IFetchingServiceImpl\";\r\nimport type { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport type { IResponse, ResponseCallback } from \"./IResponse\";\r\nimport { translateResponse } from \"./translateResponse\";\r\nimport { Text_Plain } from \"@juniper-lib/mediatypes\";\r\n\r\nexport function isXHRBodyInit(obj: any): obj is XMLHttpRequestBodyInit {\r\n    return isString(obj)\r\n        || isArrayBufferView(obj)\r\n        || obj instanceof Blob\r\n        || obj instanceof FormData\r\n        || isArrayBuffer(obj)\r\n        || \"Document\" in globalThis && obj instanceof Document;\r\n}\r\n\r\nfunction trackProgress(name: string, xhr: XMLHttpRequest, target: (XMLHttpRequest | XMLHttpRequestUpload), prog: IProgress, skipLoading: boolean, prevTask?: Promise<void>): Promise<void> {\r\n\r\n    let prevDone = !prevTask;\r\n    if (prevTask) {\r\n        prevTask.then(() => prevDone = true);\r\n    }\r\n\r\n    let done = false;\r\n    let loaded = skipLoading;\r\n\r\n    const requestComplete = new Task();\r\n\r\n    target.addEventListener(\"loadstart\", () => {\r\n        if (prevDone && !done && prog) {\r\n            prog.start(name);\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"progress\", (ev: Event) => {\r\n        if (prevDone && !done) {\r\n            const evt = ev as ProgressEvent<XMLHttpRequestEventTarget>;\r\n            if (prog) {\r\n                prog.report(evt.loaded, Math.max(evt.loaded, evt.total), name);\r\n            }\r\n            if (evt.loaded === evt.total) {\r\n                loaded = true;\r\n                if (done) {\r\n                    requestComplete.resolve();\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    target.addEventListener(\"load\", () => {\r\n        if (prevDone && !done) {\r\n            if (prog) {\r\n                prog.end(name);\r\n            }\r\n            done = true;\r\n            if (loaded) {\r\n                requestComplete.resolve();\r\n            }\r\n        }\r\n    });\r\n\r\n    const onError = (msg: string) => () => {\r\n        if (prevDone) {\r\n            requestComplete.reject(`${msg} (${xhr.status})`);\r\n        }\r\n    };\r\n\r\n    target.addEventListener(\"error\", onError(\"error\"));\r\n    target.addEventListener(\"abort\", onError(\"abort\"));\r\n    target.addEventListener(\"timeout\", onError(\"timeout\"));\r\n\r\n    return requestComplete;\r\n}\r\n\r\nfunction sendRequest(xhr: XMLHttpRequest, method: HTTPMethods, path: string, timeout: number, headers: Map<string, string>, body?: XMLHttpRequestBodyInit): void {\r\n    xhr.open(method, path);\r\n    xhr.responseType = \"blob\";\r\n    xhr.timeout = timeout;\r\n    if (headers) {\r\n        for (const [key, value] of headers) {\r\n            xhr.setRequestHeader(key, value);\r\n        }\r\n    }\r\n\r\n    if (isDefined(body)) {\r\n        xhr.send(body);\r\n    }\r\n    else {\r\n        xhr.send();\r\n    }\r\n}\r\n\r\nfunction readResponseHeader<T>(headers: Map<string, string>, key: string, translate: (value: string) => T): T {\r\n    if (!headers.has(key)) {\r\n        return null;\r\n    }\r\n\r\n    const value = headers.get(key);\r\n    try {\r\n        const translated = translate(value);\r\n        headers.delete(key);\r\n        return translated;\r\n    }\r\n    catch (exp) {\r\n        console.warn(key, exp);\r\n    }\r\n    return null;\r\n}\r\n\r\nconst FILE_NAME_PATTERN = /filename=\\\"(.+)\\\"(;|$)/;\r\nconst DB_NAME = \"Juniper:Fetcher:Cache\";\r\n\r\nexport class FetchingServiceImplXHR implements IFetchingServiceImpl {\r\n\r\n    private readonly cacheReady: Promise<void>;\r\n    private cache: IDexDB = null;\r\n    private store: IDexStore<IResponse<Blob>> = null;\r\n\r\n    constructor() {\r\n        this.cacheReady = this.openCache();\r\n    }\r\n\r\n    async drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        const response = await this.sendNothingGetSomething(\"blob\", request, progress);\r\n        const blob = response.content;\r\n        return using(await createImageBitmap(blob, {\r\n            imageOrientation: \"from-image\"\r\n        }), (img) => {\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const g = canvas.getContext(\"2d\");\r\n            g.drawImage(img, 0, 0);\r\n            return translateResponse(response);\r\n        });\r\n    }\r\n\r\n    private async openCache(): Promise<void> {\r\n        const options: IDexDBOptionsDef<IResponse> = {\r\n            keyPath: \"requestPath\"\r\n        };\r\n        this.cache = await IDexDB.open(DB_NAME, {\r\n            name: \"files\",\r\n            options\r\n        });\r\n\r\n        this.store = await this.cache.getStore(\"files\");\r\n    }\r\n\r\n    async clearCache(): Promise<void> {\r\n        await this.cacheReady;\r\n        await this.store.clear();\r\n    }\r\n\r\n    async evict(path: string): Promise<void> {\r\n        await this.cacheReady;\r\n        if (this.store.has(path)) {\r\n            await this.store.delete(path);\r\n        }\r\n    }\r\n\r\n    private async readResponseHeaders(requestPath: string, xhr: XMLHttpRequest): Promise<IResponse> {\r\n        const headerParts = xhr\r\n            .getAllResponseHeaders()\r\n            .split(/[\\r\\n]+/)\r\n            .map((v) => v.trim())\r\n            .filter((v) => v.length > 0)\r\n            .map<[string, string]>((line) => {\r\n                const parts = line.split(\": \");\r\n                const key = parts.shift().toLowerCase();\r\n                const value = parts.join(\": \");\r\n                return [key, value];\r\n            });\r\n\r\n        const pList = new PriorityList<string, string>(headerParts);\r\n        const normalizedHeaderParts = Array.from(pList.keys())\r\n            .map<[string, string]>((key) =>\r\n                [\r\n                    key,\r\n                    pList.get(key)\r\n                        .join(\", \")\r\n                ]);\r\n\r\n        const headers = new Map<string, string>(normalizedHeaderParts);\r\n        const contentType = readResponseHeader(headers, \"content-type\", identity);\r\n        const contentLength = readResponseHeader(headers, \"content-length\", parseFloat);\r\n        const date = readResponseHeader(headers, \"date\", (v) => new Date(v));\r\n        const fileName = readResponseHeader(headers, \"content-disposition\", (v) => {\r\n            if (isDefined(v)) {\r\n                const match = v.match(FILE_NAME_PATTERN);\r\n                if (isDefined(match)) {\r\n                    return match[1];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        });\r\n\r\n        const response: IResponse = {\r\n            status: xhr.status,\r\n            requestPath,\r\n            responsePath: xhr.responseURL,\r\n            content: undefined,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        };\r\n\r\n        return response;\r\n    }\r\n\r\n    private async readResponse(requestPath: string, xhr: XMLHttpRequest): Promise<IResponse<Blob>> {\r\n        const {\r\n            responsePath,\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers\r\n        } = await this.readResponseHeaders(requestPath, xhr);\r\n\r\n        const response: IResponse<Blob> = {\r\n            requestPath,\r\n            responsePath,\r\n            status,\r\n            contentType,\r\n            contentLength,\r\n            fileName,\r\n            date,\r\n            headers,\r\n            content: xhr.response as Blob\r\n        };\r\n\r\n        if (isDefined(response.content)) {\r\n            response.contentType = response.contentType || response.content.type;\r\n            response.contentLength = response.contentLength || response.content.size;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    private async decodeContent<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, response: IResponse<Blob>): Promise<IResponse<T>> {\r\n        return translateResponse<Blob, T>(response, async (contentBlob) => {\r\n            if (xhrType === \"\") {\r\n                return null;\r\n            }\r\n            else if (isNullOrUndefined(response.contentType)) {\r\n                const headerBlock = Array.from(response.headers.entries())\r\n                    .map((kv) => kv.join(\": \"))\r\n                    .join(\"\\n  \");\r\n                throw new Error(\"No content type found in headers: \\n  \" + headerBlock);\r\n            }\r\n            else if (xhrType === \"blob\") {\r\n                return contentBlob as any as T;\r\n            }\r\n            else if (xhrType === \"arraybuffer\") {\r\n                return (await contentBlob.arrayBuffer()) as any as T;\r\n            }\r\n            else if (xhrType === \"json\") {\r\n                const text = await contentBlob.text();\r\n                if (text.length > 0) {\r\n                    return JSON.parse(text) as T;\r\n                }\r\n                else {\r\n                    return null;\r\n                }\r\n            }\r\n            else if (xhrType === \"document\") {\r\n                const parser = new DOMParser();\r\n                if (response.contentType === \"application/xhtml+xml\"\r\n                    || response.contentType === \"text/html\"\r\n                    || response.contentType === \"application/xml\"\r\n                    || response.contentType === \"image/svg+xml\"\r\n                    || response.contentType === \"text/xml\") {\r\n                    return parser.parseFromString(await contentBlob.text(), response.contentType) as any as T;\r\n                }\r\n                else {\r\n                    throw new Error(\"Couldn't parse document\");\r\n                }\r\n            }\r\n            else if (xhrType === \"text\") {\r\n                return (await contentBlob.text()) as any as T;\r\n            }\r\n            else {\r\n                assertNever(xhrType);\r\n            }\r\n        });\r\n    }\r\n\r\n    private readonly tasks = new PriorityMap<HTTPMethods, string, Promise<any>>();\r\n\r\n    private async withCachedTask<T>(request: IRequest, action: ResponseCallback<T>): Promise<IResponse<T>> {\r\n        if (request.method !== \"GET\"\r\n            && request.method !== \"HEAD\"\r\n            && request.method !== \"OPTIONS\") {\r\n            return await action();\r\n        }\r\n\r\n        if (!this.tasks.has(request.method, request.path)) {\r\n            this.tasks.add(\r\n                request.method,\r\n                request.path,\r\n                action().finally(() =>\r\n                    this.tasks.delete(request.method, request.path)));\r\n        }\r\n\r\n        return this.tasks.get(request.method, request.path);\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.withCachedTask(request,\r\n            withRetry(request.retryCount, async () => {\r\n                const xhr = new XMLHttpRequest();\r\n                const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, null, true);\r\n\r\n                sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n                await download;\r\n\r\n                return await this.readResponseHeaders(request.path, xhr);\r\n            }));\r\n    }\r\n\r\n    sendNothingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.withCachedTask(request,\r\n            withRetry(request.retryCount, async () => {\r\n                let response: IResponse<Blob> = null;\r\n\r\n                const useCache = request.useCache && request.method === \"GET\";\r\n\r\n                if (useCache) {\r\n                    if (isDefined(progress)) {\r\n                        progress.start();\r\n                    }\r\n                    await this.cacheReady;\r\n                    response = await this.store.get(request.path);\r\n                }\r\n\r\n                const noCachedResponse = isNullOrUndefined(response);\r\n\r\n                if (noCachedResponse) {\r\n                    const xhr = new XMLHttpRequest();\r\n                    const download = trackProgress(`requesting: ${request.path}`, xhr, xhr, progress, true);\r\n\r\n                    sendRequest(xhr, request.method, request.path, request.timeout, request.headers);\r\n\r\n                    await download;\r\n\r\n                    response = await this.readResponse(request.path, xhr);\r\n\r\n                    if (useCache) {\r\n                        await this.store.add(response);\r\n                    }\r\n                }\r\n\r\n                const value = await this.decodeContent<K, T>(xhrType, response);\r\n\r\n                if (noCachedResponse && isDefined(progress)) {\r\n                    progress.end();\r\n                }\r\n\r\n                return value;\r\n            }));\r\n    }\r\n\r\n    sendSomethingGetSomething<K extends keyof (XMLHttpRequestResponseTypeMap), T extends XMLHttpRequestResponseTypeMap[K]>(xhrType: K, request: IRequestWithBody, defaultPostHeaders: Map<string, string>, progress: IProgress): Promise<IResponse<T>> {\r\n        let body: XMLHttpRequestBodyInit = null;\r\n\r\n        const headers = mapJoin(new Map<string, string>(), defaultPostHeaders, request.headers);\r\n\r\n        let contentType: string = null;\r\n\r\n        if (isDefined(headers)) {\r\n            const contentTypeHeaders = new Array<string>();\r\n            for (const key of headers.keys()) {\r\n                if (key.toLowerCase() === \"content-type\") {\r\n                    contentTypeHeaders.push(key);\r\n                }\r\n            }\r\n\r\n            if (contentTypeHeaders.length > 0) {\r\n                if (!(request.body instanceof FormData)) {\r\n                    contentType = headers.get(contentTypeHeaders[0]);\r\n                    // If there's more than one, keep just the first one\r\n                    contentTypeHeaders.shift();\r\n                }\r\n\r\n                // delete all the rest, or all if we're submitting a form\r\n                for (const key of contentTypeHeaders) {\r\n                    headers.delete(key);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (isXHRBodyInit(request.body) && !isString(request.body)\r\n            || isString(request.body) && Text_Plain.matches(contentType)) {\r\n            body = request.body;\r\n        }\r\n        else if (isDefined(request.body)) {\r\n            body = JSON.stringify(request.body);\r\n        }\r\n\r\n        const hasBody = isDefined(body);\r\n        const progs = progressSplit(progress, hasBody ? 2 : 1);\r\n        const [progUpload, progDownload] = progs;\r\n        const query: ResponseCallback<T> = async () => {\r\n            const xhr = new XMLHttpRequest();\r\n            const upload = hasBody\r\n                ? trackProgress(\"uploading\", xhr, xhr.upload, progUpload, false)\r\n                : Promise.resolve();\r\n            const download = trackProgress(\"saving\", xhr, xhr, progDownload, true, upload);\r\n\r\n            sendRequest(xhr, request.method, request.path, request.timeout, headers, body);\r\n\r\n            await upload;\r\n            await download;\r\n\r\n            const response = await this.readResponse(request.path, xhr);\r\n            return await this.decodeContent(xhrType, response);\r\n        };\r\n\r\n        return withRetry(request.retryCount, query)();\r\n    }\r\n}\r\n", "export function isChrome() {\r\n    return \"chrome\" in globalThis && !navigator.userAgent.match(\"CriOS\");\r\n}\r\n\r\nexport function isFirefox() {\r\n    return \"InstallTrigger\" in globalThis;\r\n}\r\n\r\nexport function isSafari() {\r\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\r\n}\r\n\r\nexport function isMacOS() {\r\n    return /^mac/i.test(navigator.platform);\r\n}\r\n\r\nexport function isIOS() {\r\n    return /iP(ad|hone|od)/.test(navigator.platform)\r\n        || /Macintosh(.*?) FxiOS(.*?)\\//.test(navigator.platform)\r\n        || isMacOS()\r\n            && \"maxTouchPoints\" in navigator\r\n            && (navigator as any).maxTouchPoints > 2;\r\n}\r\n\r\nexport function isApple() {\r\n    return isIOS()\r\n        || isMacOS();\r\n}\r\n\r\nexport function isMobileVR() {\r\n    return /Mobile VR/.test(navigator.userAgent)\r\n        || /Pico Neo 3 Link/.test(navigator.userAgent)\r\n        || isOculusBrowser;\r\n}\r\n\r\nexport function hasWebXR() {\r\n    return \"xr\" in navigator\r\n        && \"isSessionSupported\" in (navigator as any).xr;\r\n}\r\n\r\nexport function hasWebVR() {\r\n    return \"getVRDisplays\" in navigator;\r\n}\r\n\r\nexport function hasVR() {\r\n    return hasWebXR() || hasWebVR();\r\n}\r\n\r\nexport function isMobile() {\r\n    return /Android/.test(navigator.userAgent)\r\n        || /BlackBerry/.test(navigator.userAgent)\r\n        || /(UC Browser |UCWEB)/.test(navigator.userAgent)\r\n        || isIOS()\r\n        || isMobileVR();\r\n}\r\n\r\nexport function isDesktop() {\r\n    return !isMobile();\r\n}\r\n\r\nconst oculusBrowserPattern = /*@__PURE__*/ /OculusBrowser\\/(\\d+)\\.(\\d+)\\.(\\d+)/i;\r\nconst oculusMatch = /*@__PURE__*/ navigator.userAgent.match(oculusBrowserPattern);\r\nexport const isOculusBrowser = /*@__PURE__*/ !!oculusMatch;\r\nexport const oculusBrowserVersion: { major: number, minor: number, patch: number } = /*@__PURE__*/ isOculusBrowser && {\r\n    major: parseFloat(oculusMatch[1]),\r\n    minor: parseFloat(oculusMatch[2]),\r\n    patch: parseFloat(oculusMatch[3])\r\n};\r\n\r\nexport const isOculusGo = /*@__PURE__*/ isOculusBrowser && /pacific/i.test(navigator.userAgent);\r\nexport const isOculusQuest = /*@__PURE__*/ isOculusBrowser && /quest/i.test(navigator.userAgent);\r\nexport const isOculusQuest2 = /*@__PURE__*/ isOculusBrowser && /quest 2/i.test(navigator.userAgent);\r\nexport const isOculusQuest1 = /*@__PURE__*/ isOculusBrowser && !isOculusQuest2;\r\n\r\nexport const isWorkerSupported = /*@__PURE__*/ \"Worker\" in globalThis;", "import { TypedEventMap, TypedEventTarget } from \"@juniper-lib/events/dist/TypedEventTarget\";\r\nimport { BaseProgress } from \"@juniper-lib/progress/dist/BaseProgress\";\r\nimport { isArray, isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { WorkerClientMethodCallMessage, WorkerServerErrorMessage, WorkerServerEventMessage, WorkerServerMessages, WorkerServerProgressMessage, WorkerServerReturnMessage } from \"./WorkerMessages\";\r\n\r\ntype workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\ntype createTransferableCallback<T> = (returnValue: T) => (Transferable | OffscreenCanvas)[];\r\n\r\ntype Executor<T> = (...params: any[]) => Promise<T>;\r\n\r\ntype VoidExecutor = (...params: any[]) => void;\r\n\r\nclass WorkerServerProgress extends BaseProgress {\r\n    constructor(private readonly server: WorkerServer<any>, private readonly taskID: number) {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    override report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        const message: WorkerServerProgressMessage = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\n\r\nexport class WorkerServer<EventMapT extends TypedEventMap<string>> {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.addEventListener(\"message\", (evt: MessageEvent<WorkerClientMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n\r\n    postMessage(message: WorkerServerMessages<EventMapT>, transferables?: (Transferable | OffscreenCanvas)[]): void {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private callMethod(data: WorkerClientMethodCallMessage) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        const message: WorkerServerErrorMessage = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    private onReturn<T>(taskID: number, returnValue: T, transferReturnValue: createTransferableCallback<T>): void {\r\n        let message: WorkerServerReturnMessage = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private addMethodInternal<T>(methodName: string, asyncFunc: Function, transferReturnValue?: createTransferableCallback<T>) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n            const prog = new WorkerServerProgress(this, taskID);\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, prog);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction<T>(methodName: string, asyncFunc: Executor<T>, transferReturnValue?: createTransferableCallback<T>) {\r\n        this.addMethodInternal<T>(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName: string, asyncFunc: VoidExecutor) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param obj - the object on which to find the method.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & Executor<any>,\r\n        ReturnT extends (ReturnType<MethodT> extends Promise<infer T> ? T : ReturnT)\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT,\r\n        transferReturnValue?: createTransferableCallback<ReturnT>\r\n    ): void {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & VoidExecutor\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT\r\n    ): void {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n\r\n\r\n    addEvent<EventNameT extends keyof EventMapT & string, TransferableT>(\r\n        object: TypedEventTarget<EventMapT>,\r\n        eventName: EventNameT,\r\n        makePayload?: (evt: EventMapT[EventNameT] & Event) => TransferableT,\r\n        transferReturnValue?: createTransferableCallback<TransferableT>\r\n    ): void {\r\n        object.addEventListener(eventName, (evt: EventMapT[EventNameT] & Event) => {\r\n            let message: WorkerServerEventMessage<EventMapT> = null;\r\n            if (isDefined(makePayload)) {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName,\r\n                    data: makePayload(evt)\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName\r\n                };\r\n            }\r\n\r\n            if (message.data !== undefined\r\n                && isDefined(transferReturnValue)) {\r\n                const transferables = transferReturnValue(message.data);\r\n                this.postMessage(message, transferables);\r\n            }\r\n            else {\r\n                this.postMessage(message);\r\n            }\r\n        });\r\n    }\r\n}", "import { IProgress } from \"@juniper-lib/progress/dist/IProgress\";\r\nimport { IFetchingService } from \"./IFetchingService\";\r\nimport { IFetchingServiceImpl } from \"./IFetchingServiceImpl\";\r\nimport { IRequest, IRequestWithBody } from \"./IRequest\";\r\nimport { IResponse } from \"./IResponse\";\r\nimport { translateResponse } from \"./translateResponse\";\r\n\r\n\r\nexport class FetchingService implements IFetchingService {\r\n\r\n    constructor(private readonly impl: IFetchingServiceImpl) {\r\n    }\r\n\r\n    protected readonly defaultPostHeaders = new Map<string, string>();\r\n\r\n    setRequestVerificationToken(value: string): void {\r\n        this.defaultPostHeaders.set(\"RequestVerificationToken\", value);\r\n    }\r\n\r\n    clearCache(): Promise<void> {\r\n        return this.impl.clearCache();\r\n    }\r\n\r\n    evict(path: string): Promise<void> {\r\n        return this.impl.evict(path);\r\n    }\r\n\r\n    sendNothingGetNothing(request: IRequest): Promise<IResponse> {\r\n        return this.impl.sendNothingGetNothing(request);\r\n    }\r\n\r\n    sendNothingGetBlob(request: IRequest, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendNothingGetSomething(\"blob\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBlob(request: IRequestWithBody, progress: IProgress): Promise<IResponse<Blob>> {\r\n        return this.impl.sendSomethingGetSomething(\"blob\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetBuffer(request: IRequest, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendNothingGetSomething(\"arraybuffer\", request, progress);\r\n    }\r\n\r\n    sendObjectGetBuffer(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ArrayBuffer>> {\r\n        return this.impl.sendSomethingGetSomething(\"arraybuffer\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetText(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendNothingGetSomething(\"text\", request, progress);\r\n    }\r\n\r\n    sendObjectGetText(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return this.impl.sendSomethingGetSomething(\"text\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendNothingGetObject<T>(request: IRequest, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.impl.sendNothingGetSomething<\"json\", T>(\"json\", request, progress);\r\n    }\r\n\r\n    sendObjectGetObject<T>(request: IRequestWithBody, progress: IProgress): Promise<IResponse<T>> {\r\n        return this.impl.sendSomethingGetSomething<\"json\", T>(\"json\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    sendObjectGetNothing(request: IRequestWithBody, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.sendSomethingGetSomething(\"\", request, this.defaultPostHeaders, progress);\r\n    }\r\n\r\n    drawImageToCanvas(request: IRequest, canvas: OffscreenCanvas, progress: IProgress): Promise<IResponse> {\r\n        return this.impl.drawImageToCanvas(request, canvas, progress);\r\n    }\r\n\r\n    async sendNothingGetFile(request: IRequest, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendObjectGetFile(request: IRequestWithBody, progress: IProgress): Promise<IResponse<string>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            URL.createObjectURL);\r\n    }\r\n\r\n    async sendNothingGetXml(request: IRequest, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendNothingGetSomething(\"document\", request, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendObjectGetXml(request: IRequestWithBody, progress: IProgress): Promise<IResponse<HTMLElement>> {\r\n        return translateResponse(\r\n            await this.impl.sendSomethingGetSomething(\"document\", request, this.defaultPostHeaders, progress),\r\n            (doc) => doc.documentElement);\r\n    }\r\n\r\n    async sendNothingGetImageBitmap(request: IRequest, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendNothingGetBlob(request, progress),\r\n            createImageBitmap);\r\n    }\r\n\r\n    async sendObjectGetImageBitmap(request: IRequestWithBody, progress: IProgress): Promise<IResponse<ImageBitmap>> {\r\n        return translateResponse(\r\n            await this.sendObjectGetBlob(request, progress),\r\n            createImageBitmap);\r\n    }\r\n}\r\n", "import { TypedEventMap } from \"@juniper-lib/events/dist/TypedEventTarget\";\r\nimport { WorkerServer } from \"@juniper-lib/workers\";\r\nimport { FetchingService } from \"./FetchingService\";\r\nimport { IFetchingService } from \"./IFetchingService\";\r\nimport { IFetchingServiceImpl } from \"./IFetchingServiceImpl\";\r\nimport { IResponse } from \"./IResponse\";\r\n\r\nexport class FetchingServiceServer extends WorkerServer<TypedEventMap<string>> {\r\n    constructor(self: DedicatedWorkerGlobalScope, impl: IFetchingServiceImpl) {\r\n        super(self);\r\n        const fetcher = new FetchingService(impl);\r\n        addFetcherMethods(this, fetcher);\r\n    }\r\n}\r\n\r\nfunction getContent<T extends Transferable | OffscreenCanvas>(response: IResponse<T>): Array<Transferable | OffscreenCanvas> {\r\n    return [response.content];\r\n}\r\n\r\nexport function addFetcherMethods(server: WorkerServer<TypedEventMap<string>>, fetcher: IFetchingService) {\r\n    server.addVoidMethod(fetcher, \"setRequestVerificationToken\", fetcher.setRequestVerificationToken);\r\n\r\n    server.addMethod(fetcher, \"clearCache\", fetcher.clearCache);\r\n    server.addMethod(fetcher, \"evict\", fetcher.evict);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetNothing\", fetcher.sendNothingGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendNothingGetBuffer\", fetcher.sendNothingGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetImageBitmap\", fetcher.sendNothingGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendNothingGetObject\", fetcher.sendNothingGetObject);\r\n    server.addMethod(fetcher, \"sendNothingGetFile\", fetcher.sendNothingGetFile);\r\n    server.addMethod(fetcher, \"sendNothingGetText\", fetcher.sendNothingGetText);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetNothing\", fetcher.sendObjectGetNothing);\r\n\r\n    server.addMethod(fetcher, \"sendObjectGetImageBitmap\", fetcher.sendObjectGetImageBitmap, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetBuffer\", fetcher.sendObjectGetBuffer, getContent);\r\n    server.addMethod(fetcher, \"sendObjectGetObject\", fetcher.sendObjectGetObject);\r\n    server.addMethod(fetcher, \"sendObjectGetFile\", fetcher.sendObjectGetFile);\r\n    server.addMethod(fetcher, \"sendObjectGetText\", fetcher.sendObjectGetText);\r\n\r\n    server.addMethod(fetcher, \"drawImageToCanvas\", fetcher.drawImageToCanvas);\r\n}\r\n", "import { FetchingServiceImplXHR as FetchingServiceImpl } from \"@juniper-lib/fetcher/dist/FetchingServiceImplXHR\";\r\nimport { FetchingServiceServer } from \"@juniper-lib/fetcher/dist/FetchingServiceServer\";\r\n(globalThis as any).server = new FetchingServiceServer(\r\n    (globalThis as any) as DedicatedWorkerGlobalScope,\r\n    new FetchingServiceImpl());"],
  "mappings": "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",
  "names": ["text"]
}
