{
  "version": 3,
  "sources": ["../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/typeChecks.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/arrays.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/identity.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/Task.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/strings/stringRandom.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/attrs.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/css.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/tags.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/getColumnIndex.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/debounce.ts", "../../../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/widgets/src/FilterableTable/index.ts", "../../../../src/dom-apps/resource-summary/index.ts"],
  "sourcesContent": ["function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is the special NaN value or one of the Infinities.\r\n */\r\nexport function isBadNumber(num: number): boolean {\r\n    return isNullOrUndefined(num)\r\n        || !Number.isFinite(num)\r\n        || Number.isNaN(num);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value nor one of the Infinities.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && !isBadNumber(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { isDefined, isFunction, isNullOrUndefined, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\ninterface IComparable<T> {\r\n    compareTo(b: T): number;\r\n}\r\n\r\nfunction isIComparable<T>(obj: any): obj is IComparable<T> {\r\n    return isObject(obj)\r\n        && \"compareTo\" in obj\r\n        && isFunction(obj.compareTo);\r\n}\r\n\r\nexport type Comparable = number | Date | string | IComparable<any>;\r\nexport type CompareDirection = \"ascending\" | \"descending\";\r\nexport type CompareFunction<T> = ((a: T, b: T) => number) & {\r\n    direction: CompareDirection;\r\n}\r\n\r\nexport type ComparableSelector<T> = (obj: T) => Comparable;\r\n\r\nexport function compareBy<T>(direction: CompareDirection, ...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\r\nexport function compareBy<T>(...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\r\nexport function compareBy<T>(directionOrFirstKeyGetter: CompareDirection | ComparableSelector<T>, ...getKeys: ((obj: T) => Comparable)[]): CompareFunction<T> {\r\n    let direction: CompareDirection = null;\r\n    if (isString(directionOrFirstKeyGetter)) {\r\n        direction = directionOrFirstKeyGetter;\r\n    }\r\n    else {\r\n        direction = \"ascending\";\r\n        getKeys.unshift(directionOrFirstKeyGetter);\r\n    }\r\n\r\n    const d = direction === \"ascending\" ? 1 : -1;\r\n\r\n    const comparer = (a: T, b: T) => {\r\n        if (a === b) {\r\n            return 0;\r\n        }\r\n\r\n        for (const getKey of getKeys) {\r\n            const keyA = isNullOrUndefined(a) ? null : getKey(a);\r\n            const keyB = isNullOrUndefined(b) ? null : getKey(b);\r\n            const relation = keyA === keyB\r\n                ? 0\r\n                : isString(keyA) && isString(keyB)\r\n                    ? d * keyA.localeCompare(keyB)\r\n                    : isIComparable(keyA) && isIComparable(keyB)\r\n                        ? d * keyA.compareTo(keyB)\r\n                        : direction === \"ascending\" && keyA > keyB\r\n                            || direction === \"descending\" && keyA < keyB\r\n                            ? 1 : -1;\r\n\r\n            if (relation !== 0) {\r\n                return relation;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    };\r\n\r\n    return Object.assign(comparer, {\r\n        direction\r\n    });\r\n}\r\n\r\nexport type SearchMode = \"append\" | \"prepend\" | \"search\";\r\n\r\nexport function binarySearch<T>(arr: ArrayLike<T>, searchValue: T, comparer: CompareFunction<T>, mode: SearchMode = \"search\") {\r\n    let left = 0;\r\n    let right = arr.length - 1;\r\n    while (left <= right) {\r\n        let mid = (left + right) >> 1;\r\n        let relation = comparer(arr[mid], searchValue);\r\n        if (relation === 0) {\r\n            if (mode !== \"search\") {\r\n                const scanDirection = mode === \"append\" ? 1 : -1;\r\n                if (scanDirection > 0) {\r\n                    mid += scanDirection;\r\n                }\r\n                while (0 <= mid\r\n                    && mid < arr.length\r\n                    && (relation = comparer(arr[mid], searchValue)) === 0) {\r\n                    mid += scanDirection;\r\n                }\r\n                if (scanDirection < 0) {\r\n                    mid -= scanDirection;\r\n                }\r\n            }\r\n\r\n            return mid;\r\n        }\r\n        else if (relation < 0) {\r\n            left = mid - relation;\r\n        }\r\n        else {\r\n            right = mid - relation;\r\n        }\r\n    }\r\n\r\n    return -left - 1;\r\n}\r\n\r\nexport type InsertMode = \"set\" | SearchMode;\r\n\r\nexport function insertSorted<T>(arr: T[], val: T, idx: number): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>, mode: InsertMode): number;\r\nexport function insertSorted<T>(arr: T[], val: T, comparerOrIdx: CompareFunction<T> | number, mode: InsertMode = \"search\"): number {\r\n    const allowDuplicates = mode !== \"set\";\r\n    if (mode === \"set\") {\r\n        mode = \"search\";\r\n    }\r\n\r\n    let idx: number = null;\r\n    if (isNumber(comparerOrIdx)) {\r\n        idx = comparerOrIdx;\r\n    }\r\n    else {\r\n        idx = binarySearch(arr, val, comparerOrIdx, mode);\r\n    }\r\n\r\n    if (idx < 0) {\r\n        idx = -idx - 1;\r\n    }\r\n    else if (!allowDuplicates) {\r\n        return -1;\r\n    }\r\n\r\n    arrayInsertAt(arr, val, idx);\r\n    return idx;\r\n}\r\n\r\nexport function removeSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number {\r\n    const idx = binarySearch(arr, val, comparer);\r\n    if (idx >= 0) {\r\n        arrayRemoveAt(arr, idx);\r\n        return idx;\r\n    }\r\n    return -1;\r\n}\r\n\r\n\r\n/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}\r\n\r\n/**\r\n * Checks to see if two arrays contain the same elements\r\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\r\n * @param arr1\r\n * @param arr2\r\n */\r\n\r\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\r\n    for (let i = 0; i < arr1.length; ++i) {\r\n        if (arr1[i] !== arr2[i]) {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}\r\n\r\n\r\nexport function arrayGen<T>(count: number, thunk: (i: number) => T): T[] {\r\n    return Array.from(iterableGen(count, thunk));\r\n}\r\n\r\nexport function* iterableGen<T>(count: number, thunk: (i: number) => T) {\r\n    for (let i = 0; i < count; ++i) {\r\n        yield thunk(i);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Inserts an item at the given index into an array.\r\n * @param arr\r\n * @param item\r\n * @param idx\r\n */\r\n\r\nexport function arrayInsertAt<T>(arr: T[], item: T, idx: number) {\r\n    arr.splice(idx, 0, item);\r\n}\r\n\r\n/**\r\n * Returns a random item from an array of items.\r\n *\r\n * Provides an option to consider an additional item as part of the collection\r\n * for random selection.\r\n */\r\nexport function arrayRandom<T>(arr: T[], defaultValue?: T): T | undefined {\r\n    const offset = defaultValue != null ? 1 : 0,\r\n        idx = Math.floor(Math.random() * (arr.length + offset)) - offset;\r\n    if (idx < 0) {\r\n        return defaultValue;\r\n    }\r\n    else {\r\n        return arr[idx];\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Removes a given item from an array, returning true if the item was removed.\r\n */\r\nexport function arrayRemove<T>(arr: T[], value: T) {\r\n    const idx = arr.indexOf(value);\r\n    if (idx > -1) {\r\n        arrayRemoveAt(arr, idx);\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\r\n    for (let i = arr.length - 1; i >= 0; --i) {\r\n        if (predicate(arr[i])) {\r\n            return arrayRemoveAt(arr, i);\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\r\n    return arrayFilter(arr, (v) => getKey(v) === key);\r\n}\r\n\r\n/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}\r\n\r\n/**\r\n * Replaces all of the items in an array with the given items.\r\n *\r\n * This helps reduce GC pressure as you're not creating arrays\r\n * and then dropping them on the floor.\r\n * \r\n * @param arr the array to fill\r\n * @param items the items to put into the array\r\n */\r\nexport function arrayReplace<T>(arr: T[], ...items: T[]) {\r\n    arr.splice(0, arr.length, ...items);\r\n}\r\n\r\nexport function arrayCreate<T>(count: number, make: (i: number, len?: number) => T): T[] {\r\n    const arr = new Array<T>(count);\r\n    for (let i = 0; i < count; ++i) {\r\n        arr[i] = make(i, count);\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nfunction _arrayScan<T>(forward: boolean, arr: readonly T[], tests: ((val: T) => boolean)[]): T {\r\n    const start = forward ? 0 : arr.length - 1;\r\n    const end = forward ? arr.length : -1;\r\n    const inc = forward ? 1 : -1;\r\n    for (const test of tests) {\r\n        for (let i = start; i != end; i += inc) {\r\n            const item = arr[i];\r\n            if (test(item)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The first item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScan<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T\r\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(true, arr, tests);\r\n}\r\n\r\n/**\r\n * Scans through a series of filters to find an item that matches\r\n * any of the filters. The last item of the first filter that matches\r\n * will be returned.\r\n */\r\nexport function arrayScanReverse<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T;\r\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\r\n    return _arrayScan(false, arr, tests);\r\n}\r\n\r\nexport function arrayShuffleInplace<T>(arr: T[]): void {\r\n    for (let i = 0; i < arr.length - 1; ++i) {\r\n        const subLength = arr.length - i;\r\n        const subIndex = Math.floor(Math.random() * subLength);\r\n        const temp = arr[i];\r\n        const j = subIndex + i;\r\n        arr[i] = arr[j];\r\n        arr[j] = temp;\r\n    }\r\n}\r\n\r\nexport function arrayShuffle<T>(arr: readonly T[]): T[] {\r\n    const output = arr.slice();\r\n    arrayShuffleInplace(output);\r\n    return output;\r\n}\r\n\r\nconst numericPattern = /^(-?(?:\\d+\\.)\\d+)/;\r\n/**\r\n * Creates a new array that is sorted by the key extracted\r\n * by the keySelector callback, not modifying the input array,\r\n * (unlike JavaScript's own Array.prototype.sort).\r\n *\r\n * If the values have a number at the beginning, they'll be sorted\r\n * by that number.\r\n * @param arr\r\n * @param keySelector\r\n */\r\nexport function arraySortNumericByKey<T>(arr: ReadonlyArray<T>, keySelector: (obj: T) => string): T[] {\r\n    const comparer = compareBy<T>(v => {\r\n        const key = keySelector(v);\r\n        const match = key.match(numericPattern);\r\n        if (isDefined(match)) {\r\n            return parseFloat(match[1]);\r\n        }\r\n        return key;\r\n    });\r\n\r\n    return Array\r\n        .from(arr)\r\n        .sort(comparer);\r\n}\r\n\r\nexport function arrayZip<T, V>(arr1: readonly T[], arr2: readonly T[], combine: (a: T, b: T) => V): V[] {\r\n    const len = Math.max(arr1.length, arr2.length);\r\n    const output = new Array<V>(len);\r\n    for (let i = 0; i < len; ++i) {\r\n        output[i] = combine(arr1[i], arr2[i]);\r\n    }\r\n\r\n    return output;\r\n}\r\n", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport function reflectValue<T>(v: T): () => T {\r\n    return () => v;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "import { arrayClear } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { TypedEventTarget, TypedEventMap } from \"./TypedEventTarget\";\r\n\r\nexport type TaskExecutionState =\r\n    | \"waiting\"\r\n    | \"running\"\r\n    | \"finished\"\r\n\r\nexport type TaskResultState =\r\n    | \"none\"\r\n    | \"resolved\"\r\n    | \"errored\";\r\n\r\n/**\r\n * A Task represents a Promise that exposes its resolve/reject functions\r\n * as methods, rather than requiring a callback being passed to its constructor.\r\n * Tasks can be used to build manually-resolved Promises with less\r\n * boilerplate of nested function blocks.\r\n **/\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n\r\n    private _result: ResultsT = undefined;\r\n    private _error: any = undefined;\r\n    private _executionState: TaskExecutionState = \"waiting\";\r\n    private _resultState: TaskResultState = \"none\";\r\n\r\n    /**\r\n     * Signal success for the Task\r\n     *\r\n     * @param value - the value to store with the resolved Task.\r\n     **/\r\n    public readonly resolve: (value: ResultsT) => void;\r\n\r\n    /**\r\n     * Signal failrue for the Task\r\n     *\r\n     * @param value - the error to store with the rejected Task.\r\n     **/\r\n    public readonly reject: (reason: any) => void;\r\n\r\n\r\n    /**\r\n     * Create a new Task\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(private readonly autoStart = true) {\r\n        // It's very likely that we will want to use resolve/reject\r\n        // as values to pass to another function/method, so we create\r\n        // them not as methods, but as bound lambda expressions stored\r\n        // in public fields.\r\n        this.resolve = (value) => {\r\n            if (this.running) {\r\n                this._result = value;\r\n                this._resultState = \"resolved\";\r\n\r\n                for (const thenner of this.onThens) {\r\n                    thenner(value);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        this.reject = (reason) => {\r\n            if (this.running) {\r\n                this._error = reason;\r\n                this._resultState = \"errored\";\r\n\r\n                for (const catcher of this.onCatches) {\r\n                    catcher(reason);\r\n                }\r\n\r\n                this.clear();\r\n                this._executionState = \"finished\";\r\n            }\r\n        };\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private clear() {\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n    }\r\n\r\n    /**\r\n     * If the task was not auto-started, signal that the task is now ready to recieve\r\n     * resolutions or rejections.\r\n     **/\r\n    start() {\r\n        this._executionState = \"running\";\r\n    }\r\n\r\n    /**\r\n     * Creates a resolving callback for a static value.\r\n     * @param value\r\n     */\r\n    resolver(value: ResultsT) {\r\n        return () => this.resolve(value);\r\n    }\r\n\r\n    resolveOn<EventMapT extends TypedEventMap<string>, EventT extends keyof EventMapT = keyof EventMapT>(\r\n        target: TypedEventTarget<EventMapT> | EventTarget,\r\n        resolveEvt: EventT,\r\n        value: ResultsT) {\r\n        const resolver = this.resolver(value);\r\n        target.addEventListener(resolveEvt as any, resolver);\r\n        this.finally(() =>\r\n            target.removeEventListener(resolveEvt as any, resolver));\r\n    }\r\n\r\n    /**\r\n     * Get the last result that the task had resolved to, if any is available.\r\n     *\r\n     * If the Task had been rejected, attempting to get the result will rethrow\r\n     * the error that had rejected the task.\r\n     **/\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    /**\r\n     * Get the last error that the task had been rejected by, if any.\r\n     **/\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Get the current state of the task.\r\n     **/\r\n    get executionState() {\r\n        return this._executionState;\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is hasn't started yet.\r\n     **/\r\n    get waiting(): boolean {\r\n        return this.executionState === \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is waiting to be resolved or rejected.\r\n     **/\r\n    get started(): boolean {\r\n        return this.executionState !== \"waiting\";\r\n    }\r\n\r\n    /**\r\n     * Returns true after the Task has started, but before it has finished.\r\n     **/\r\n    get running(): boolean {\r\n        return this.executionState === \"running\";\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task has been resolved or rejected.\r\n     **/\r\n    get finished(): boolean {\r\n        return this.executionState === \"finished\";\r\n    }\r\n\r\n    get resultState() {\r\n        return this._resultState;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been resolved successfully.\r\n     **/\r\n    get resolved(): boolean {\r\n        return this.resultState === \"resolved\";\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been rejected, regardless of any\r\n     * reason being given.\r\n     **/\r\n    get errored(): boolean {\r\n        return this.resultState === \"errored\";\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Calling Task.then(), Task.catch(), or Task.finally() creates a new Promise.\r\n     * This method creates that promise and links it with the task.\r\n     **/\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to the task that fires when the task is resolved.\r\n     * \r\n     * @param onfulfilled\r\n     * @param onrejected\r\n     */\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires when the Task is rejected.\r\n     * \r\n     * @param onrejected\r\n     */\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires regardless of whether the Task is resolved\r\n     * or rejected.\r\n     * \r\n     * @param onfinally\r\n     */\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    /**\r\n     * Resets the Task to an unsignalled state, which is useful for\r\n     * reducing GC pressure when working with lots of tasks.\r\n     **/\r\n    reset() {\r\n        this._reset(this.autoStart);\r\n    }\r\n\r\n    restart() {\r\n        this._reset(true);\r\n    }\r\n\r\n    private _reset(start: boolean) {\r\n        if (this.running) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        this.clear();\r\n        this._result = undefined;\r\n        this._error = undefined;\r\n        this._executionState = \"waiting\";\r\n        this._resultState = \"none\";\r\n\r\n        if (start) {\r\n            this.start();\r\n        }\r\n    }\r\n}", "import { isNullOrUndefined } from \"../typeChecks\";\r\n\r\nconst DEFAULT_CHAR_SET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ\";\r\n\r\nexport function stringRandom(length: number, charSet?: string): string {\r\n    if (length < 0) {\r\n        throw new Error(\"Length must be greater than 0\");\r\n    }\r\n\r\n    if (isNullOrUndefined(charSet)) {\r\n        charSet = DEFAULT_CHAR_SET;\r\n    }\r\n\r\n    let str = \"\";\r\n    for (let i = 0; i < length; ++i) {\r\n        const idx = Math.floor(Math.random() * charSet.length);\r\n        str += charSet[idx];\r\n    }\r\n\r\n    return str;\r\n}", "import type { MediaType } from \"@juniper-lib/mediatypes\";\r\nimport { identity } from \"@juniper-lib/tslib/dist/identity\";\r\nimport { stringRandom } from \"@juniper-lib/tslib/dist/strings/stringRandom\";\r\nimport { isBoolean, isFunction, isNullOrUndefined, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nconst warnings = new Map<string, Set<string>>();\r\n\r\n/**\r\n * A setter functor for HTML attributes.\r\n **/\r\nexport class HtmlAttr<T extends string = string, V = number | object | ((elem: HTMLElement) => unknown)> {\r\n\r\n    readonly tags: readonly string[];\r\n\r\n    /**\r\n     * Creates a new setter functor for HTML Attributes\r\n     * @param key - the attribute name.\r\n     * @param value - the value to set for the attribute.\r\n     * @param bySetAttribute - whether the attribute should be set via the setAttribute method.\r\n     * @param tags - the HTML tags that support this attribute.\r\n     */\r\n    constructor(\r\n        public readonly key: T,\r\n        public readonly value: V,\r\n        private readonly bySetAttribute: boolean,\r\n        ...tags: string[]) {\r\n        this.tags = tags.map((t) => t.toLocaleUpperCase());\r\n        Object.freeze(this);\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    applyToElement(elem: HTMLElement) {\r\n        if (this.tags.length > 0\r\n            && this.tags.indexOf(elem.tagName) === -1) {\r\n            let set = warnings.get(elem.tagName);\r\n            if (!set) {\r\n                warnings.set(elem.tagName, set = new Set());\r\n            }\r\n\r\n            if (!set.has(this.key)) {\r\n                set.add(this.key);\r\n                console.warn(`Element ${elem.tagName} does not support Attribute ${this.key}`);\r\n            }\r\n        }\r\n\r\n        if (this.bySetAttribute) {\r\n            elem.setAttribute(this.key, this.value.toString());\r\n        }\r\n        else if (this.key in elem) {\r\n            (elem as unknown)[this.key] = this.value;\r\n        }\r\n        else if (this.value === false) {\r\n            elem.removeAttribute(this.key);\r\n        }\r\n        else if (this.value === true) {\r\n            elem.setAttribute(this.key, \"\");\r\n        }\r\n        else if (isFunction(this.value)) {\r\n            this.value(elem);\r\n        }\r\n        else {\r\n            elem.setAttribute(this.key, this.value.toString());\r\n        }\r\n    }\r\n}\r\n\r\nfunction attr<T extends string = string, V = number | object>(key: T, value: V, bySetAttribute: boolean, ...tags: string[]) {\r\n    return new HtmlAttr(key, value, bySetAttribute, ...tags);\r\n}\r\n\r\nexport function isAttr(obj: unknown): obj is HtmlAttr {\r\n    return obj instanceof HtmlAttr;\r\n}\r\n\r\n/**\r\n * a list of types the server accepts, typically a file type.\r\n * @param value - the value to set on the attribute.\r\n **/\r\nexport function Accept(value: string) { return attr(\"accept\", value, false, \"form\", \"input\"); }\r\n\r\n/**\r\n * The accessKey attribute\r\n **/\r\nexport function AccessKey(value: string) { return attr(\"accessKey\", value, false, \"input\", \"button\"); }\r\n\r\n/**\r\n * specifying the horizontal alignment of the element.\r\n **/\r\nexport function Align(value: string) { return attr(\"align\", value, false, \"applet\", \"caption\", \"col\", \"colgroup\", \"hr\", \"iframe\", \"img\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"); }\r\n\r\n/**\r\n * Specifies a feature-policy for the iframe.\r\n **/\r\nexport function Allow(value: string) { return attr(\"allow\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Whether or not to allow an IFrame to open full screen elements.\r\n */\r\nexport function AllowFullscreen(value: boolean) { return attr(\"allowfullscreen\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Alternative text in case an image can't be displayed.\r\n **/\r\nexport function Alt(value: string) { return attr(\"alt\", value, false, \"applet\", \"area\", \"img\", \"input\"); }\r\n\r\n/**\r\n * Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\r\n **/\r\nexport function AriaActiveDescendant(value: string) { return attr(\"ariaActiveDescendant\", value, false); }\r\n\r\n/**\r\n * Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\r\n **/\r\nexport function AriaAtomic(value: boolean) { return attr(\"ariaAtomic\", value, false); }\r\n\r\n/**\r\n * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\r\n **/\r\nexport function AriaAutoComplete(value: string) { return attr(\"ariaAutoComplete\", value, false); }\r\n\r\n/**\r\n * Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\r\n **/\r\nexport function AriaBusy(value: boolean) { return attr(\"ariaBusy\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.\r\n **/\r\nexport function AriaChecked(value: boolean) { return attr(\"ariaChecked\", value, false); }\r\n\r\n/**\r\n * Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\r\n  **/\r\nexport function AriaColCount(value: number) { return attr(\"ariaColCount\", value, false); }\r\n\r\n/**\r\n * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.\r\n  **/\r\nexport function AriaColIndex(value: number) { return attr(\"ariaColIndex\", value, false); }\r\n\r\n/**\r\n * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\r\n  **/\r\nexport function AriaColSpan(value: number) { return attr(\"ariaColSpan\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.\r\n  **/\r\nexport function AriaControls(value: string) { return attr(\"ariaControls\", value, false); }\r\n\r\n/**\r\n * Indicates the element that represents the current item within a container or set of related elements.\r\n  **/\r\nexport function AriaCurrent(value: string) { return attr(\"ariaCurrent\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) that describes the object. See related aria-labelledby.\r\n  **/\r\nexport function AriaDescribedBy(value: string) { return attr(\"ariaDescribedBy\", value, false); }\r\n\r\n/**\r\n * Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.\r\n  **/\r\nexport function AriaDetails(value: string) { return attr(\"ariaDetails\", value, false); }\r\n\r\n/**\r\n * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.\r\n  **/\r\nexport function AriaDisabled(value: boolean) { return attr(\"ariaDisabled\", value, false); }\r\n\r\n/**\r\n * Identifies the element that provides an error message for the object. See related aria-invalid and aria-describedby.\r\n  **/\r\nexport function AriaErrorMessage(value: string) { return attr(\"ariaErrorMessage\", value, false); }\r\n\r\n/**\r\n * Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\r\n **/\r\nexport function AriaExpanded(value: boolean) { return attr(\"ariaExpanded\", value, false); }\r\n\r\n/**\r\n * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\r\n  **/\r\nexport function AriaFlowTo(value: string) { return attr(\"ariaFlowTo\", value, false); }\r\n\r\n/**\r\n * Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\r\n  **/\r\nexport function AriaHasPopup(value: string) { return attr(\"ariaHasPopup\", value, false); }\r\n\r\n/**\r\n * Indicates whether the element is exposed to an accessibility API. See related aria-disabled.\r\n **/\r\nexport function AriaHidden(value: boolean) { return attr(\"ariaHidden\", value, false); }\r\n\r\n/**\r\n * Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.\r\n  **/\r\nexport function AriaInvalid(value: string) { return attr(\"ariaInvalid\", value, false); }\r\n\r\n/**\r\n * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\r\n  **/\r\nexport function AriaKeyShortcuts(value: string) { return attr(\"ariaKeyShortcuts\", value, false); }\r\n\r\n/**\r\n * Defines a string value that labels the current element. See related aria-labelledby.\r\n  **/\r\nexport function AriaLabel(value: string) { return attr(\"ariaLabel\", value, false); }\r\n\r\n/**\r\n * Identifies the element (or elements) that labels the current element. See related aria-describedby.\r\n  **/\r\nexport function AriaLabelledBy(value: string) { return attr(\"ariaLabelledBy\", value, false); }\r\n\r\n/**\r\n * Defines the hierarchical level of an element within a structure.\r\n  **/\r\nexport function AriaLevel(value: number) { return attr(\"ariaLevel\", value, false); }\r\n\r\n/**\r\n * Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\r\n  **/\r\nexport function AriaLive(value: string) { return attr(\"ariaLive\", value, false); }\r\n\r\n/**\r\n * Indicates whether an element is modal when displayed\r\n  **/\r\nexport function AriaModal(value: boolean) { return attr(\"ariaModal\", value, false); }\r\n\r\n/**\r\n * Indicates whether a text box accepts multiple lines of input or only a single line.\r\n  **/\r\nexport function AriaMultiline(value: boolean) { return attr(\"ariaMultiline\", value, false); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function AriaMultiSelectable(value: boolean) { return attr(\"ariaMultiSelectable\", value, false); }\r\n\r\n/**\r\n * Indicates that the user may select more than one item from the current selectable descendants.\r\n  **/\r\nexport function AriaOrientation(value: string) { return attr(\"ariaOrientation\", value, false); }\r\n\r\n/**\r\n * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\r\n  **/\r\nexport function AriaOwns(value: string) { return attr(\"ariaOwns\", value, false); }\r\n\r\n/**\r\n * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\r\n  **/\r\nexport function AriaPlaceholder(value: string) { return attr(\"ariaPlaceholder\", value, false); }\r\n\r\n/**\r\n * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\r\n  **/\r\nexport function AriaPosInSet(value: number) { return attr(\"ariaPosInSet\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.\r\n **/\r\nexport function AriaPressed(value: boolean) { return attr(\"ariaPressed\", value, false); }\r\n\r\n/**\r\n * Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.\r\n  **/\r\nexport function AriaReadOnly(value: boolean) { return attr(\"ariaReadOnly\", value, false); }\r\n\r\n/**\r\n * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\r\n  **/\r\nexport function AriaRelevant(value: string) { return attr(\"ariaRelevant\", value, false); }\r\n\r\n/**\r\n * Indicates that user input is required on the element before a form may be submitted.\r\n  **/\r\nexport function AriaRequired(value: boolean) { return attr(\"ariaRequired\", value, false); }\r\n\r\n/**\r\n * Defines a human-readable, author-localized description for the role of an element.\r\n  **/\r\nexport function AriaRoleDescription(value: string) { return attr(\"ariaRoleDescription\", value, false); }\r\n\r\n/**\r\n * Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\r\n  **/\r\nexport function AriaRowCount(value: number) { return attr(\"ariaRowCount\", value, false); }\r\n\r\n/**\r\n * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.\r\n  **/\r\nexport function AriaRowIndex(value: number) { return attr(\"ariaRowIndex\", value, false); }\r\n\r\n/**\r\n Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\r\n  **/\r\nexport function AriaRowSpan(value: number) { return attr(\"ariaRowSpan\", value, false); }\r\n\r\n/**\r\n * Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.\r\n **/\r\nexport function AriaSelected(value: boolean) { return attr(\"ariaSelected\", value, false); }\r\n\r\n/**\r\n * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\r\n  **/\r\nexport function AriaSetSize(value: number) { return attr(\"ariaSetsize\", value, false); }\r\n\r\n/**\r\n * Indicates if items in a table or grid are sorted in ascending or descending order.\r\n  **/\r\nexport function AriaSort(value: string) { return attr(\"ariaSort\", value, false); }\r\n\r\n/**\r\n * Defines the maximum allowed value for a range widget.\r\n  **/\r\nexport function AriaValueMax(value: number) { return attr(\"ariaValueMax\", value, false); }\r\n\r\n/**\r\n * Defines the minimum allowed value for a range widget.\r\n  **/\r\nexport function AriaValueMin(value: number) { return attr(\"ariaValueMin\", value, false); }\r\n\r\n/**\r\n * Defines the current value for a range widget. See related aria-valuetext.\r\n  **/\r\nexport function AriaValueNow(value: number) { return attr(\"ariaValueNow\", value, false); }\r\n\r\n/**\r\n * Defines the human readable text alternative of aria-valuenow for a range widget.\r\n  **/\r\nexport function AriaValueText(value: string) { return attr(\"ariaValueText\", value, false); }\r\n\r\n/**\r\n * Executes the script asynchronously.\r\n  **/\r\nexport function Async(value: string) { return attr(\"async\", value, false, \"script\"); }\r\n\r\n/**\r\n * Sets whether input is automatically capitalized when entered by user\r\n  **/\r\nexport function AutoCapitalize(value: boolean) { return attr(\"autocapitalize\", value, false); }\r\n\r\n/**\r\n * Indicates whether controls in this form can by default have their values automatically completed by the browser.\r\n  **/\r\nexport function AutoComplete(value: HTMLAutoCompleteAttributeValue) { return attr(\"autocomplete\", value, false, \"form\", \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The element should be automatically focused after the page loaded.\r\n  **/\r\nexport function AutoFocus(value: boolean) { return attr(\"autofocus\", value, false, \"button\", \"input\", \"keygen\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * The audio or video should play as soon as possible.\r\n  **/\r\nexport function AutoPlay(value: boolean) { return attr(\"autoplay\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Contains the time range of already buffered media.\r\n  **/\r\nexport function Buffered(value: boolean) { return attr(\"buffered\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * From the HTML Media Capture\r\n  **/\r\nexport function Capture(value: boolean) { return attr(\"capture\", value, false, \"input\"); }\r\n\r\n/**\r\n * Declares the character encoding of the page or script.\r\n  **/\r\nexport function CharSet(value: string) { return attr(\"charset\", value, false, \"meta\", \"script\"); }\r\n\r\n/**\r\n * Indicates whether the element should be checked on page load.\r\n  **/\r\nexport function Checked(value: boolean) { return attr(\"checked\", value, false, \"command\", \"input\"); }\r\n\r\n/**\r\n * Contains a URI which points to the source of the quote or change.\r\n  **/\r\nexport function Cite_attr(value: string) { return attr(\"cite\", value, false, \"blockquote\", \"del\", \"ins\", \"q\"); }\r\n\r\n/**\r\n * Often used with CSS to style elements with common properties.\r\n  **/\r\nexport function ClassName(value: string) { return attr(\"className\", value, false); }\r\n\r\n/**\r\n * Often used with CSS to style elements with common properties.\r\n  **/\r\nexport function ClassList(...values: string[]) {\r\n    values = values.filter(identity);\r\n    return attr(\"CLASS_LIST\", (element: HTMLElement) => element.classList.add(...values), false);\r\n}\r\n\r\n/**\r\n * Specifies the URL of the applet's class file to be loaded and executed.\r\n  **/\r\nexport function Code_attr(value: string) { return attr(\"code\", value, false, \"applet\"); }\r\n\r\n/**\r\n * This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored.\r\n  **/\r\nexport function CodeBase(value: string) { return attr(\"codebase\", value, false, \"applet\"); }\r\n\r\n/**\r\n * Defines the number of columns in a textarea.\r\n  **/\r\nexport function Cols(value: number) { return attr(\"cols\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * The colspan attribute defines the number of columns a cell should span.\r\n  **/\r\nexport function ColSpan(value: number) { return attr(\"colspan\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * A value associated with http-equiv or name depending on the context.\r\n  **/\r\nexport function Content(value: string) { return attr(\"content\", value, false, \"meta\"); }\r\n\r\n/**\r\n * Indicates whether the element's content is editable.\r\n  **/\r\nexport function ContentEditable(value: string) { return attr(\"contenteditable\", value, false); }\r\n\r\n/**\r\n * Defines the ID of a <menu> element which will serve as the element's context menu.\r\n  **/\r\nexport function ContextMenu(value: string) { return attr(\"contextmenu\", value, false); }\r\n\r\n/**\r\n * Indicates whether the browser should show playback controls to the user.\r\n  **/\r\nexport function Controls(value: boolean) { return attr(\"controls\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * A set of values specifying the coordinates of the hot-spot region.\r\n  **/\r\nexport function Coords(value: string) { return attr(\"coords\", value, false, \"area\"); }\r\n\r\n/**\r\n * How the element handles cross-origin requests\r\n  **/\r\nexport function CrossOrigin(value: string) { return attr(\"crossorigin\", value, false, \"audio\", \"img\", \"link\", \"script\", \"video\"); }\r\n\r\n/**\r\n * Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\r\n  **/\r\nexport function CSP(value: string) { return attr(\"csp\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Specifies the URL of the resource.\r\n  **/\r\nexport function Data_attr(value: string) { return attr(\"data\", value, false, \"object\"); }\r\n\r\n/**\r\n * Lets you attach custom attributes to an HTML element.\r\n */\r\nexport function CustomData<V = number | object>(name: string, value: V) { return attr(\"data-\" + name.toLowerCase(), value, true); }\r\n\r\n/**\r\n * Indicates the date and time associated with the element.\r\n  **/\r\nexport function DateTime(value: Date) { return attr(\"datetime\", value, false, \"del\", \"ins\", \"time\"); }\r\n\r\n/**\r\n * Indicates the preferred method to decode the image.\r\n  **/\r\nexport function Decoding(value: string) { return attr(\"decoding\", value, false, \"img\"); }\r\n\r\n/**\r\n * Indicates that the track should be enabled unless the user's preferences indicate something different.\r\n  **/\r\nexport function Default(value: boolean | string) { return attr(\"default\", value, false, \"track\"); }\r\n\r\n/**\r\n * Indicates that the script should be executed after the page has been parsed.\r\n  **/\r\nexport function Defer(value: boolean) { return attr(\"defer\", value, false, \"script\"); }\r\n\r\n/**\r\n * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\r\n  **/\r\nexport function Dir(value: string) { return attr(\"dir\", value, false); }\r\n\r\n/**\r\n * Indicates whether the user can interact with the element.\r\n  **/\r\nexport function Disabled(value: boolean) { return attr(\"disabled\", value, false, \"button\", \"command\", \"fieldset\", \"input\", \"keygen\", \"optgroup\", \"option\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * ??? \r\n  **/\r\nexport function DirName(value: string) { return attr(\"dirname\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates that the hyperlink is to be used for downloading a resource by giving the file a name.\r\n  **/\r\nexport function Download(value: string) { return attr(\"download\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines whether the element can be dragged.\r\n  **/\r\nexport function Draggable(value: boolean) { return attr(\"draggable\", value, false); }\r\n\r\n/**\r\n * Indicates that the element accepts the dropping of content onto it.\r\n  **/\r\nexport function DropZone(value: string) { return attr(\"dropzone\", value, false); }\r\n\r\n/**\r\n * Defines the content type of the form data when the method is POST.\r\n  **/\r\nexport function EncType(value: string) { return attr(\"enctype\", value, false, \"form\"); }\r\n\r\n/**\r\n * The enterkeyhint specifies what action label (or icon) to present for the enter key on virtual keyboards. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function EnterKeyHint(value: string) { return attr(\"enterkeyhint\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Describes elements which belongs to this one.\r\n  **/\r\nexport function HtmlFor(value: string) { return attr(\"htmlFor\", value, false, \"label\", \"output\"); }\r\n\r\n/**\r\n * Indicates the form that is the owner of the element.\r\n  **/\r\nexport function Form_attr(value: string) { return attr(\"form\", value, false, \"button\", \"fieldset\", \"input\", \"keygen\", \"label\", \"meter\", \"object\", \"output\", \"progress\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates the action of the element, overriding the action defined in the <form>.\r\n  **/\r\nexport function FormAction(value: string) { return attr(\"formaction\", value, false, \"input\", \"button\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\r\n  **/\r\nexport function FormEncType(value: string) { return attr(\"formenctype\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\r\n  **/\r\nexport function FormMethod(value: string) { return attr(\"formmethod\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\r\n  **/\r\nexport function FormNoValidate(value: boolean) { return attr(\"formnovalidate\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * If the button/input is a submit button (type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\r\n  **/\r\nexport function FormTarget(value: string) { return attr(\"formtarget\", value, false, \"button\", \"input\"); }\r\n\r\n/**\r\n * Width of the border to put around an `iframe` tag.\r\n */\r\nexport function FrameBorder(value: string | number | boolean) {\r\n    if (isBoolean(value)) {\r\n        value = value ? \"yes\" : \"no\";\r\n    }\r\n\r\n    return attr(\"frameborder\", value, false, \"iframe\");\r\n}\r\n\r\n/**\r\n * IDs of the <th> elements which applies to this element.\r\n  **/\r\nexport function Headers(value: string) { return attr(\"headers\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * Specifies the height of elements listed here. For all other elements, use the CSS height property.\r\n  **/\r\nexport function Height(value: number | string) { return attr(\"height\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\r\n  **/\r\nexport function Hidden(value: boolean) { return attr(\"hidden\", value, false); }\r\n\r\n/**\r\n * Indicates the lower bound of the upper range.\r\n  **/\r\nexport function High(value: number) { return attr(\"high\", value, false, \"meter\"); }\r\n\r\n/**\r\n * The URL of a linked resource.\r\n  **/\r\nexport function Href(value: string | URL | Blob) {\r\n    if (value instanceof Blob) {\r\n        value = URL.createObjectURL(value);\r\n    }\r\n\r\n    return attr(\"href\", unpackURL(value), false, \"a\", \"area\", \"base\", \"link\");\r\n}\r\n\r\n/**\r\n * Specifies the language of the linked resource.\r\n  **/\r\nexport function HrefLang(value: string) { return attr(\"hreflang\", value, false, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Defines a pragma directive.\r\n  **/\r\nexport function HttpEquiv(value: string) { return attr(\"httpEquiv\", value, false, \"meta\"); }\r\n\r\n/**\r\n * Specifies a picture which represents the command.\r\n  **/\r\nexport function Icon(value: string) { return attr(\"icon\", value, false, \"command\"); }\r\n\r\n/**\r\n * Often used with CSS to style a specific element. The value of this attribute must be unique.\r\n  **/\r\nexport function ID(value: string) { return attr(\"id\", value, false); }\r\n\r\n/**\r\n * Indicates the relative fetch priority for the resource.\r\n  **/\r\nexport function Importance(value: string) { return attr(\"importance\", value, false, \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\r\n  **/\r\nexport function InputMode(value: string) { return attr(\"inputmode\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\r\n  **/\r\nexport function Integrity(value: string) { return attr(\"integrity\", value, false, \"link\", \"script\"); }\r\n\r\n/**\r\n * This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it\u2019s the size specified in the attribute.\r\n  **/\r\nexport function IntrinsicSize(value: string) { return attr(\"intrinsicsize\", value, false, \"img\"); }\r\n\r\nexport function Is(value: string) { return attr(\"is\", value, false); }\r\n\r\n/**\r\n * Indicates that the image is part of a server-side image map.\r\n  **/\r\nexport function IsMap(value: boolean) { return attr(\"ismap\", value, false, \"img\"); }\r\n\r\n/**\r\n * The itemprop attribute\r\n  **/\r\nexport function ItemProp(value: string) { return attr(\"itemprop\", value, false); }\r\n\r\n/**\r\n * Specifies the type of key generated.\r\n  **/\r\nexport function KeyType(value: string) { return attr(\"keytype\", value, false, \"keygen\"); }\r\n\r\n/**\r\n * Specifies the kind of text track.\r\n  **/\r\nexport function Kind(value: string) { return attr(\"kind\", value, false, \"track\"); }\r\n\r\n/**\r\n * Specifies a user-readable title of the element.\r\n  **/\r\nexport function Label_attr(value: string) { return attr(\"label\", value, false, \"optgroup\", \"option\", \"track\"); }\r\n\r\n/**\r\n * Defines the language used in the element.\r\n  **/\r\nexport function Lang(value: string) { return attr(\"lang\", value, false); }\r\n\r\n/**\r\n * Defines the script language used in the element.\r\n  **/\r\nexport function Language(value: string) { return attr(\"language\", value, false, \"script\"); }\r\n\r\n/**\r\n * Identifies a list of pre-defined options to suggest to the user.\r\n  **/\r\nexport function List(value: string | HTMLDataListElement) {\r\n    if (value instanceof HTMLDataListElement) {\r\n        if (isNullOrUndefined(value.id)) {\r\n            value.id = stringRandom(12);\r\n        }\r\n\r\n        if (!value.isConnected) {\r\n            document.body.append(value);\r\n        }\r\n\r\n        value = value.id;\r\n    }\r\n\r\n    return attr(\"list\", value, true, \"input\");\r\n}\r\n\r\n/**\r\n * Indicates whether the media should start playing from the start when it's finished.\r\n  **/\r\nexport function Loop(value: boolean) { return attr(\"loop\", value, false, \"audio\", \"bgsound\", \"marquee\", \"video\"); }\r\n\r\n/**\r\n * Indicates the upper bound of the lower range.\r\n  **/\r\nexport function Low(value: number) { return attr(\"low\", value, false, \"meter\"); }\r\n\r\n/**\r\n * Indicates the maximum value allowed.\r\n  **/\r\nexport function Max(value: number) { return attr(\"max\", value, false, \"input\", \"meter\", \"progress\"); }\r\n\r\n/**\r\n * Defines the maximum number of characters allowed in the element.\r\n  **/\r\nexport function MaxLength(value: number) { return attr(\"maxlength\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Defines the minimum number of characters allowed in the element.\r\n  **/\r\nexport function MinLength(value: number) { return attr(\"minlength\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * Specifies a hint of the media for which the linked resource was designed.\r\n  **/\r\nexport function Media(value: string) { return attr(\"media\", value, false, \"a\", \"area\", \"link\", \"source\", \"style\"); }\r\n\r\n/**\r\n * Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\r\n  **/\r\nexport function Method(value: string) { return attr(\"method\", value, false, \"form\"); }\r\n\r\n/**\r\n * Indicates the minimum value allowed.\r\n  **/\r\nexport function Min(value: number) { return attr(\"min\", value, false, \"input\", \"meter\"); }\r\n\r\n/**\r\n * Indicates whether multiple values can be entered in an input of the type email or file.\r\n  **/\r\nexport function Multiple(value: boolean) { return attr(\"multiple\", value, false, \"input\", \"select\"); }\r\n\r\n/**\r\n * Indicates whether the audio will be initially silenced on page load.\r\n  **/\r\nexport function Muted(value: boolean) { return attr(\"muted\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Name of the element. For example used by the server to identify the fields in form submits.\r\n  **/\r\nexport function Name(value: string) { return attr(\"name\", value, false, \"button\", \"form\", \"fieldset\", \"iframe\", \"input\", \"keygen\", \"map\", \"meta\", \"object\", \"output\", \"param\", \"select\", \"slot\", \"textarea\"); }\r\n\r\n/**\r\n * This attribute indicates that the form shouldn't be validated when submitted.\r\n  **/\r\nexport function NoValidate(value: boolean) { return attr(\"novalidate\", value, false, \"form\"); }\r\n\r\n/**\r\n * Indicates whether the details will be shown on page load.\r\n  **/\r\nexport function Open(value: boolean) { return attr(\"open\", value, false, \"details\"); }\r\n\r\n/**\r\n * Indicates the optimal numeric value.\r\n  **/\r\nexport function Optimum(value: number) { return attr(\"optimum\", value, false, \"meter\"); }\r\n\r\n/**\r\n * Defines a regular expression which the element's value will be validated against.\r\n  **/\r\nexport function Pattern(value: string) { return attr(\"pattern\", value, false, \"input\"); }\r\n\r\n/**\r\n * The ping attribute specifies a space-separated list of URLs to be notified if a user follows the hyperlink.\r\n  **/\r\nexport function Ping(value: string) { return attr(\"ping\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Provides a hint to the user of what can be entered in the field.\r\n  **/\r\nexport function PlaceHolder(value: string) { return attr(\"placeholder\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * A URL indicating a poster frame to show until the user plays or seeks.\r\n  **/\r\nexport function Poster(value: string) { return attr(\"poster\", value, false, \"video\"); }\r\n\r\n/**\r\n * Indicates whether the whole resource, parts of it or nothing should be preloaded.\r\n  **/\r\nexport function Preload(value: boolean | string) { return attr(\"preload\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * Attempts to find an element under a given element.\r\n * @param root\r\n * @param selector\r\n */\r\nexport function Query(root: ParentNode, selector: string): HtmlAttr<\"query\", HTMLElement>;\r\n/**\r\n * Attempts to find an element in the document.\r\n * @param selector\r\n */\r\nexport function Query(selector: string): HtmlAttr<\"query\", HTMLElement>;\r\n/**\r\n * Attempts to find an element in the document.\r\n * @param rootOrSelector\r\n * @param selector\r\n */\r\nexport function Query(rootOrSelector: ParentNode | string, selector?: string) {\r\n    let root: ParentNode = null;\r\n    if (isString(rootOrSelector)) {\r\n        root = document;\r\n        selector = rootOrSelector;\r\n    }\r\n    else {\r\n        root = rootOrSelector;\r\n    }\r\n\r\n    const elem = root.querySelector(selector);\r\n    return attr(\"query\", elem, false);\r\n}\r\n\r\nexport function QueryAll<T extends Element>(root: ParentNode, selector: string): T[];\r\n/**\r\n * Attempts to find an element in the document.\r\n * @param selector\r\n */\r\nexport function QueryAll<T extends Element = HTMLElement>(selector: string): T[];\r\n/**\r\n * Attempts to find an element in the document.\r\n * @param rootOrSelector\r\n * @param selector\r\n */\r\nexport function QueryAll<T extends Element = HTMLElement>(rootOrSelector: ParentNode | string, selector?: string): T[] {\r\n    let root: ParentNode = null;\r\n    if (isString(rootOrSelector)) {\r\n        root = document;\r\n        selector = rootOrSelector;\r\n    }\r\n    else {\r\n        root = rootOrSelector;\r\n    }\r\n\r\n    const elems = root.querySelectorAll(selector);\r\n    return Array.from(elems) as T[];\r\n}\r\n\r\n/**\r\n * Indicates whether the element can be edited.\r\n  **/\r\nexport function ReadOnly(value: boolean) { return attr(\"readonly\", value, false, \"input\", \"textarea\"); }\r\n\r\n/**\r\n * The radiogroup attribute\r\n  **/\r\nexport function RadioGroup(value: string) { return attr(\"radiogroup\", value, false, \"command\"); }\r\n\r\n/**\r\n * Specifies which referrer is sent when fetching the resource.\r\n  **/\r\nexport function ReferrerPolicy(value: string) { return attr(\"referrerpolicy\", value, false, \"a\", \"area\", \"iframe\", \"img\", \"link\", \"script\"); }\r\n\r\n/**\r\n * Specifies the relationship of the target object to the link object.\r\n  **/\r\nexport function Rel(value: string) { return attr(\"rel\", value, false, \"a\", \"area\", \"link\"); }\r\n\r\n/**\r\n * Indicates whether this element is required to fill out or not.\r\n  **/\r\nexport function Required(value: boolean) { return attr(\"required\", value, false, \"input\", \"select\", \"textarea\"); }\r\n\r\n/**\r\n * Indicates whether the list should be displayed in a descending order instead of a ascending.\r\n  **/\r\nexport function Reversed(value: boolean) { return attr(\"reversed\", value, false, \"ol\"); }\r\n\r\n/**\r\n * Defines the number of rows in a text area.\r\n  **/\r\nexport function Role(value: string) { return attr(\"role\", value, false); }\r\n\r\n/**\r\n * The rows attribute\r\n  **/\r\nexport function Rows(value: number) { return attr(\"rows\", value, false, \"textarea\"); }\r\n\r\n/**\r\n * Defines the number of rows a table cell should span over.\r\n  **/\r\nexport function RowSpan(value: number) { return attr(\"rowspan\", value, false, \"td\", \"th\"); }\r\n\r\n/**\r\n * Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\r\n  **/\r\nexport function Sandbox(value: string) { return attr(\"sandbox\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * Defines the cells that the header test (defined in the th element) relates to.\r\n  **/\r\nexport function Scope(value: string) { return attr(\"scope\", value, false, \"th\"); }\r\n\r\n/**\r\n * The scoped attribute for `style` tags.\r\n  **/\r\nexport function Scoped(value: boolean) { return attr(\"scoped\", value, false, \"style\"); }\r\n\r\n/**\r\n * The scrolling attribute for `iframe` tags.\r\n  **/\r\nexport function Scrolling(value: boolean) { return attr(\"scrolling\", value ? \"yes\" : \"no\", false, \"iframe\"); }\r\n\r\n/**\r\n * Defines an `option` tag which will be selected on page load.\r\n  **/\r\nexport function Selected(value: boolean) { return attr(\"selected\", value, false, \"option\"); }\r\n\r\n/**\r\n * The shape attribute for `a` and `area` tags.\r\n  **/\r\nexport function Shape(value: string) { return attr(\"shape\", value, false, \"a\", \"area\"); }\r\n\r\n/**\r\n * Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\r\n  **/\r\nexport function Size(value: number) { return attr(\"size\", value, false, \"input\", \"select\"); }\r\n\r\n/**\r\n * Assigns a slot in a shadow DOM shadow tree to an element.\r\n  **/\r\nexport function Slot_attr(value: string) { return attr(\"slot\", value, false); }\r\n\r\n/**\r\n * The sizes attribute\r\n  **/\r\nexport function Sizes(value: string) { return attr(\"sizes\", value, false, \"link\", \"img\", \"source\"); }\r\n\r\n/**\r\n * The span attribute\r\n  **/\r\nexport function Span_attr(value: string) { return attr(\"span\", value, false, \"col\", \"colgroup\"); }\r\n\r\n/**\r\n * Indicates whether spell checking is allowed for the element.\r\n  **/\r\nexport function SpellCheck(value: boolean) { return attr(\"spellcheck\", value, false); }\r\n\r\nfunction unpackURL(value: string | URL) {\r\n    if (value instanceof URL) {\r\n        value = value.href;\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\n/**\r\n * The URL of the embeddable content.\r\n  **/\r\nexport function Src(value: string | URL) {\r\n    return attr(\"src\", unpackURL(value), false, \"audio\", \"embed\", \"iframe\", \"img\", \"input\", \"script\", \"source\", \"track\", \"video\");\r\n}\r\n\r\n/**\r\n * The srcdoc attribute\r\n  **/\r\nexport function SrcDoc(value: string) { return attr(\"srcdoc\", value, false, \"iframe\"); }\r\n\r\n/**\r\n * The srclang attribute\r\n  **/\r\nexport function SrcLang(value: string) { return attr(\"srclang\", value, false, \"track\"); }\r\n\r\n/**\r\n * A MediaStream object to use as a source for an HTML video or audio element\r\n  **/\r\nexport function SrcObject(value: MediaProvider) { return attr(\"srcObject\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * One or more responsive image candidates.\r\n  **/\r\nexport function SrcSet(value: string) { return attr(\"srcset\", value, false, \"img\", \"source\"); }\r\n\r\n/**\r\n * Defines the first number if other than 1.\r\n  **/\r\nexport function Start(value: number) { return attr(\"start\", value, false, \"ol\"); }\r\n\r\n/**\r\n * The step attribute\r\n  **/\r\nexport function Step(value: number) { return attr(\"step\", value, false, \"input\"); }\r\n\r\n/**\r\n * The summary attribute\r\n  **/\r\nexport function Summary_attr(value: string) { return attr(\"summary\", value, false, \"table\"); }\r\n\r\n/**\r\n * Overrides the browser's default tab order and follows the one specified instead.\r\n  **/\r\nexport function TabIndex(value: number) { return attr(\"tabindex\", value, false); }\r\n\r\n/**\r\n * Text to be displayed in a tooltip when hovering over the element.\r\n  **/\r\nexport function Title_attr(value: string) { return attr(\"title\", value, false); }\r\n\r\n/**\r\n * The target attribute\r\n  **/\r\nexport function Target(value: string) { return attr(\"target\", value, false, \"a\", \"area\", \"base\", \"form\"); }\r\n\r\n/**\r\n * Specify whether an element\u2019s attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.\r\n  **/\r\nexport function Translate(value: boolean) { return attr(\"translate\", value, false); }\r\n\r\n/**\r\n * Defines the type of the element.\r\n  **/\r\nexport function Type(value: string | MediaType) {\r\n    if (!isString(value)) {\r\n        value = value.value;\r\n    }\r\n    return attr(\"type\", value, false, \"button\", \"input\", \"command\", \"embed\", \"link\", \"object\", \"script\", \"source\", \"style\", \"menu\");\r\n}\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function Value(value: string | number) { return attr(\"value\", value, false, \"button\", \"data\", \"input\", \"li\", \"meter\", \"option\", \"progress\", \"param\"); }\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function ValueAsNumber(value: number) { return attr(\"valueAsNumber\", value, false, \"input\"); }\r\n\r\n/**\r\n * Defines a default value which will be displayed in the element on page load.\r\n  **/\r\nexport function ValueAsDate(value: Date) { return attr(\"valueAsDate\", value, false, \"input\"); }\r\n\r\n/**\r\n * setting the volume at which a media element plays.\r\n  **/\r\nexport function Volume(value: number) { return attr(\"volume\", value, false, \"audio\", \"video\"); }\r\n\r\n/**\r\n * The usemap attribute\r\n  **/\r\nexport function UseMap(value: boolean) { return attr(\"usemap\", value, false, \"img\", \"input\", \"object\"); }\r\n\r\n/**\r\n * For the elements listed here, this establishes the element's width.\r\n  **/\r\nexport function Width(value: number | string) { return attr(\"width\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\r\n\r\n/**\r\n * Indicates whether the text should be wrapped.\r\n  **/\r\nexport type HTMLTextAreaWrapValue =\r\n    | \"hard\"\r\n    | \"soft\"\r\n    | \"off\";\r\nexport function Wrap(value: HTMLTextAreaWrapValue) { return attr(\"wrap\", value, false, \"textarea\"); }", "import { isArray, isDefined, isNumber, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { IElementAppliable } from \"./tags\";\r\n\r\nfunction asInt(v: number | string): string {\r\n    return isNumber(v) ? v.toFixed(0) : v;\r\n}\r\n\r\nexport function perc(value: number): CssPercentage {\r\n    return `${value}%`;\r\n}\r\n\r\nexport function deg(value: number): CssAngle {\r\n    return `${value}deg`;\r\n}\r\n\r\nexport function rad(value: number): CssAngle {\r\n    return `${value}rad`;\r\n}\r\n\r\nexport function grad(value: number): CssAngle {\r\n    return `${value}grad`;\r\n}\r\n\r\nexport function turn(value: number): CssAngle {\r\n    return `${value}turn`;\r\n}\r\n\r\nexport function cap(value: number): CssFontRelativeLength {\r\n    return `${value}cap`;\r\n}\r\n\r\nexport function ch(value: number): CssFontRelativeLength {\r\n    return `${value}ch`;\r\n}\r\n\r\nexport function em(value: number): CssFontRelativeLength {\r\n    return `${value}em`;\r\n}\r\n\r\nexport function ex(value: number): CssFontRelativeLength {\r\n    return `${value}ex`;\r\n}\r\n\r\nexport function ic(value: number): CssFontRelativeLength {\r\n    return `${value}ic`;\r\n}\r\n\r\nexport function lh(value: number): CssFontRelativeLength {\r\n    return `${value}lh`;\r\n}\r\n\r\nexport function rem(value: number): CssFontRelativeLength {\r\n    return `${value}rem`;\r\n}\r\n\r\nexport function rlh(value: number): CssFontRelativeLength {\r\n    return `${value}rlh`;\r\n}\r\n\r\nexport function vh(value: number): CssViewportPercentageLength {\r\n    return `${value}vh`;\r\n}\r\n\r\nexport function vw(value: number): CssViewportPercentageLength {\r\n    return `${value}vw`;\r\n}\r\n\r\nexport function vi(value: number): CssViewportPercentageLength {\r\n    return `${value}vi`;\r\n}\r\n\r\nexport function vb(value: number): CssViewportPercentageLength {\r\n    return `${value}vb`;\r\n}\r\n\r\nexport function vmin(value: number): CssViewportPercentageLength {\r\n    return `${value}vmin`;\r\n}\r\n\r\nexport function vmax(value: number): CssViewportPercentageLength {\r\n    return `${value}vmax`;\r\n}\r\n\r\nexport function px(value: number): CssAbsoluteLength {\r\n    return `${value}px`;\r\n}\r\n\r\nexport function cm(value: number): CssAbsoluteLength {\r\n    return `${value}cm`;\r\n}\r\n\r\nexport function mm(value: number): CssAbsoluteLength {\r\n    return `${value}mm`;\r\n}\r\n\r\nexport function Q(value: number): CssAbsoluteLength {\r\n    return `${value}Q`;\r\n}\r\n\r\nexport function inch(value: number): CssAbsoluteLength {\r\n    return `${value}in`;\r\n}\r\n\r\nexport function pc(value: number): CssAbsoluteLength {\r\n    return `${value}pc`;\r\n}\r\n\r\nexport function pt(value: number): CssAbsoluteLength {\r\n    return `${value}pt`;\r\n}\r\n\r\nexport function fr(value: number): CssGridFlexValue {\r\n    return `${value}fr`;\r\n}\r\n\r\nexport function hash(r: HexDigit, g: HexDigit, b: HexDigit, a?: HexDigit): CssColorHashValue;\r\nexport function hash(r: HexNumber, g: HexNumber, b: HexNumber, a?: HexNumber): CssColorHashValue;\r\nexport function hash(r: string, g: string, b: string, a?: string): CssColorHashValue {\r\n    if (isDefined(a)) {\r\n        return `#${r}${g}${b}${a}`;\r\n    }\r\n    else {\r\n        return `#${r}${g}${b}`;\r\n    }\r\n}\r\n\r\nexport function rgb(red: number, green: number, blue: number, alpha?: number): CssColorRGBValue;\r\nexport function rgb(...v: number[]): CssColorRGBValue {\r\n    return `rgb(${v.join(\", \")})`;\r\n}\r\n\r\nexport function rgba(red: number, green: number, blue: number, alpha: number): CssColorRGBValue;\r\nexport function rgba(...v: number[]): CssColorRGBValue {\r\n    return `rgba(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hsl(hue: CssAngle, saturation: CssPercentage, lightness: CssPercentage, alpha?: CssAlpha): CssColorHSLValue;\r\nexport function hsl(...v: (string | number)[]): CssColorHSLValue {\r\n    return `hsl(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hsla(hue: CssAngle, saturation: CssPercentage, lightness: CssPercentage, alpha: CssAlpha): CssColorHSLValue;\r\nexport function hsla(...v: (string | number)[]): CssColorHSLValue {\r\n    return `hsla(${v.join(\", \")})`;\r\n}\r\n\r\nexport function hwb(hue: CssAngle, whiteness: CssPercentage, blackness: CssPercentage, alpha?: CssAlpha): CssColorHWBValue {\r\n    if (isDefined(alpha)) {\r\n        return `hwb(${hue} ${whiteness} ${blackness} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `hwb(${hue} ${whiteness} ${blackness})`;\r\n    }\r\n}\r\n\r\nexport function lch(lightness: CssPercentage, chroma: number, hue: CssAngle, alpha?: CssAlpha): CssColorLCHValue {\r\n    if (isDefined(alpha)) {\r\n        return `lch(${lightness} ${chroma} ${hue} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `lch(${lightness} ${chroma} ${hue})`;\r\n    }\r\n}\r\n\r\nexport function lab(lightness: CssPercentage, a: number, b: number, alpha?: CssAlpha): CssColorLabValue {\r\n    if (isDefined(alpha)) {\r\n        return `lab(${lightness} ${a} ${b} / ${alpha})`;\r\n    }\r\n    else {\r\n        return `lab(${lightness} ${a} ${b})`;\r\n    }\r\n}\r\n\r\nexport function matrix(a: number, b: number, c: number, d: number, tx: number, ty: number): CssTransformMatrixValue {\r\n    return `matrix(${a}, ${b}, ${c}, ${d}, ${tx}, ${ty})`\r\n}\r\n\r\nexport function matrix3d(\r\n    a1: number, b1: number, c1: number, d1: number,\r\n    a2: number, b2: number, c2: number, d2: number,\r\n    a3: number, b3: number, c3: number, d3: number,\r\n    a4: number, b4: number, c4: number, d4: number): CssTransformMatrix3DValue {\r\n    return `matrix3d(${a1}, ${b1}, ${c1}, ${d1}, ${a2}, ${b2}, ${c2}, ${d2}, ${a3}, ${b3}, ${c3}, ${d3}, ${a4}, ${b4}, ${c4}, ${d4})`;\r\n}\r\n\r\nexport function perspectiv(v: CssLength | \"none\"): CssTransformPerspectiveValue {\r\n    return `perspective(${v})`;\r\n}\r\n\r\nexport function rotate(a: CssAngle): CssTransformRotate {\r\n    return `rotate(${a})`;\r\n}\r\n\r\nexport function rotate3d(x: number, y: number, z: number, a: CssAngle): CSSTransformRotate3D {\r\n    return `rotate3d(${x}, ${y}, ${z}, ${a})`;\r\n}\r\n\r\nexport function rotateX(a: CssAngle): CssTransformRotateX {\r\n    return `rotateX(${a})`;\r\n}\r\n\r\nexport function rotateY(a: CssAngle): CssTransformRotateY {\r\n    return `rotateY(${a})`;\r\n}\r\n\r\nexport function rotateZ(a: CssAngle): CssTransformRotateZ {\r\n    return `rotateZ(${a})`;\r\n}\r\n\r\nexport function translate(x: CssLengthPercentage, y: CssLengthPercentage): CssTransformTranslate {\r\n    return `translate(${x}, ${y})`;\r\n}\r\n\r\nexport function translate3d(x: CssLengthPercentage, y: CssLengthPercentage, z: CssLengthPercentage): CSSTransformTranslate3D {\r\n    return `translate3d(${x}, ${y}, ${z})`;\r\n}\r\n\r\nexport function translateX(x: CssLengthPercentage): CssTransformTranslateX {\r\n    return `translateX(${x})`;\r\n}\r\n\r\nexport function translateY(y: CssLengthPercentage): CssTransformTranslateY {\r\n    return `translateY(${y})`;\r\n}\r\n\r\nexport function translateZ(z: CssLengthPercentage): CssTransformTranslateZ {\r\n    return `translateZ(${z})`;\r\n}\r\n\r\nexport function scale(x: number, y: number): CssTransformScale {\r\n    return `scale(${x}, ${y})`;\r\n}\r\n\r\nexport function scale3d(x: number, y: number, z: number): CSSTransformScale3D {\r\n    return `scale3d(${x}, ${y}, ${z})`;\r\n}\r\n\r\nexport function scaleX(x: number): CssTransformScaleX {\r\n    return `scaleX(${x})`;\r\n}\r\n\r\nexport function scaleY(y: number): CssTransformScaleY {\r\n    return `scaleY(${y})`;\r\n}\r\n\r\nexport function scaleZ(z: number): CssTransformScaleZ {\r\n    return `scaleZ(${z})`;\r\n}\r\n\r\nexport function skew(x: CssAngle, y: CssAngle): CssTransformSkew {\r\n    return `skew(${x}, ${y})`;\r\n}\r\n\r\nexport function skewX(x: CssAngle): CssTransformSkewX {\r\n    return `skewX(${x})`;\r\n}\r\n\r\nexport function skewY(y: CssAngle): CssTransformSkewY {\r\n    return `skewY(${y})`;\r\n}\r\n\r\nexport function repeat(count: number | \"auto-fill\" | \"auto-fit\", expr: string): CssGridTemplateTrackRepeatValue {\r\n    return `repeat(${count}, ${expr})`;\r\n}\r\n\r\nexport function fitContent(len: CssLengthPercentage): CssGridTemplateTrackFitContentValue {\r\n    return `fit-content(${len})`;\r\n}\r\n\r\nexport function minMax(min: CssGridTemplateTrackSize, max: CssGridTemplateTrackSize): CssGridTemplateTrackMinMaxValue {\r\n    return `minmax(${min}, ${max})`;\r\n}\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFonts() {\r\n    return \"ui-monospace, 'Droid Sans Mono', 'Cascadia Mono', 'Segoe UI Mono', 'Ubuntu Mono', 'Roboto Mono', Menlo, Monaco, Consolas, monospace\";\r\n}\r\n\r\n/**\r\n * A selection of fonts for preferred monospace rendering.\r\n **/\r\nexport function getMonospaceFamily() {\r\n    return fontFamily(getMonospaceFonts());\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFonts() {\r\n    return \"system-ui, -apple-system, '.SFNSText-Regular', 'San Francisco', 'Segoe UI', 'Ubuntu', 'Roboto', 'Noto Sans' 'Droid Sans', sans-serif\";\r\n}\r\n\r\n/**\r\n * A selection of fonts that should match whatever the user's operating system normally uses.\r\n **/\r\nexport function getSystemFamily() {\r\n    return fontFamily(getSystemFonts());\r\n}\r\n\r\n/**\r\n * A selection of serif fonts.\r\n **/\r\nexport function getSerifFonts() {\r\n    return \"Georgia, Cambria, 'Times New Roman', Times, serif\";\r\n}\r\n\r\nexport function getSerifFamily() {\r\n    return fontFamily(getSerifFonts());\r\n}\r\n\r\nexport type CssPropName = Exclude<keyof CSSStyleDeclaration,\r\n    \"length\"\r\n    | \"parentRule\"\r\n    | \"getPropertyPriority\"\r\n    | \"getPropertyValue\"\r\n    | \"item\"\r\n    | \"removeProperty\"\r\n    | \"setProperty\"> & string;\r\n\r\nexport class Prop {\r\n    constructor(private readonly _value: string) {\r\n\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    toString() {\r\n        return this.value;\r\n    }\r\n}\r\n\r\nexport class PropSet<T extends Prop = Prop> {\r\n    constructor(\r\n        private readonly pre: string,\r\n        private readonly props: (T | PropSet<T>)[],\r\n        private readonly post: string) {\r\n\r\n    }\r\n\r\n    get value(): string {\r\n        return this.pre\r\n            + this.props.map(p => p.toString()).join(\"\\n\")\r\n            + this.post;\r\n    }\r\n\r\n    toString() {\r\n        return this.value;\r\n    }\r\n\r\n    applyToSheet(sheet: CSSStyleSheet) {\r\n        sheet.insertRule(this.toString(), sheet.cssRules.length);\r\n    }\r\n}\r\n\r\nclass KeyValueProp extends Prop {\r\n    constructor(\r\n        private readonly _name: string,\r\n        private readonly sep: string,\r\n        value: string) {\r\n        super(value);\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    override toString() {\r\n        return this.name\r\n            + this.sep\r\n            + this.value\r\n            + \";\";\r\n    }\r\n}\r\n\r\nclass SelectorPropSet<T extends Prop = Prop> extends PropSet<T> {\r\n    constructor(selector: string, props: (T | PropSet<T>)[]) {\r\n        super(selector + \" {\\n\", props, \"\\n}\\n\");\r\n    }\r\n}\r\n\r\nclass CssDeclareProp\r\n    extends KeyValueProp {\r\n    constructor(key: string, value: string) {\r\n        super(key, \": \", value);\r\n    }\r\n}\r\n\r\nexport class CssElementStyleProp<K extends CssPropName = CssPropName>\r\n    extends CssDeclareProp\r\n    implements IElementAppliable {\r\n    private priority = \"\";\r\n\r\n    constructor(\r\n        public readonly key: K,\r\n        value: string | number) {\r\n        super(key.replace(/[A-Z]/g, (m) => `-${m.toLocaleLowerCase()}`), value.toString());\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value on an HTMLElement\r\n     * @param elem - the element on which to set the attribute.\r\n     */\r\n    applyToElement(elem: HTMLElement) {\r\n        (elem.style as any)[this.key] = this.value + this.priority;\r\n    }\r\n\r\n    important(): this {\r\n        this.priority = \" !important\";\r\n        return this;\r\n    }\r\n\r\n    override get value(): string {\r\n        return super.value + this.priority;\r\n    }\r\n}\r\n\r\nexport function isCssElementStyleProp(obj: any): obj is CssElementStyleProp {\r\n    return obj instanceof CssElementStyleProp;\r\n}\r\n\r\nclass CssElementStylePropSet extends SelectorPropSet<CssElementStyleProp> {\r\n    constructor(selector: string, props: CssElementStyleProp[]) {\r\n        super(selector, props);\r\n    }\r\n}\r\n\r\nexport function rule(selector: string, ...props: CssElementStyleProp[]) {\r\n    return new CssElementStylePropSet(selector, props);\r\n}\r\n\r\nexport function alignItems(v: CssGlobalValue | CssJustifyAlignValue) { return new CssElementStyleProp(\"alignItems\", v); }\r\n\r\nexport function alignContent(v: CssGlobalValue | CssJustifyAlignContentValue) { return new CssElementStyleProp(\"alignContent\", v); }\r\n\r\nexport function alignSelf(v: CssGlobalValue | CssJustifyAlignSelfValue) { return new CssElementStyleProp(\"alignSelf\", v); }\r\n\r\nexport function all(v: CssGlobalValue) { return new CssElementStyleProp(\"all\", v); }\r\n\r\nexport function alignmentBaseline(v: CssAlignmentBaselineValue) { return new CssElementStyleProp(\"alignmentBaseline\", v); }\r\n\r\nexport function animationDelay(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationDelay(...v: CssTimeValue[]): CssElementStyleProp;\r\nexport function animationDelay(...v: string[]) { return new CssElementStyleProp(\"animationDelay\", v.join(\", \")); }\r\n\r\nexport function animationDuration(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationDuration(...v: CssTimeValue[]): CssElementStyleProp;\r\nexport function animationDuration(...v: string[]) { return new CssElementStyleProp(\"animationDuration\", v.join(\", \")); }\r\n\r\nexport function animationDirection(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationDirection(...v: CssAnimationDirectionValue[]): CssElementStyleProp;\r\nexport function animationDirection(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"animationDirection\", v.join(\", \")); }\r\n\r\nexport function animationFillMode(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationFillMode(...v: CssAnimationFillModeValue[]): CssElementStyleProp;\r\nexport function animationFillMode(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"animationFillMode\", v.join(\", \")); }\r\n\r\nexport function animationIterationCount(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationIterationCount(...v: CssAnimationIterationCountValue[]): CssElementStyleProp;\r\nexport function animationIterationCount(...v: (number | string)[]): CssElementStyleProp { return new CssElementStyleProp(\"animationIterationCount\", v.join(\", \")); }\r\n\r\nexport function animationName(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationName(...v: string[]): CssElementStyleProp;\r\nexport function animationName(...v: string[]) { return new CssElementStyleProp(\"animationName\", v.join(\", \")); }\r\n\r\nexport function animationPlayState(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationPlayState(...v: CssAnimationPlayStateValue[]): CssElementStyleProp;\r\nexport function animationPlayState(...v: string[]) { return new CssElementStyleProp(\"animationPlayState\", v.join(\", \")); }\r\n\r\nexport function animationTimingFunction(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animationTimingFunction(...v: CssAnimationTimingFunctionValue[]): CssElementStyleProp;\r\nexport function animationTimingFunction(...v: string[]) { return new CssElementStyleProp(\"animationTimingFunction\", v.join(\" \")); }\r\n\r\nexport function animation(v: CssGlobalValue): CssElementStyleProp;\r\nexport function animation(...v: (string | number)[]): CssElementStyleProp;\r\nexport function animation(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"animation\", v.join(\" \")); }\r\n\r\nexport function appearance(v: CssGlobalValue | CssAppearanceValue) { return new CssElementStyleProp(\"appearance\", v); }\r\n\r\nexport function backdropFilter(v: \"none\" | CssGlobalValue): CssElementStyleProp;\r\nexport function backdropFilter(...v: CssFilterFunction[]): CssElementStyleProp;\r\nexport function backdropFilter(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backdropFilter\" as any, v.join(\" \")); }\r\n\r\nexport function backfaceVisibility(v: CssGlobalValue | CssBackfaceVisibilityValue) { return new CssElementStyleProp(\"backfaceVisibility\", v); }\r\n\r\nexport function backgroundAttachment(v: CssGlobalValue | CssBackgroundAttachmentValue) { return new CssElementStyleProp(\"backgroundAttachment\", v); }\r\n\r\nexport function backgroundBlendMode(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundBlendMode(...v: CssBlendModeValue[]): CssElementStyleProp;\r\nexport function backgroundBlendMode(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundBlendMode\", v.join(\", \")); }\r\n\r\nexport function backgroundClip(v: CssGlobalValue | CssClipValue): CssElementStyleProp { return new CssElementStyleProp(\"backgroundClip\", v); }\r\n\r\nexport function backgroundColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"backgroundColor\", v); }\r\n\r\nexport function backgroundImage(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundImage(...v: CssImage[]): CssElementStyleProp;\r\nexport function backgroundImage(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundImage\", v.join(\", \")); }\r\n\r\nexport function backgroundOrigin(v: CssGlobalValue | CssBoxType): CssElementStyleProp { return new CssElementStyleProp(\"backgroundOrigin\", v); }\r\n\r\nexport function backgroundPosition(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundPosition(v: CssBackgroundPositionValue): CssElementStyleProp;\r\nexport function backgroundPosition(x: CssLengthPercentage, y: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, y: CssBackgroundPositionVerticalValue): CssElementStyleProp;\r\nexport function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, x: CssBackgroundPositionHorizontalValue): CssElementStyleProp;\r\nexport function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage, y: CssBackgroundPositionVerticalKeyword): CssElementStyleProp;\r\nexport function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage, x: CssBackgroundPositionHorizontalKeyword): CssElementStyleProp;\r\nexport function backgroundPosition(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage, y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage, x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPosition(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPosition\", v.join(\" \")); }\r\n\r\nexport function backgroundPositionX(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundPositionX(x: CssBackgroundPositionHorizontalValue): CssElementStyleProp;\r\nexport function backgroundPositionX(x: CssBackgroundPositionHorizontalKeyword, xOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPositionX(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPositionX\", v.join(\" \")); }\r\n\r\nexport function backgroundPositionY(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundPositionY(y: CssBackgroundPositionVerticalValue): CssElementStyleProp;\r\nexport function backgroundPositionY(y: CssBackgroundPositionVerticalKeyword, yOffset: CssLengthPercentage): CssElementStyleProp;\r\nexport function backgroundPositionY(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundPositionY\", v.join(\" \")); }\r\n\r\nexport function backgroundRepeat(v: CssGlobalValue): CssElementStyleProp;\r\nexport function backgroundRepeat(v: CssBackgroundRepeatValue): CssElementStyleProp;\r\nexport function backgroundRepeat(x: CssBackgroundRepeat, y: CssBackgroundRepeat): CssElementStyleProp;\r\nexport function backgroundRepeat(...v: string[]) { return new CssElementStyleProp(\"backgroundRepeat\", v.join(\" \")); }\r\n\r\nexport function backgroundSize(v: CssGlobalValue | CssBackgroundSizeSingleValue): CssElementStyleProp;\r\nexport function backgroundSize(x: CssBackgroundSizeValue, y: CssBackgroundSizeValue): CssElementStyleProp;\r\nexport function backgroundSize(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"backgroundSize\", v.join(\" \")); }\r\n\r\nexport function background(v: CssGlobalValue): CssElementStyleProp;\r\nexport function background(...v: string[]): CssElementStyleProp;\r\nexport function background(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"background\", v.join(\", \")); }\r\n\r\nexport function baselineShift(v: string) { return new CssElementStyleProp(\"baselineShift\", v); }\r\n\r\nexport function blockSize(v: CssGlobalValue | CssSizePropertyValue) { return new CssElementStyleProp(\"blockSize\", v); }\r\n\r\nexport function border(v: string | 0) { return new CssElementStyleProp(\"border\", v); }\r\n\r\nexport function borderBlockEnd(v: string) { return new CssElementStyleProp(\"borderBlockEnd\", v); }\r\n\r\nexport function borderBlockEndColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderBlockEndColor\", v); }\r\n\r\nexport function borderBlockEndStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderBlockEndStyle\", v); }\r\n\r\nexport function borderBlockEndWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBlockEndWidth\", v); }\r\n\r\nexport function borderBlockStart(v: string) { return new CssElementStyleProp(\"borderBlockStart\", v); }\r\n\r\nexport function borderBlockStartColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderBlockStartColor\", v); }\r\n\r\nexport function borderBlockStartStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderBlockStartStyle\", v); }\r\n\r\nexport function borderBlockStartWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBlockStartWidth\", v); }\r\n\r\nexport function borderBottom(v: string) { return new CssElementStyleProp(\"borderBottom\", v); }\r\n\r\nexport function borderBottomColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderBottomColor\", v); }\r\n\r\nexport function borderBottomLeftRadius(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(v: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomLeftRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderBottomLeftRadius\", v.join(\" \")); }\r\n\r\nexport function borderBottomRightRadius(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderBottomRightRadius(v: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomRightRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderBottomRightRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderBottomRightRadius\", v.join(\" \")); }\r\n\r\nexport function borderBottomStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderBottomStyle\", v); }\r\n\r\nexport function borderBottomWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderBottomWidth\", v); }\r\n\r\nexport function borderCollapse(v: CssGlobalValue | CssBorderCollapseValue) { return new CssElementStyleProp(\"borderCollapse\", v); }\r\n\r\nexport function borderColor(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderColor(all: CssColorValue): CssElementStyleProp;\r\nexport function borderColor(vertical: CssColorValue, horizontal: CssColorValue): CssElementStyleProp;\r\nexport function borderColor(top: CssColorValue, horizontal: CssColorValue, bottom: CssColorValue): CssElementStyleProp;\r\nexport function borderColor(top: CssColorValue, right: CssColorValue, bottom: CssColorValue, left: CssColorValue): CssElementStyleProp;\r\nexport function borderColor(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderColor\", v.join(\" \")); }\r\n\r\nexport function borderImage(v: string) { return new CssElementStyleProp(\"borderImage\", v); }\r\n\r\nexport function borderImageOutset(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderImageOutset(all: CssLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(vertical: CssLength | number, horizontal: CssLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(top: CssLength | number, horizontal: CssLength | number, bottom: CssLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(top: CssLength | number, right: CssLength | number, bottom: CssLength | number, left: CssLength | number): CssElementStyleProp;\r\nexport function borderImageOutset(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageOutset\", v.join(\" \")); }\r\n\r\nexport function borderImageRepeat(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderImageRepeat(all: CssBorderRepeatValue): CssElementStyleProp;\r\nexport function borderImageRepeat(vertical: CssBorderRepeatValue, horizontal: CssBorderRepeatValue): CssElementStyleProp;\r\nexport function borderImageRepeat(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageRepeat\", v.join(\" \")); }\r\n\r\nexport function borderImageSlice(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderImageSlice(all: CssLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(vertical: CssLengthPercentage | \"fill\", horizontal: CssLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(top: CssLengthPercentage | \"fill\", horizontal: CssLengthPercentage | \"fill\", bottom: CssLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(top: CssLengthPercentage | \"fill\", right: CssLengthPercentage | \"fill\", bottom: CssLengthPercentage | \"fill\", left: CssLengthPercentage | \"fill\"): CssElementStyleProp;\r\nexport function borderImageSlice(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageSlice\", v.join(\" \")); }\r\n\r\nexport function borderImageSource(v: CssGlobalValue | CssImage | \"none\") { return new CssElementStyleProp(\"borderImageSource\", v); }\r\n\r\nexport function borderImageWidth(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderImageWidth(v: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(vertical: CssLengthPercentage | \"auto\", horizontal: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(top: CssLengthPercentage | \"auto\", horizontal: CssLengthPercentage | \"auto\", bottom: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(top: CssLengthPercentage | \"auto\", right: CssLengthPercentage | \"auto\", bottom: CssLengthPercentage | \"auto\", left: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function borderImageWidth(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"borderImageWidth\", v.join(\" \")); }\r\n\r\nexport function borderInlineEnd(v: string) { return new CssElementStyleProp(\"borderInlineEnd\", v); }\r\n\r\nexport function borderInlineEndColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderInlineEndColor\", v); }\r\n\r\nexport function borderInlineEndStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderInlineEndStyle\", v); }\r\n\r\nexport function borderInlineEndWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderInlineEndWidth\", v); }\r\n\r\nexport function borderInlineStart(v: string) { return new CssElementStyleProp(\"borderInlineStart\", v); }\r\n\r\nexport function borderInlineStartColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderInlineStartColor\", v); }\r\n\r\nexport function borderInlineStartStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderInlineStartStyle\", v); }\r\n\r\nexport function borderInlineStartWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderInlineStartWidth\", v); }\r\n\r\nexport function borderLeft(v: string) { return new CssElementStyleProp(\"borderLeft\", v); }\r\n\r\nexport function borderLeftColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderLeftColor\", v); }\r\n\r\nexport function borderLeftStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderLeftStyle\", v); }\r\n\r\nexport function borderLeftWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderLeftWidth\", v); }\r\n\r\nexport function borderRadius(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderRadius(all: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(all: [CssLengthPercentage, CssLengthPercentage]): CssElementStyleProp;\r\nexport function borderRadius(topLeftBottomRight: CssLengthPercentage, topRightBottomLeft: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(topLeft: CssLengthPercentage, topRightBottomLeft: CssLengthPercentage, bottomRight: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(topLeft: CssLengthPercentage, topRight: CssLengthPercentage, bottomRight: CssLengthPercentage, bottomLeft: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderRadius(...v: (string | number | (string | number)[])[]): CssElementStyleProp {\r\n    let value: string = null;\r\n    if (v.length === 0) {\r\n        value = \"\";\r\n    }\r\n    else if (isArray(v[0]) && isArray(v[1])) {\r\n        const left = v[0].join(\" \");\r\n        const right = v[1].join(\" \");\r\n        value = `${left} / ${right}`;\r\n    }\r\n    else {\r\n        value = v.join(\" \");\r\n    }\r\n    return new CssElementStyleProp(\"borderRadius\", value);\r\n}\r\n\r\nexport function borderRight(v: string) { return new CssElementStyleProp(\"borderRight\", v); }\r\n\r\nexport function borderRightColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderRightColor\", v); }\r\n\r\nexport function borderRightStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderRightStyle\", v); }\r\n\r\nexport function borderRightWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderRightWidth\", v); }\r\n\r\nexport function borderSpacing(v: string) { return new CssElementStyleProp(\"borderSpacing\", v); }\r\n\r\nexport function borderStyle(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderStyle(all: CssBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(vertical: CssBorderStyleValue, horizontal: CssBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(top: CssBorderStyleValue, horizontal: CssBorderStyleValue, bottom: CssBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(top: CssBorderStyleValue, right: CssBorderStyleValue, bottom: CssBorderStyleValue, left: CssBorderStyleValue): CssElementStyleProp;\r\nexport function borderStyle(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"borderStyle\", v.join(\" \")); }\r\n\r\nexport function borderTop(v: string) { return new CssElementStyleProp(\"borderTop\", v); }\r\n\r\nexport function borderTopColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"borderTopColor\", v); }\r\n\r\nexport function borderTopLeftRadius(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderTopLeftRadius(v: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderTopLeftRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderTopLeftRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderTopLeftRadius\", v.join(\" \")); }\r\n\r\nexport function borderTopRightRadius(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderTopRightRadius(v: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderTopRightRadius(major: CssLengthPercentage, minor: CssLengthPercentage): CssElementStyleProp;\r\nexport function borderTopRightRadius(...v: (string | number)[]) { return new CssElementStyleProp(\"borderTopRightRadius\", v.join(\" \")); }\r\n\r\nexport function borderTopStyle(v: CssGlobalValue | CssBorderStyleValue) { return new CssElementStyleProp(\"borderTopStyle\", v); }\r\n\r\nexport function borderTopWidth(v: CssGlobalValue | CssLengthPercentage | CssWidthKeyword | \"auto\") { return new CssElementStyleProp(\"borderTopWidth\", v); }\r\n\r\nexport function borderWidth(v: CssGlobalValue): CssElementStyleProp;\r\nexport function borderWidth(all: CssLengthPercentage | CssWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(vert: CssLengthPercentage | CssWidthKeyword | \"auto\", horiz: CssLengthPercentage | CssWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(top: CssLengthPercentage | CssWidthKeyword | \"auto\", horiz: CssLengthPercentage | CssWidthKeyword | \"auto\", bottom: CssLengthPercentage | CssWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(top: CssLengthPercentage | CssWidthKeyword | \"auto\", right: CssLengthPercentage | CssWidthKeyword | \"auto\", bottom: CssLengthPercentage | CssWidthKeyword | \"auto\", left: CssLengthPercentage | CssWidthKeyword | \"auto\"): CssElementStyleProp;\r\nexport function borderWidth(...v: (string | number)[]) { return new CssElementStyleProp(\"borderWidth\", v.join(\" \")); }\r\n\r\nexport function bottom(v: CssGlobalValue | CssElementPositionValue) { return new CssElementStyleProp(\"bottom\", v); }\r\n\r\nexport function boxShadow(v: string) { return new CssElementStyleProp(\"boxShadow\", v); }\r\n\r\nexport function boxSizing(v: string) { return new CssElementStyleProp(\"boxSizing\", v); }\r\n\r\nexport function breakAfter(v: string) { return new CssElementStyleProp(\"breakAfter\", v); }\r\n\r\nexport function breakBefore(v: string) { return new CssElementStyleProp(\"breakBefore\", v); }\r\n\r\nexport function breakInside(v: string) { return new CssElementStyleProp(\"breakInside\", v); }\r\n\r\nexport function captionSide(v: string) { return new CssElementStyleProp(\"captionSide\", v); }\r\n\r\nexport function caretColor(v: string) { return new CssElementStyleProp(\"caretColor\", v); }\r\n\r\nexport function clear(v: string) { return new CssElementStyleProp(\"clear\", v); }\r\n\r\nexport function clip(v: string) { return new CssElementStyleProp(\"clip\", v); }\r\n\r\nexport function clipPath(v: string) { return new CssElementStyleProp(\"clipPath\", v); }\r\n\r\nexport function clipRule(v: string) { return new CssElementStyleProp(\"clipRule\", v); }\r\n\r\nexport function color(v: CssGlobalValue): CssElementStyleProp;\r\nexport function color(v: CssColorValue): CssElementStyleProp;\r\nexport function color(v: string): CssElementStyleProp { return new CssElementStyleProp(\"color\", v); }\r\n\r\nexport function colorInterpolation(v: string) { return new CssElementStyleProp(\"colorInterpolation\", v); }\r\n\r\nexport function colorInterpolationFilters(v: string) { return new CssElementStyleProp(\"colorInterpolationFilters\", v); }\r\n\r\nexport function colorScheme(v: string) { return new CssElementStyleProp(\"colorScheme\", v); }\r\n\r\nexport function columnCount(v: string) { return new CssElementStyleProp(\"columnCount\", v); }\r\n\r\nexport function columnFill(v: string) { return new CssElementStyleProp(\"columnFill\", v); }\r\n\r\nexport function columnGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp { return new CssElementStyleProp(\"columnGap\", v); }\r\nexport function gridColumnGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement) { return new CssElementStyleProp(\"gridColumnGap\", v); }\r\n\r\nexport function columnRule(v: string) { return new CssElementStyleProp(\"columnRule\", v); }\r\n\r\nexport function columnRuleColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"columnRuleColor\", v); }\r\n\r\nexport function columnRuleStyle(v: string) { return new CssElementStyleProp(\"columnRuleStyle\", v); }\r\n\r\nexport function columnRuleWidth(v: CssGlobalValue | CssLength | CssWidthKeyword) { return new CssElementStyleProp(\"columnRuleWidth\", v); }\r\n\r\nexport function columnSpan(v: string) { return new CssElementStyleProp(\"columnSpan\", v); }\r\n\r\nexport function columnWidth(v: CssGlobalValue | CssLength | \"auto\") { return new CssElementStyleProp(\"columnWidth\", v); }\r\n\r\nexport function columns(v: string) { return new CssElementStyleProp(\"columns\", v); }\r\n\r\nexport function contain(v: string) { return new CssElementStyleProp(\"contain\", v); }\r\n\r\nexport function counterIncrement(v: string) { return new CssElementStyleProp(\"counterIncrement\", v); }\r\n\r\nexport function counterReset(v: string) { return new CssElementStyleProp(\"counterReset\", v); }\r\n\r\nexport function cursor(v: CssGlobalValue | CssCursorValue) { return new CssElementStyleProp(\"cursor\", v); }\r\n\r\nexport function direction(v: CssGlobalValue | CssDirectionValue) { return new CssElementStyleProp(\"direction\", v); }\r\n\r\nexport function display(v: CssGlobalValue | CssDisplayValue) { return new CssElementStyleProp(\"display\", v); }\r\n\r\nexport function dominantBaseline(v: string) { return new CssElementStyleProp(\"dominantBaseline\", v); }\r\n\r\nexport function emptyCells(v: string) { return new CssElementStyleProp(\"emptyCells\", v); }\r\n\r\nexport function fill(v: string) { return new CssElementStyleProp(\"fill\", v); }\r\n\r\nexport function fillOpacity(v: string) { return new CssElementStyleProp(\"fillOpacity\", v); }\r\n\r\nexport function fillRule(v: string) { return new CssElementStyleProp(\"fillRule\", v); }\r\n\r\nexport function filter(v: string) { return new CssElementStyleProp(\"filter\", v); }\r\n\r\nexport function flexBasis(v: CssGlobalValue | CssFlexBasisValue) { return new CssElementStyleProp(\"flexBasis\", v); }\r\n\r\nexport function flexDirection(v: CssGlobalValue | CssFlexDirectionValue) { return new CssElementStyleProp(\"flexDirection\", v); }\r\n\r\nexport function flexWrap(v: CssGlobalValue | CssFlexWrapValue) { return new CssElementStyleProp(\"flexWrap\", v); }\r\n\r\nexport function flexFlow(v: CssGlobalValue): CssElementStyleProp;\r\nexport function flexFlow(v: CssFlexFlowValue): CssElementStyleProp;\r\nexport function flexFlow(x: CssFlexFlowValue, y: CssFlexFlowValue): CssElementStyleProp;\r\nexport function flexFlow(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"flexFlow\", v.join(\" \")); }\r\n\r\nexport function flex(v: CssGlobalValue): CssElementStyleProp;\r\nexport function flex(grow: number): CssElementStyleProp;\r\nexport function flex(basis: CssFlexBasisValue): CssElementStyleProp;\r\nexport function flex(grow: number, shrink: number): CssElementStyleProp;\r\nexport function flex(grow: number, basis: CssFlexBasisValue): CssElementStyleProp;\r\nexport function flex(grow: number, shrink: number, basis: CssFlexBasisValue): CssElementStyleProp;\r\nexport function flex(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"flex\", v.join(\" \")); }\r\n\r\nexport function flexGrow(v: CssGlobalValue | number) { return new CssElementStyleProp(\"flexGrow\", v); }\r\n\r\nexport function flexShrink(v: CssGlobalValue | number) { return new CssElementStyleProp(\"flexShrink\", v); }\r\n\r\nexport function float(v: CssGlobalValue | CssFloatValue) { return new CssElementStyleProp(\"float\", v); }\r\n\r\nexport function floodColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"floodColor\", v); }\r\n\r\nexport function floodOpacity(v: string) { return new CssElementStyleProp(\"floodOpacity\", v); }\r\n\r\nexport function font(v: string) { return new CssElementStyleProp(\"font\", v); }\r\n\r\nexport function fontFamily(v: string) { return new CssElementStyleProp(\"fontFamily\", v); }\r\n\r\nexport function fontFeatureSettings(v: string) { return new CssElementStyleProp(\"fontFeatureSettings\", v); }\r\n\r\nexport function fontKerning(v: string) { return new CssElementStyleProp(\"fontKerning\", v); }\r\n\r\nexport function fontOpticalSizing(v: string) { return new CssElementStyleProp(\"fontOpticalSizing\", v); }\r\n\r\nexport function fontSize(v: string) { return new CssElementStyleProp(\"fontSize\", v); }\r\n\r\nexport function fontStretch(v: string) { return new CssElementStyleProp(\"fontStretch\", v); }\r\n\r\nexport function fontStyle(v: string) { return new CssElementStyleProp(\"fontStyle\", v); }\r\n\r\nexport function fontVariant(v: string) { return new CssElementStyleProp(\"fontVariant\", v); }\r\n\r\nexport function fontVariantCaps(v: string) { return new CssElementStyleProp(\"fontVariantCaps\", v); }\r\n\r\nexport function fontVariantEastAsian(v: string) { return new CssElementStyleProp(\"fontVariantEastAsian\", v); }\r\n\r\nexport function fontVariantLigatures(v: string) { return new CssElementStyleProp(\"fontVariantLigatures\", v); }\r\n\r\nexport function fontVariantNumeric(v: string) { return new CssElementStyleProp(\"fontVariantNumeric\", v); }\r\n\r\nexport function fontVariationSettings(v: string) { return new CssElementStyleProp(\"fontVariationSettings\", v); }\r\n\r\nexport function fontWeight(v: string) { return new CssElementStyleProp(\"fontWeight\", v); }\r\n\r\nexport function gap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp;\r\nexport function gap(row: CssLengthPercentage | CssCalcStatement, column: CssLengthPercentage | CssCalcStatement): CssElementStyleProp\r\nexport function gap(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"gap\", v.join(\" \")); }\r\nexport function gridGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement): CssElementStyleProp;\r\nexport function gridGap(row: CssLengthPercentage | CssCalcStatement, column: CssLengthPercentage | CssCalcStatement): CssElementStyleProp\r\nexport function gridGap(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"gridGap\", v.join(\" \")); }\r\n\r\nexport function grid(v: string) { return new CssElementStyleProp(\"grid\", v); }\r\n\r\nexport function gridArea(v: string): CssElementStyleProp;\r\nexport function gridArea(rowStart: number, colStart?: number, rowEnd?: number, colEnd?: number): CssElementStyleProp;\r\nexport function gridArea(vOrRowStart: string | number, colStart?: number, rowEnd?: number, colEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrRowStart)) {\r\n        vOrRowStart = [vOrRowStart, colStart, rowEnd, colEnd]\r\n            .filter(isDefined)\r\n            .join(\"/\");\r\n    }\r\n\r\n    return new CssElementStyleProp(\"gridArea\", vOrRowStart);\r\n}\r\n\r\nexport function gridAutoColumns(v: string) { return new CssElementStyleProp(\"gridAutoColumns\", v); }\r\n\r\nexport function gridAutoFlow(v: CssGlobalValue | CssGridAutoFlowValue) { return new CssElementStyleProp(\"gridAutoFlow\", v); }\r\n\r\nexport function gridAutoRows(v: string) { return new CssElementStyleProp(\"gridAutoRows\", v); }\r\n\r\nexport function gridColumn(v: string): CssElementStyleProp\r\nexport function gridColumn(colStart: number, colEnd?: number): CssElementStyleProp\r\nexport function gridColumn(vOrColStart: string | number, colEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrColStart)) {\r\n        vOrColStart = [vOrColStart, colEnd]\r\n            .filter(isDefined)\r\n            .join(\"/\");\r\n    }\r\n    return new CssElementStyleProp(\"gridColumn\", vOrColStart);\r\n}\r\n\r\nexport function gridColumnEnd(v: string | number) { return new CssElementStyleProp(\"gridColumnEnd\", v); }\r\n\r\nexport function gridColumnStart(v: string | number) { return new CssElementStyleProp(\"gridColumnStart\", v); }\r\n\r\nexport function gridRow(v: string): CssElementStyleProp\r\nexport function gridRow(rowStart: number, rowEnd?: number): CssElementStyleProp\r\nexport function gridRow(vOrRowStart: string | number, rowEnd?: number): CssElementStyleProp {\r\n    if (!isString(vOrRowStart)) {\r\n        vOrRowStart = [vOrRowStart, rowEnd]\r\n            .filter(isDefined)\r\n            .join(\"/\");\r\n    }\r\n    return new CssElementStyleProp(\"gridRow\", vOrRowStart);\r\n}\r\n\r\nexport function gridRowEnd(v: string | number) { return new CssElementStyleProp(\"gridRowEnd\", v); }\r\n\r\nexport function gridRowStart(v: string | number) { return new CssElementStyleProp(\"gridRowStart\", v); }\r\n\r\nexport function gridTemplate(v: string) { return new CssElementStyleProp(\"gridTemplate\", v); }\r\n\r\nexport function gridTemplateAreas(...v: string[]) { return new CssElementStyleProp(\"gridTemplateAreas\", v.map((r) => \"\\\"\" + r + \"\\\"\").join(\"\\n\")); }\r\n\r\nexport function gridTemplateColumns(v: CssGlobalValue): CssElementStyleProp;\r\nexport function gridTemplateColumns(...v: CssGridTemplateTrackValue[]): CssElementStyleProp;\r\nexport function gridTemplateColumns(...v: (string | number)[]) { return new CssElementStyleProp(\"gridTemplateColumns\", v.join(\" \")); }\r\n\r\nexport function gridTemplateRows(v: CssGlobalValue): CssElementStyleProp;\r\nexport function gridTemplateRows(...v: CssGridTemplateTrackValue[]): CssElementStyleProp;\r\nexport function gridTemplateRows(...v: (string | number)[]) { return new CssElementStyleProp(\"gridTemplateRows\", v.join(\" \")); }\r\n\r\nexport function height(v: CssGlobalValue | CssSizePropertyValue) { return new CssElementStyleProp(\"height\", v); }\r\n\r\nexport function hyphens(v: string) { return new CssElementStyleProp(\"hyphens\", v); }\r\n\r\nexport function imageOrientation(v: string) { return new CssElementStyleProp(\"imageOrientation\", v); }\r\n\r\nexport function imageRendering(v: string) { return new CssElementStyleProp(\"imageRendering\", v); }\r\n\r\nexport function inlineSize(v: string) { return new CssElementStyleProp(\"inlineSize\", v); }\r\n\r\nexport function isolation(v: string) { return new CssElementStyleProp(\"isolation\", v); }\r\n\r\nexport function justifyContent(v: CssGlobalValue | CssJustifyAlignContentValue) { return new CssElementStyleProp(\"justifyContent\", v); }\r\n\r\nexport function justifyItems(v: CssGlobalValue | CssJustifyItemsValue) { return new CssElementStyleProp(\"justifyItems\", v); }\r\n\r\nexport function justifySelf(v: CssGlobalValue | CssJustifyAlignSelfValue) { return new CssElementStyleProp(\"justifySelf\", v); }\r\n\r\nexport function left(v: CssElementPositionValue) { return new CssElementStyleProp(\"left\", v); }\r\n\r\nexport function letterSpacing(v: string) { return new CssElementStyleProp(\"letterSpacing\", v); }\r\n\r\nexport function lightingColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"lightingColor\", v); }\r\n\r\nexport function lineBreak(v: string) { return new CssElementStyleProp(\"lineBreak\", v); }\r\n\r\nexport function lineHeight(v: string) { return new CssElementStyleProp(\"lineHeight\", v); }\r\n\r\nexport function listStyle(v: string) { return new CssElementStyleProp(\"listStyle\", v); }\r\n\r\nexport function listStyleImage(v: string) { return new CssElementStyleProp(\"listStyleImage\", v); }\r\n\r\nexport function listStylePosition(v: string) { return new CssElementStyleProp(\"listStylePosition\", v); }\r\n\r\nexport function listStyleType(v: string) { return new CssElementStyleProp(\"listStyleType\", v); }\r\n\r\nexport function margin(v: CssGlobalValue | CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(vert: CssLengthPercentage | \"auto\", horiz: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(top: CssLengthPercentage | \"auto\", horiz: CssLengthPercentage | \"auto\", bot: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(top: CssLengthPercentage | \"auto\", right: CssLengthPercentage | \"auto\", bot: CssLengthPercentage | \"auto\", left: CssLengthPercentage | \"auto\"): CssElementStyleProp;\r\nexport function margin(...v: (number | string)[]) { return new CssElementStyleProp(\"margin\", v.join(\" \")); }\r\n\r\nexport function marginBlockEnd(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBlockEnd\", v); }\r\n\r\nexport function marginBlockStart(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBlockStart\", v); }\r\n\r\nexport function marginBottom(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginBottom\", v); }\r\n\r\nexport function marginInlineEnd(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginInlineEnd\", v); }\r\n\r\nexport function marginInlineStart(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginInlineStart\", v); }\r\n\r\nexport function marginLeft(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginLeft\", v); }\r\n\r\nexport function marginRight(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginRight\", v); }\r\n\r\nexport function marginTop(v: CssLengthPercentage | \"auto\") { return new CssElementStyleProp(\"marginTop\", v); }\r\n\r\nexport function marker(v: string) { return new CssElementStyleProp(\"marker\", v); }\r\n\r\nexport function markerEnd(v: string) { return new CssElementStyleProp(\"markerEnd\", v); }\r\n\r\nexport function markerMid(v: string) { return new CssElementStyleProp(\"markerMid\", v); }\r\n\r\nexport function markerStart(v: string) { return new CssElementStyleProp(\"markerStart\", v); }\r\n\r\nexport function mask(v: string) { return new CssElementStyleProp(\"mask\", v); }\r\n\r\nexport function maskType(v: string) { return new CssElementStyleProp(\"maskType\", v); }\r\n\r\nexport function maxBlockSize(v: string) { return new CssElementStyleProp(\"maxBlockSize\", v); }\r\n\r\nexport function maxHeight(v: string | 0) { return new CssElementStyleProp(\"maxHeight\", v); }\r\n\r\nexport function maxInlineSize(v: string) { return new CssElementStyleProp(\"maxInlineSize\", v); }\r\n\r\nexport function maxWidth(v: string | 0) { return new CssElementStyleProp(\"maxWidth\", v); }\r\n\r\nexport function minBlockSize(v: string) { return new CssElementStyleProp(\"minBlockSize\", v); }\r\n\r\nexport function minHeight(v: string | 0) { return new CssElementStyleProp(\"minHeight\", v); }\r\n\r\nexport function minInlineSize(v: string) { return new CssElementStyleProp(\"minInlineSize\", v); }\r\n\r\nexport function minWidth(v: string | 0) { return new CssElementStyleProp(\"minWidth\", v); }\r\n\r\nexport function mixBlendMode(v: string) { return new CssElementStyleProp(\"mixBlendMode\", v); }\r\n\r\nexport function objectFit(v: string) { return new CssElementStyleProp(\"objectFit\", v); }\r\n\r\nexport function objectPosition(v: string) { return new CssElementStyleProp(\"objectPosition\", v); }\r\n\r\nexport function offset(v: string) { return new CssElementStyleProp(\"offset\", v); }\r\n\r\nexport function offsetDistance(v: string) { return new CssElementStyleProp(\"offsetDistance\", v); }\r\n\r\nexport function offsetPath(v: string) { return new CssElementStyleProp(\"offsetPath\", v); }\r\n\r\nexport function offsetRotate(v: string) { return new CssElementStyleProp(\"offsetRotate\", v); }\r\n\r\nexport function opacity(v: CssGlobalValue | CssAlpha) { return new CssElementStyleProp(\"opacity\", v); }\r\n\r\nexport function order(v: string) { return new CssElementStyleProp(\"order\", v); }\r\n\r\nexport function orphans(v: string) { return new CssElementStyleProp(\"orphans\", v); }\r\n\r\nexport function outline(v: string) { return new CssElementStyleProp(\"outline\", v); }\r\n\r\nexport function outlineColor(v: CssGlobalValue | CssColorValue | \"invert\") { return new CssElementStyleProp(\"outlineColor\", v); }\r\n\r\nexport function outlineOffset(v: string) { return new CssElementStyleProp(\"outlineOffset\", v); }\r\n\r\nexport function outlineStyle(v: string) { return new CssElementStyleProp(\"outlineStyle\", v); }\r\n\r\nexport function outlineWidth(v: string | 0) { return new CssElementStyleProp(\"outlineWidth\", v); }\r\n\r\nexport function overflow(v: CssGlobalValue | CssOverflowValue): CssElementStyleProp;\r\nexport function overflow(x: CssOverflowValue, y: CssOverflowValue): CssElementStyleProp;\r\nexport function overflow(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"overflow\", v.join(\" \")); }\r\n\r\nexport function overflowX(v: CssGlobalValue | CssOverflowValue) { return new CssElementStyleProp(\"overflowX\", v); }\r\n\r\nexport function overflowY(v: CssGlobalValue | CssOverflowValue) { return new CssElementStyleProp(\"overflowY\", v); }\r\n\r\nexport function overflowAnchor(v: string) { return new CssElementStyleProp(\"overflowAnchor\", v); }\r\n\r\nexport function overflowWrap(v: string) { return new CssElementStyleProp(\"overflowWrap\", v); }\r\n\r\nexport function overscrollBehavior(v: string) { return new CssElementStyleProp(\"overscrollBehavior\", v); }\r\n\r\nexport function overscrollBehaviorBlock(v: string) { return new CssElementStyleProp(\"overscrollBehaviorBlock\", v); }\r\n\r\nexport function overscrollBehaviorInline(v: string) { return new CssElementStyleProp(\"overscrollBehaviorInline\", v); }\r\n\r\nexport function overscrollBehaviorX(v: string) { return new CssElementStyleProp(\"overscrollBehaviorX\", v); }\r\n\r\nexport function overscrollBehaviorY(v: string) { return new CssElementStyleProp(\"overscrollBehaviorY\", v); }\r\n\r\nexport function padding(v: CssGlobalValue | CssLengthPercentage): CssElementStyleProp;\r\nexport function padding(vert: CssLengthPercentage, horiz: CssLengthPercentage): CssElementStyleProp;\r\nexport function padding(top: CssLengthPercentage, horiz: CssLengthPercentage, bot: CssLengthPercentage): CssElementStyleProp;\r\nexport function padding(top: CssLengthPercentage, right: CssLengthPercentage, bot: CssLengthPercentage, left: CssLengthPercentage): CssElementStyleProp;\r\nexport function padding(...v: (CssGlobalValue | CssLengthPercentage)[]) { return new CssElementStyleProp(\"padding\", v.join(\" \")); }\r\n\r\nexport function paddingBlockEnd(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingBlockEnd\", v); }\r\n\r\nexport function paddingBlockStart(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingBlockStart\", v); }\r\n\r\nexport function paddingBottom(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingBottom\", v); }\r\n\r\nexport function paddingInlineEnd(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingInlineEnd\", v); }\r\n\r\nexport function paddingInlineStart(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingInlineStart\", v); }\r\n\r\nexport function paddingLeft(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingLeft\", v); }\r\n\r\nexport function paddingRight(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingRight\", v); }\r\n\r\nexport function paddingTop(v: CssGlobalValue | CssLengthPercentage) { return new CssElementStyleProp(\"paddingTop\", v); }\r\n\r\nexport function pageBreakAfter(v: string) { return new CssElementStyleProp(\"pageBreakAfter\", v); }\r\n\r\nexport function pageBreakBefore(v: string) { return new CssElementStyleProp(\"pageBreakBefore\", v); }\r\n\r\nexport function pageBreakInside(v: string) { return new CssElementStyleProp(\"pageBreakInside\", v); }\r\n\r\nexport function paintOrder(v: string) { return new CssElementStyleProp(\"paintOrder\", v); }\r\n\r\nexport function perspective(v: string) { return new CssElementStyleProp(\"perspective\", v); }\r\n\r\nexport function perspectiveOrigin(v: string) { return new CssElementStyleProp(\"perspectiveOrigin\", v); }\r\n\r\nexport function placeContent(v: string) { return new CssElementStyleProp(\"placeContent\", v); }\r\n\r\nexport function placeItems(v: string) { return new CssElementStyleProp(\"placeItems\", v); }\r\n\r\nexport function placeSelf(v: string) { return new CssElementStyleProp(\"placeSelf\", v); }\r\n\r\nexport function pointerEvents(v: CssGlobalValue | CssPointerEventsValue) { return new CssElementStyleProp(\"pointerEvents\", v); }\r\n\r\nexport function position(v: CssGlobalValue | CssPositionValue) { return new CssElementStyleProp(\"position\", v); }\r\n\r\nexport function quotes(v: string) { return new CssElementStyleProp(\"quotes\", v); }\r\n\r\nexport function resize(v: string) { return new CssElementStyleProp(\"resize\", v); }\r\n\r\nexport function right(v: CssElementPositionValue) { return new CssElementStyleProp(\"right\", v); }\r\n\r\nexport function rowGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement) { return new CssElementStyleProp(\"rowGap\", v); }\r\nexport function gridRowGap(v: CssGlobalValue | CssLengthPercentage | CssCalcStatement) { return new CssElementStyleProp(\"gridRowGap\", v); }\r\n\r\nexport function rubyPosition(v: string) { return new CssElementStyleProp(\"rubyPosition\", v); }\r\n\r\nexport function scrollBehavior(v: string) { return new CssElementStyleProp(\"scrollBehavior\", v); }\r\n\r\nexport function scrollMargin(v: string | 0) { return new CssElementStyleProp(\"scrollMargin\", v); }\r\n\r\nexport function scrollMarginBlock(v: string) { return new CssElementStyleProp(\"scrollMarginBlock\", v); }\r\n\r\nexport function scrollMarginBlockEnd(v: string) { return new CssElementStyleProp(\"scrollMarginBlockEnd\", v); }\r\n\r\nexport function scrollMarginBlockStart(v: string) { return new CssElementStyleProp(\"scrollMarginBlockStart\", v); }\r\n\r\nexport function scrollMarginBottom(v: string | 0) { return new CssElementStyleProp(\"scrollMarginBottom\", v); }\r\n\r\nexport function scrollMarginInline(v: string) { return new CssElementStyleProp(\"scrollMarginInline\", v); }\r\n\r\nexport function scrollMarginInlineEnd(v: string) { return new CssElementStyleProp(\"scrollMarginInlineEnd\", v); }\r\n\r\nexport function scrollMarginInlineStart(v: string) { return new CssElementStyleProp(\"scrollMarginInlineStart\", v); }\r\n\r\nexport function scrollMarginLeft(v: string | 0) { return new CssElementStyleProp(\"scrollMarginLeft\", v); }\r\n\r\nexport function scrollMarginRight(v: string | 0) { return new CssElementStyleProp(\"scrollMarginRight\", v); }\r\n\r\nexport function scrollMarginTop(v: string | 0) { return new CssElementStyleProp(\"scrollMarginTop\", v); }\r\n\r\nexport function scrollPadding(v: string | 0) { return new CssElementStyleProp(\"scrollPadding\", v); }\r\n\r\nexport function scrollPaddingBlock(v: string) { return new CssElementStyleProp(\"scrollPaddingBlock\", v); }\r\n\r\nexport function scrollPaddingBlockEnd(v: string) { return new CssElementStyleProp(\"scrollPaddingBlockEnd\", v); }\r\n\r\nexport function scrollPaddingBlockStart(v: string) { return new CssElementStyleProp(\"scrollPaddingBlockStart\", v); }\r\n\r\nexport function scrollPaddingBottom(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingBottom\", v); }\r\n\r\nexport function scrollPaddingInline(v: string) { return new CssElementStyleProp(\"scrollPaddingInline\", v); }\r\n\r\nexport function scrollPaddingInlineEnd(v: string) { return new CssElementStyleProp(\"scrollPaddingInlineEnd\", v); }\r\n\r\nexport function scrollPaddingInlineStart(v: string) { return new CssElementStyleProp(\"scrollPaddingInlineStart\", v); }\r\n\r\nexport function scrollPaddingLeft(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingLeft\", v); }\r\n\r\nexport function scrollPaddingRight(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingRight\", v); }\r\n\r\nexport function scrollPaddingTop(v: string | 0) { return new CssElementStyleProp(\"scrollPaddingTop\", v); }\r\n\r\nexport function scrollSnapAlign(v: string) { return new CssElementStyleProp(\"scrollSnapAlign\", v); }\r\n\r\nexport function scrollSnapStop(v: string) { return new CssElementStyleProp(\"scrollSnapStop\", v); }\r\n\r\nexport function scrollSnapType(v: string) { return new CssElementStyleProp(\"scrollSnapType\", v); }\r\n\r\nexport function shapeImageThreshold(v: string) { return new CssElementStyleProp(\"shapeImageThreshold\", v); }\r\n\r\nexport function shapeMargin(v: string) { return new CssElementStyleProp(\"shapeMargin\", v); }\r\n\r\nexport function shapeOutside(v: string) { return new CssElementStyleProp(\"shapeOutside\", v); }\r\n\r\nexport function shapeRendering(v: string) { return new CssElementStyleProp(\"shapeRendering\", v); }\r\n\r\nexport function stopColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"stopColor\", v); }\r\n\r\nexport function stopOpacity(v: string) { return new CssElementStyleProp(\"stopOpacity\", v); }\r\n\r\nexport function stroke(v: string) { return new CssElementStyleProp(\"stroke\", v); }\r\n\r\nexport function strokeDasharray(v: string) { return new CssElementStyleProp(\"strokeDasharray\", v); }\r\n\r\nexport function strokeDashoffset(v: string) { return new CssElementStyleProp(\"strokeDashoffset\", v); }\r\n\r\nexport function strokeLinecap(v: string) { return new CssElementStyleProp(\"strokeLinecap\", v); }\r\n\r\nexport function strokeLinejoin(v: string) { return new CssElementStyleProp(\"strokeLinejoin\", v); }\r\n\r\nexport function strokeMiterlimit(v: string) { return new CssElementStyleProp(\"strokeMiterlimit\", v); }\r\n\r\nexport function strokeOpacity(v: string) { return new CssElementStyleProp(\"strokeOpacity\", v); }\r\n\r\nexport function strokeWidth(v: string | 0) { return new CssElementStyleProp(\"strokeWidth\", v); }\r\n\r\nexport function tabSize(v: string) { return new CssElementStyleProp(\"tabSize\", v); }\r\n\r\nexport function tableLayout(v: string) { return new CssElementStyleProp(\"tableLayout\", v); }\r\n\r\nexport function textAlign(v: CssGlobalValue | CssTextAlignValue) { return new CssElementStyleProp(\"textAlign\", v); }\r\n\r\nexport function textAlignLast(v: CssGlobalValue | CssTextAlignLastValue) { return new CssElementStyleProp(\"textAlignLast\", v); }\r\n\r\nexport function textAnchor(v: string) { return new CssElementStyleProp(\"textAnchor\", v); }\r\n\r\nexport function textCombineUpright(v: string) { return new CssElementStyleProp(\"textCombineUpright\", v); }\r\n\r\nexport function textDecoration(v: string) { return new CssElementStyleProp(\"textDecoration\", v); }\r\n\r\nexport function textDecorationColor(v: CssGlobalValue | CssColorValue) { return new CssElementStyleProp(\"textDecorationColor\", v); }\r\n\r\nexport function textDecorationLine(v: string) { return new CssElementStyleProp(\"textDecorationLine\", v); }\r\n\r\nexport function textDecorationSkipInk(v: string) { return new CssElementStyleProp(\"textDecorationSkipInk\", v); }\r\n\r\nexport function textDecorationStyle(v: string) { return new CssElementStyleProp(\"textDecorationStyle\", v); }\r\n\r\nexport function textIndent(v: string) { return new CssElementStyleProp(\"textIndent\", v); }\r\n\r\nexport function textOrientation(v: string) { return new CssElementStyleProp(\"textOrientation\", v); }\r\n\r\nexport function textOverflow(v: CssGlobalValue | CssTextOverflowValue) { return new CssElementStyleProp(\"textOverflow\", v); }\r\n\r\nexport function textRendering(v: string) { return new CssElementStyleProp(\"textRendering\", v); }\r\n\r\nexport function textShadow(v: string) { return new CssElementStyleProp(\"textShadow\", v); }\r\n\r\nexport function textTransform(v: string) { return new CssElementStyleProp(\"textTransform\", v); }\r\n\r\nexport function textUnderlinePosition(v: string) { return new CssElementStyleProp(\"textUnderlinePosition\", v); }\r\n\r\nexport function top(v: CssElementPositionValue) { return new CssElementStyleProp(\"top\", v); }\r\n\r\nexport function touchAction(v: CssGlobalValue | CssTouchActionValue) { return new CssElementStyleProp(\"touchAction\", v); }\r\n\r\nexport function transform(v: CssGlobalValue): CssElementStyleProp;\r\nexport function transform(perspective: CssTransformPerspectiveValue, ...rest: CssTransformValue[]): CssElementStyleProp;\r\nexport function transform(...v: CssTransformValue[]): CssElementStyleProp;\r\nexport function transform(...v: string[]): CssElementStyleProp { return new CssElementStyleProp(\"transform\", v.join(\" \")); }\r\n\r\nexport function transformBox(v: CssGlobalValue | CssTransformBoxValue) { return new CssElementStyleProp(\"transformBox\", v); }\r\n\r\nexport function transformOrigin(v: CssGlobalValue): CssElementStyleProp;\r\nexport function transformOrigin(v: CssLengthPercentage | CssBackgroundPositionKeyword): CssElementStyleProp;\r\nexport function transformOrigin(x: CssLengthPercentage | CssBackgroundPositionHorizontalKeyword, y: CssLengthPercentage | CssBackgroundPositionVerticalKeyword): CssElementStyleProp;\r\nexport function transformOrigin(x: CssLengthPercentage | CssBackgroundPositionHorizontalKeyword, y: CssLengthPercentage | CssBackgroundPositionVerticalKeyword, z: CssLength): CssElementStyleProp;\r\nexport function transformOrigin(...v: (string | number)[]): CssElementStyleProp { return new CssElementStyleProp(\"transformOrigin\", v.join(\" \")); }\r\n\r\nexport function transformStyle(v: CssGlobalValue | CssTransformStyleValue) { return new CssElementStyleProp(\"transformStyle\", v); }\r\n\r\nexport function transition(v: string) { return new CssElementStyleProp(\"transition\", v); }\r\n\r\nexport function transitionDelay(v: string | 0) { return new CssElementStyleProp(\"transitionDelay\", v); }\r\n\r\nexport function transitionDuration(v: string | 0) { return new CssElementStyleProp(\"transitionDuration\", v); }\r\n\r\nexport function transitionProperty(v: string) { return new CssElementStyleProp(\"transitionProperty\", v); }\r\n\r\nexport function transitionTimingFunction(v: string) { return new CssElementStyleProp(\"transitionTimingFunction\", v); }\r\n\r\nexport function unicodeBidi(v: string) { return new CssElementStyleProp(\"unicodeBidi\", v); }\r\n\r\nexport function userSelect(v: string) { return new CssElementStyleProp(\"userSelect\", v); }\r\n\r\nexport function verticalAlign(v: CssGlobalValue | CssVerticalAlignValue) { return new CssElementStyleProp(\"verticalAlign\", v); }\r\n\r\nexport function visibility(v: CssGlobalValue | CssVisiblityValue) { return new CssElementStyleProp(\"visibility\", v); }\r\n\r\nexport function whiteSpace(v: CssGlobalValue | CssWhiteSpaceValue) { return new CssElementStyleProp(\"whiteSpace\", v); }\r\n\r\nexport function widows(v: CssGlobalValue | number) { return new CssElementStyleProp(\"widows\", asInt(v)); }\r\n\r\nexport function width(v: CssGlobalValue | CssSizePropertyValue) { return new CssElementStyleProp(\"width\", v); }\r\n\r\nexport function willChange(v: string) { return new CssElementStyleProp(\"willChange\", v); }\r\n\r\nexport function wordBreak(v: string) { return new CssElementStyleProp(\"wordBreak\", v); }\r\n\r\nexport function wordSpacing(v: string) { return new CssElementStyleProp(\"wordSpacing\", v); }\r\n\r\nexport function wordWrap(v: CssGlobalValue | CssWordWrapValue) { return new CssElementStyleProp(\"wordWrap\", v); }\r\n\r\nexport function writingMode(v: CssGlobalValue | CssWritingModeValue) { return new CssElementStyleProp(\"writingMode\", v); }\r\n\r\nexport function zIndex(v: number) { return new CssElementStyleProp(\"zIndex\", asInt(v)); }\r\n\r\nclass CssRegularAtRuleSet<T extends CssAtRuleRegular = CssAtRuleRegular> extends PropSet<Prop> {\r\n    constructor(selector: T, value: string) {\r\n        super(\"@\" + selector + \" \", [new Prop(value)], \";\");\r\n    }\r\n}\r\n\r\nexport function cssCharset(value: string) {\r\n    return new CssRegularAtRuleSet(\"charset\", value);\r\n}\r\n\r\nexport function cssImport(value: string) {\r\n    return new CssRegularAtRuleSet(\"import\", value);\r\n}\r\n\r\nexport function cssNamespace(value: string) {\r\n    return new CssRegularAtRuleSet(\"namespace\", value);\r\n}\r\n\r\nclass CssColorProfileProp<T extends CssColorProfilePropName = CssColorProfilePropName> extends CssDeclareProp {\r\n    constructor(name: T, value: string) {\r\n        super(name, value);\r\n    }\r\n}\r\n\r\nexport function colorProfile(name: CssDashedName, src: string, renderingIntent: CssColorProfileProp<\"rendering-intent\">): PropSet;\r\nexport function colorProfile(name: CssDashedName, src: string, components: CssColorProfileProp<\"components\">): PropSet;\r\nexport function colorProfile(name: CssDashedName, src: string, renderingIntent: CssColorProfileProp<\"rendering-intent\">, components: CssColorProfileProp<\"components\">): PropSet;\r\nexport function colorProfile(name: CssDashedName, src: string, ...props: CssColorProfileProp[]): PropSet {\r\n    props.unshift(new CssColorProfileProp(\"src\", src));\r\n    return new SelectorPropSet(\"@color-profile \" + name, props);\r\n}\r\n\r\nexport function renderingIntent(value: CssRenderingIntentValue): CssColorProfileProp { return new CssColorProfileProp(\"rendering-intent\", value); }\r\n\r\nexport function components(...names: string[]) { return new CssColorProfileProp(\"components\", names.join(\", \")); }\r\n\r\nclass CssCounterStyleProp<T extends CssCounterStylePropName = CssCounterStylePropName> extends CssDeclareProp {\r\n    constructor(name: T, value: string) {\r\n        super(name, value);\r\n    }\r\n}\r\n\r\nexport function counterStyle(name: string, ...props: CssCounterStyleProp[]): PropSet {\r\n    return new SelectorPropSet(`@counter-style ${name}`, props);\r\n}\r\n\r\nexport function system(value: CssCounterStyleSystemValue) { return new CssCounterStyleProp(\"system\", value); }\r\n\r\nexport function negative(value: string) { return new CssCounterStyleProp(\"negative\", value); }\r\n\r\nexport function prefix(value: string) { return new CssCounterStyleProp(\"prefix\", value); }\r\n\r\nexport function suffix(value: string) { return new CssCounterStyleProp(\"suffix\", value); }\r\n\r\nexport function range(value: CssCounterStyleRangeValue | \"auto\"): CssCounterStyleProp<\"range\">;\r\nexport function range(...v: CssCounterStyleRangeValue[]): CssCounterStyleProp<\"range\">;\r\nexport function range(...v: string[]): CssCounterStyleProp<\"range\"> { return new CssCounterStyleProp(\"range\", v.join(\", \")); }\r\n\r\nexport function pad(count: number, symbol: string) { return new CssCounterStyleProp(\"pad\", `${asInt(count)} ${JSON.stringify(symbol)}`); }\r\n\r\nexport function fallback(value: string) { return new CssCounterStyleProp(\"fallback\", value); }\r\n\r\nexport function symbols(value: string) { return new CssCounterStyleProp(\"symbols\", value); }\r\n\r\nexport function additiveSymbols(...v: string[]) { return new CssCounterStyleProp(\"additive-symbols\", v.join(\", \")); }\r\n\r\nexport function speakAs(value: string) { return new CssCounterStyleProp(\"speak-as\", value); }\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@font-feature-values\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes\r\n\r\nexport function layer(...names: string[]): PropSet;\r\nexport function layer(name: string, ...rules: PropSet[]): PropSet;\r\nexport function layer(...rules: PropSet[]): PropSet;\r\nexport function layer(...namesOrRules: (PropSet | string)[]) {\r\n    const names = [\r\n        ...namesOrRules.filter(isString)\r\n    ];\r\n\r\n    const rules = namesOrRules.filter(v => v instanceof PropSet) as PropSet[];\r\n\r\n    if (names.length === 0 && rules.length === 0) {\r\n        throw new Error(\"Layer names and/or rules are not defined.\");\r\n    }\r\n    if (names.length > 1 && rules.length > 0) {\r\n        throw new Error(\"Cannot define multiple layers and rules at the same time\");\r\n    }\r\n    else if (names.length === 0) {\r\n        return new SelectorPropSet(\"@layer\", rules);\r\n    }\r\n    else {\r\n        const layerList = names.join(\", \");\r\n        if (names.length > 1 || rules.length === 0) {\r\n            return new CssRegularAtRuleSet(\"layer\", layerList);\r\n        }\r\n        else {\r\n            return new SelectorPropSet(\"@layer \" + layerList, rules);\r\n        }\r\n    }\r\n}\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@media\r\nexport function media(query: string, ...props: PropSet[]) {\r\n    return new SelectorPropSet(\"@media \" + query, props);\r\n}\r\n\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@page\r\n//TODO https://developer.mozilla.org/en-US/docs/Web/CSS/@supports\r\n", "import { arrayRemove } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { once } from \"@juniper-lib/events/dist/once\";\r\nimport { Text_Css } from \"@juniper-lib/mediatypes\";\r\nimport { IProgress } from \"@juniper-lib/progress/dist/IProgress\";\r\nimport { isBoolean, isDate, isDefined, isFunction, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\r\nimport { ClassList, Href, HtmlFor, Rel, Type, isAttr } from \"./attrs\";\r\nimport { PropSet, margin } from \"./css\";\r\n\r\nexport interface ErsatzElement<T extends Element = Element> {\r\n    element: T;\r\n}\r\n\r\nexport function isErsatzElement<T extends Element = Element>(obj: any): obj is ErsatzElement<T> {\r\n    if (!isObject(obj)) {\r\n        return false;\r\n    }\r\n\r\n    const elem = obj as ErsatzElement;\r\n    return elem.element instanceof Element;\r\n}\r\n\r\nexport type Elements<T extends Element = Element> = T | ErsatzElement<T>;\r\n\r\nexport function resolveElement<T extends Element = HTMLElement>(elem: Elements<T> | string): T {\r\n    if (isErsatzElement(elem)) {\r\n        return elem.element;\r\n    }\r\n    else if (isString(elem)) {\r\n        return getElement(elem);\r\n    }\r\n\r\n    return elem;\r\n}\r\n\r\nexport interface IElementAppliable<T extends Element = Element> {\r\n    applyToElement(x: Elements<T>): void;\r\n}\r\n\r\nexport function isIElementAppliable<T extends Element = Element>(obj: any): obj is IElementAppliable<T> {\r\n    return isObject(obj)\r\n        && \"applyToElement\" in obj\r\n        && isFunction((obj as any).applyToElement);\r\n}\r\n\r\nexport type ElementChild<T extends Element = Element> = Elements<T>\r\n    | IElementAppliable\r\n    | string\r\n    | number\r\n    | boolean\r\n    | Date;\r\n\r\nexport function isElementChild(obj: any): obj is ElementChild {\r\n    return obj instanceof Element\r\n        || isErsatzElement(obj)\r\n        || isIElementAppliable(obj)\r\n        || isString(obj)\r\n        || isNumber(obj)\r\n        || isBoolean(obj)\r\n        || isDate(obj);\r\n}\r\n\r\nexport function isElements(child: ElementChild): child is Elements {\r\n    return isErsatzElement(child)\r\n        || child instanceof Element;\r\n}\r\n\r\nexport interface IFocusable {\r\n    focus(): void;\r\n}\r\n\r\nexport function isFocusable(elem: any): elem is IFocusable {\r\n    return \"focus\" in elem && isFunction((elem as IFocusable).focus);\r\n}\r\n\r\nexport function elementSetDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visible: boolean, visibleDisplayType: CssGlobalValue | CssDisplayValue = \"\"): void {\r\n    elem = resolveElement(elem);\r\n    if (visible) {\r\n        elem.style.removeProperty(\"display\");\r\n        const style = getComputedStyle(elem);\r\n        if (style.display === \"none\") {\r\n            elem.style.display = visibleDisplayType || \"block\";\r\n        }\r\n    }\r\n    else {\r\n        elem.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport function elementIsDisplayed<T extends HTMLElement = HTMLElement>(elem: Elements<T>): boolean {\r\n    elem = resolveElement(elem);\r\n    return elem.style.display !== \"none\";\r\n}\r\n\r\nexport function elementToggleDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visibleDisplayType: CssGlobalValue | CssDisplayValue = \"block\"): void {\r\n    elementSetDisplay(elem, !elementIsDisplayed(elem), visibleDisplayType);\r\n}\r\n\r\nexport function elementInsertBefore(parent: Elements, newElem: Elements, refElem: Elements): void {\r\n    parent = resolveElement(parent);\r\n    newElem = resolveElement(newElem);\r\n    refElem = resolveElement(refElem);\r\n    if (parent && newElem) {\r\n        parent.insertBefore(newElem, refElem);\r\n    }\r\n}\r\n\r\nexport function elementGetIndexInParent(elem: Elements): number {\r\n    elem = resolveElement(elem);\r\n\r\n    if (elem.parentElement) {\r\n        for (let i = 0; i < elem.parentElement.childElementCount; ++i) {\r\n            if (elem.parentElement.children[i] === elem) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport function Clear() {\r\n    return {\r\n        applyToElement(elem: HTMLElement) { elem.innerHTML = \"\"; }\r\n    }\r\n}\r\n\r\n\r\nexport function elementGetCustomData(elem: Elements<HTMLElement>, name: Lowercase<string>): string {\r\n    elem = resolveElement(elem);\r\n    return elem.dataset[name.toLowerCase()];\r\n}\r\n\r\ntype ReturnElementType<T> = T extends Element\r\n    ? T\r\n    : T extends ShadowRoot\r\n    ? T\r\n    : T extends Elements<infer ElementT>\r\n    ? ElementT\r\n    : never;\r\n\r\nexport function HtmlRender<T extends Elements | ShadowRoot>(element: T | string, ...children: ElementChild[]): ReturnElementType<T> {\r\n    const elem = element instanceof Element\r\n        ? element\r\n        : element instanceof ShadowRoot\r\n            ? element\r\n            : isString(element)\r\n                ? document.querySelector(element)\r\n                : element.element;\r\n\r\n    const target = elem instanceof HTMLTemplateElement\r\n        ? elem.content\r\n        : elem;\r\n\r\n    for (const child of children) {\r\n        if (isDefined(child)) {\r\n            if (child instanceof Node) {\r\n                target.appendChild(child);\r\n            }\r\n            else if (isErsatzElement(child)) {\r\n                target.appendChild(resolveElement(child));\r\n            }\r\n            else if (isIElementAppliable(child)) {\r\n                if (!(elem instanceof ShadowRoot)) {\r\n                    child.applyToElement(elem);\r\n                }\r\n            }\r\n            else {\r\n                target.appendChild(document.createTextNode(child.toLocaleString()));\r\n            }\r\n        }\r\n    }\r\n\r\n    return elem as ReturnElementType<T>;\r\n}\r\n\r\nexport function elementRemoveFromParent(elem: Elements | string): void {\r\n    elem = resolveElement(elem);\r\n    if (isDefined(elem)) {\r\n        elem.remove();\r\n    }\r\n}\r\n\r\nexport function elementReplace(elem: Elements, ...elems: Elements[]): Elements {\r\n    elem = resolveElement(elem);\r\n    elem.replaceWith(...elems.map(resolveElement));\r\n    return elem;\r\n}\r\n\r\nexport function elementSwap<T extends Elements>(elem: Elements, withPlaceholder: (placeholder: Elements) => T): T {\r\n    const placeholder = Div();\r\n    const e = withPlaceholder(placeholder);\r\n    elementReplace(placeholder, elementReplace(elem, e));\r\n    return e;\r\n}\r\n\r\nexport function getElement<T extends Element = HTMLElement>(selector: string): T {\r\n    return document.querySelector<T>(selector);\r\n}\r\n\r\nexport function getElements<T extends Element = HTMLElement>(selector: string): T[] {\r\n    return Array.from(document.querySelectorAll<T>(selector));\r\n}\r\n\r\nexport function getButton(selector: string) {\r\n    return getElement<HTMLButtonElement>(selector);\r\n}\r\n\r\nexport function getButtons(selector: string) {\r\n    return getElements<HTMLButtonElement>(selector);\r\n}\r\n\r\nexport function getInput(selector: string) {\r\n    return getElement<HTMLInputElement>(selector);\r\n}\r\n\r\nexport function getDataList(selector: string) {\r\n    return getElement<HTMLDataListElement>(selector);\r\n}\r\n\r\nexport function getInputs(selector: string) {\r\n    return getElements<HTMLInputElement>(selector);\r\n}\r\n\r\nexport function getSelect(selector: string) {\r\n    return getElement<HTMLSelectElement>(selector);\r\n}\r\n\r\nexport function getCanvas(selector: string) {\r\n    return getElement<HTMLCanvasElement>(selector);\r\n}\r\n\r\n/**\r\n * Creates an HTML element for a given tag name.\r\n * \r\n * Boolean attributes that you want to default to true can be passed\r\n * as just the attribute creating function, \r\n *   e.g. `Audio(autoPlay)` vs `Audio(autoPlay(true))`\r\n * @param name - the name of the tag\r\n * @param rest - optional attributes, child elements, and text\r\n * @returns\r\n */\r\nexport function HtmlTag<MapT extends Record<keyof MapT, HTMLElement> = HTMLElementTagNameMap, K extends keyof MapT & string = keyof MapT & string>(name: K, ...rest: ElementChild[]): MapT[K] {\r\n    let elem: MapT[K] & HTMLElement = null;\r\n\r\n    const finders = rest.filter(isAttr).filter(v => v.key === \"id\" || v.key === \"query\");\r\n    for (const finder of finders) {\r\n        if (finder.key === \"query\") {\r\n            elem = finder.value as any;\r\n            arrayRemove(rest, finder);\r\n        }\r\n        else if (finder.key === \"id\") {\r\n            elem = document.getElementById(finder.value as any) as any;\r\n            if (elem) {\r\n                arrayRemove(rest, finder);\r\n            }\r\n        }\r\n    }\r\n\r\n    if (elem && elem.tagName !== name.toUpperCase()) {\r\n        console.warn(`Expected a \"${name.toUpperCase()}\" element but found a \"${elem.tagName}\".`);\r\n    }\r\n\r\n    if (!elem) {\r\n        elem = document.createElement(name) as MapT[K];\r\n    }\r\n\r\n    HtmlRender(elem, ...rest);\r\n\r\n    return elem;\r\n}\r\n\r\nexport interface IDisableable {\r\n    disabled: boolean;\r\n}\r\n\r\nexport function isDisableable(obj: any): obj is IDisableable {\r\n    return isObject(obj)\r\n        && \"disabled\" in obj\r\n        && isBoolean(obj.disabled);\r\n}\r\n\r\n/**\r\n * Empty an element of all children. This is faster than setting `innerHTML = \"\"`.\r\n */\r\nexport function elementClearChildren(elem: Elements) {\r\n    elem = resolveElement(elem);\r\n    while (elem.lastChild) {\r\n        elem.lastChild.remove();\r\n    }\r\n}\r\n\r\nexport function elementSetText(elem: Elements<HTMLElement>, text: string): void {\r\n    elem = resolveElement(elem);\r\n    elementClearChildren(elem);\r\n    elem.append(TextNode(text));\r\n}\r\n\r\nexport function elementGetText(elem: Elements<HTMLElement>): string {\r\n    elem = resolveElement(elem);\r\n    return elem.innerText;\r\n}\r\n\r\nexport function elementSetTitle(elem: Elements<HTMLElement>, text: string): void {\r\n    elem = resolveElement(elem);\r\n    elem.title = text;\r\n}\r\n\r\nexport function elementSetClass(elem: Elements, enabled: boolean, className: string) {\r\n    elem = resolveElement(elem);\r\n    const canEnable = isDefined(className);\r\n    const hasEnabled = canEnable && elem.classList.contains(className);\r\n\r\n    if (canEnable && hasEnabled !== enabled) {\r\n        elem.classList.toggle(className);\r\n    }\r\n}\r\n\r\nexport type ButtonStyleType =\r\n    | \"primary\"\r\n    | \"secondary\"\r\n    | \"success\"\r\n    | \"info\"\r\n    | \"warning\"\r\n    | \"danger\"\r\n    | \"light\"\r\n    | \"dark\";\r\n\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean, label: string): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean, label: string, title: string): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean, label: string): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean, label: string, title: string): void;\r\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, styleOrEnabled: boolean | ButtonStyleType, enabledOrlabel?: string | boolean, labelOrTitle?: string, title?: string): void {\r\n    button = resolveElement(button);\r\n    let style: ButtonStyleType = null;\r\n    let enabled: boolean = null;\r\n    let label: string = null;\r\n    if (isBoolean(styleOrEnabled)) {\r\n        enabled = styleOrEnabled;\r\n        label = enabledOrlabel as string;\r\n        title = labelOrTitle;\r\n    }\r\n    else {\r\n        style = styleOrEnabled;\r\n        enabled = enabledOrlabel as boolean;\r\n        label = labelOrTitle;\r\n    }\r\n\r\n    button.disabled = !enabled;\r\n\r\n    if (label) {\r\n        elementSetText(button, label);\r\n    }\r\n\r\n    if (title) {\r\n        elementSetTitle(button, title);\r\n    }\r\n\r\n    if (style) {\r\n        button.classList.toggle(\"btn-\" + style, enabled);\r\n        button.classList.toggle(\"btn-outline-\" + style, !enabled);\r\n    }\r\n}\r\n\r\n\r\nasync function mediaElementCan(type: \"canplay\" | \"canplaythrough\", elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    if (isDefined(prog)) {\r\n        prog.start();\r\n    }\r\n\r\n    const expectedState = type === \"canplay\"\r\n        ? elem.HAVE_CURRENT_DATA\r\n        : elem.HAVE_ENOUGH_DATA;\r\n\r\n    if (elem.readyState >= expectedState) {\r\n        return true;\r\n    }\r\n\r\n    try {\r\n        await once(elem, type, \"error\");\r\n        return true;\r\n    }\r\n    catch (err) {\r\n        console.warn(elem.error, err);\r\n        return false;\r\n    }\r\n    finally {\r\n        if (isDefined(prog)) {\r\n            prog.end();\r\n        }\r\n    }\r\n}\r\n\r\nexport function mediaElementCanPlay(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    return mediaElementCan(\"canplay\", elem, prog);\r\n}\r\n\r\nexport function mediaElementCanPlayThrough(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\r\n    return mediaElementCan(\"canplaythrough\", elem, prog);\r\n}\r\n\r\nexport function A(...rest: ElementChild[]): HTMLAnchorElement { return HtmlTag(\"a\", ...rest); }\r\nexport function Abbr(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"abbr\", ...rest); }\r\nexport function Address(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"address\", ...rest); }\r\nexport function Area(...rest: ElementChild[]): HTMLAreaElement { return HtmlTag(\"area\", ...rest); }\r\nexport function Article(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"article\", ...rest); }\r\nexport function Aside(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"aside\", ...rest); }\r\nexport function Audio(...rest: ElementChild[]): HTMLAudioElement { return HtmlTag(\"audio\", ...rest); }\r\nexport function B(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"b\", ...rest); }\r\nexport function Base(...rest: ElementChild[]): HTMLBaseElement { return HtmlTag(\"base\", ...rest); }\r\nexport function BDI(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"bdi\", ...rest); }\r\nexport function BDO(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"bdo\", ...rest); }\r\nexport function BlockQuote(...rest: ElementChild[]): HTMLQuoteElement { return HtmlTag(\"blockquote\", ...rest); }\r\nexport function Body(...rest: ElementChild[]): HTMLBodyElement { return HtmlTag(\"body\", ...rest); }\r\nexport function BR(): HTMLBRElement { return HtmlTag(\"br\"); }\r\nexport function ButtonRaw(...rest: ElementChild[]): HTMLButtonElement { return HtmlTag(\"button\", ...rest); }\r\nexport function Button(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"button\")); }\r\nexport function ButtonSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\")); }\r\nexport function ButtonPrimary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-primary\")); }\r\nexport function ButtonPrimaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-primary\")); }\r\nexport function ButtonPrimarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-primary\")); }\r\nexport function ButtonPrimaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-primary\")); }\r\nexport function ButtonSecondary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-secondary\")); }\r\nexport function ButtonSecondaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-secondary\")); }\r\nexport function ButtonSecondarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-secondary\")); }\r\nexport function ButtonSecondaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-secondary\")); }\r\nexport function ButtonDanger(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-danger\")); }\r\nexport function ButtonDangerOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-danger\")); }\r\nexport function ButtonDangerSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-danger\")); }\r\nexport function ButtonDangerOutlineSmalle(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-danger\")); }\r\nexport function ButtonSubmit(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"submit\")); }\r\nexport function ButtonReset(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"reset\")); }\r\nexport function Canvas(...rest: ElementChild[]): HTMLCanvasElement { return HtmlTag(\"canvas\", ...rest); }\r\nexport function Caption(...rest: ElementChild[]): HTMLTableCaptionElement { return HtmlTag(\"caption\", ...rest); }\r\nexport function Cite(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"cite\", ...rest); }\r\nexport function Code(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"code\", ...rest); }\r\nexport function Col(...rest: ElementChild[]): HTMLTableColElement { return HtmlTag(\"col\", ...rest); }\r\nexport function ColGroup(...rest: ElementChild[]): HTMLTableColElement { return HtmlTag(\"colgroup\", ...rest); }\r\nexport function DataTag(...rest: ElementChild[]): HTMLDataElement { return HtmlTag(\"data\", ...rest); }\r\nexport function DataList(...rest: ElementChild[]): HTMLDataListElement { return HtmlTag(\"datalist\", ...rest); }\r\nexport function DD(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dd\", ...rest); }\r\nexport function Del(...rest: ElementChild[]): HTMLModElement { return HtmlTag(\"del\", ...rest); }\r\nexport function Details(...rest: ElementChild[]): HTMLDetailsElement { return HtmlTag(\"details\", ...rest); }\r\nexport function DFN(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dfn\", ...rest); }\r\nexport function Dialog(...rest: ElementChild[]): HTMLDialogElement { return HtmlTag(\"dialog\", ...rest); }\r\nexport function Div(...rest: ElementChild[]): HTMLDivElement { return HtmlTag(\"div\", ...rest); }\r\nexport function DL(...rest: ElementChild[]): HTMLDListElement { return HtmlTag(\"dl\", ...rest); }\r\nexport function DT(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dt\", ...rest); }\r\nexport function Em(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"em\", ...rest); }\r\nexport function Embed(...rest: ElementChild[]): HTMLEmbedElement { return HtmlTag(\"embed\", ...rest); }\r\nexport function FieldSet(...rest: ElementChild[]): HTMLFieldSetElement { return HtmlTag(\"fieldset\", ...rest); }\r\nexport function FigCaption(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"figcaption\", ...rest); }\r\nexport function Figure(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"figure\", ...rest); }\r\nexport function Footer(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"footer\", ...rest); }\r\nexport function Form(...rest: ElementChild[]): HTMLFormElement { return HtmlTag(\"form\", ...rest); }\r\nexport function H1(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h1\", ...rest); }\r\nexport function H2(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h2\", ...rest); }\r\nexport function H3(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h3\", ...rest); }\r\nexport function H4(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h4\", ...rest); }\r\nexport function H5(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h5\", ...rest); }\r\nexport function H6(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h6\", ...rest); }\r\nexport function HR(...rest: ElementChild[]): HTMLHRElement { return HtmlTag(\"hr\", ...rest); }\r\nexport function Head(...rest: ElementChild[]): HTMLHeadElement { return HtmlTag(\"head\", ...rest); }\r\nexport function Header(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"header\", ...rest); }\r\nexport function HGroup(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"hgroup\", ...rest); }\r\nexport function HTML(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"html\", ...rest); }\r\nexport function I(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"i\", ...rest); }\r\nexport function FAIcon(iconName: string, ...rest: ElementChild[]): HTMLElement { return I(ClassList(`fa fa-${iconName}`), ...rest); }\r\nexport function IFrame(...rest: ElementChild[]): HTMLIFrameElement { return HtmlTag(\"iframe\", ...rest); }\r\nexport function Img(...rest: ElementChild[]): HTMLImageElement { return HtmlTag(\"img\", ...rest); }\r\nexport function Input(...rest: ElementChild[]): HTMLInputElement { return HtmlTag(\"input\", ...rest); }\r\nexport function Ins(...rest: ElementChild[]): HTMLModElement { return HtmlTag(\"ins\", ...rest); }\r\nexport function KBD(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"kbd\", ...rest); }\r\nexport function Label(...rest: ElementChild[]): HTMLLabelElement { return HtmlTag(\"label\", ...rest); }\r\nexport function PreLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [HTMLLabelElement, T] {\r\n    resolveElement(input).id = id;\r\n    return [\r\n        Label(HtmlFor(id), label),\r\n        input\r\n    ];\r\n}\r\nexport function PostLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [T, HTMLLabelElement] {\r\n    resolveElement(input).id = id;\r\n    return [\r\n        input,\r\n        Label(HtmlFor(id), label)\r\n    ];\r\n}\r\nexport function Legend(...rest: ElementChild[]) { return HtmlTag(\"legend\", ...rest); }\r\nexport function LI(...rest: ElementChild[]) { return HtmlTag(\"li\", ...rest); }\r\nexport function Link(...rest: ElementChild[]) { return HtmlTag(\"link\", ...rest); }\r\nexport function Main(...rest: ElementChild[]) { return HtmlTag(\"main\", ...rest); }\r\nexport function Map_tag(...rest: ElementChild[]) { return HtmlTag(\"map\", ...rest); }\r\nexport function Mark(...rest: ElementChild[]) { return HtmlTag(\"mark\", ...rest); }\r\nexport function Menu(...rest: ElementChild[]) { return HtmlTag(\"menu\", ...rest); }\r\nexport function Meta(...rest: ElementChild[]) { return HtmlTag(\"meta\", ...rest); }\r\nexport function Meter(...rest: ElementChild[]) { return HtmlTag(\"meter\", ...rest); }\r\nexport function Nav(...rest: ElementChild[]) { return HtmlTag(\"nav\", ...rest); }\r\nexport function NoScript(...rest: ElementChild[]) { return HtmlTag(\"noscript\", ...rest); }\r\nexport function Object_tag(...rest: ElementChild[]) { return HtmlTag(\"object\", ...rest); }\r\nexport function OL(...rest: ElementChild[]) { return HtmlTag(\"ol\", ...rest); }\r\nexport function OptGroup(...rest: ElementChild[]) { return HtmlTag(\"optgroup\", ...rest); }\r\nexport function Option(...rest: ElementChild[]) { return HtmlTag(\"option\", ...rest); }\r\nexport function Output(...rest: ElementChild[]) { return HtmlTag(\"output\", ...rest); }\r\nexport function P(...rest: ElementChild[]) { return HtmlTag(\"p\", ...rest); }\r\nexport function Picture(...rest: ElementChild[]) { return HtmlTag(\"picture\", ...rest); }\r\nexport function Pre(...rest: ElementChild[]) { return HtmlTag(\"pre\", ...rest); }\r\nexport function Progress(...rest: ElementChild[]) { return HtmlTag(\"progress\", ...rest); }\r\nexport function Q(...rest: ElementChild[]) { return HtmlTag(\"q\", ...rest); }\r\nexport function RP(...rest: ElementChild[]) { return HtmlTag(\"rp\", ...rest); }\r\nexport function RT(...rest: ElementChild[]) { return HtmlTag(\"rt\", ...rest); }\r\nexport function Ruby(...rest: ElementChild[]) { return HtmlTag(\"ruby\", ...rest); }\r\nexport function S(...rest: ElementChild[]) { return HtmlTag(\"s\", ...rest); }\r\nexport function Samp(...rest: ElementChild[]) { return HtmlTag(\"samp\", ...rest); }\r\nexport function Script(...rest: ElementChild[]) { return HtmlTag(\"script\", ...rest); }\r\nexport function Section(...rest: ElementChild[]) { return HtmlTag(\"section\", ...rest); }\r\nexport function Select(...rest: ElementChild[]) { return HtmlTag(\"select\", ...rest); }\r\nexport function Slot(...rest: ElementChild[]) { return HtmlTag(\"slot\", ...rest); }\r\nexport function Small(...rest: ElementChild[]) { return HtmlTag(\"small\", ...rest); }\r\nexport function Source(...rest: ElementChild[]) { return HtmlTag(\"source\", ...rest); }\r\nexport function Span(...rest: ElementChild[]) { return HtmlTag(\"span\", ...rest); }\r\nexport function Strong(...rest: ElementChild[]) { return HtmlTag(\"strong\", ...rest); }\r\nexport function Sub(...rest: ElementChild[]) { return HtmlTag(\"sub\", ...rest); }\r\nexport function Summary(...rest: ElementChild[]) { return HtmlTag(\"summary\", ...rest); }\r\nexport function Sup(...rest: ElementChild[]) { return HtmlTag(\"sup\", ...rest); }\r\nexport function Table(...rest: ElementChild[]) { return HtmlTag(\"table\", ...rest); }\r\nexport function TBody(...rest: ElementChild[]) { return HtmlTag(\"tbody\", ...rest); }\r\nexport function TD(...rest: ElementChild[]) { return HtmlTag(\"td\", ...rest); }\r\nexport function Template(...rest: ElementChild[]) { return HtmlTag(\"template\", ...rest); }\r\nexport function TextArea(...rest: ElementChild[]) { return HtmlTag(\"textarea\", ...rest); }\r\nexport function TFoot(...rest: ElementChild[]) { return HtmlTag(\"tfoot\", ...rest); }\r\nexport function TH(...rest: ElementChild[]) { return HtmlTag(\"th\", ...rest); }\r\nexport function THead(...rest: ElementChild[]) { return HtmlTag(\"thead\", ...rest); }\r\nexport function Time(...rest: ElementChild[]) { return HtmlTag(\"time\", ...rest); }\r\nexport function Title(...rest: ElementChild[]) { return HtmlTag(\"title\", ...rest); }\r\nexport function TR(...rest: ElementChild[]) { return HtmlTag(\"tr\", ...rest); }\r\nexport function Track(...rest: ElementChild[]) { return HtmlTag(\"track\", ...rest); }\r\nexport function U(...rest: ElementChild[]) { return HtmlTag(\"u\", ...rest); }\r\nexport function UL(...rest: ElementChild[]) { return HtmlTag(\"ul\", ...rest); }\r\nexport function Var(...rest: ElementChild[]) { return HtmlTag(\"var\", ...rest); }\r\nexport function Video(...rest: ElementChild[]) { return HtmlTag(\"video\", ...rest); }\r\nexport function WBR() { return HtmlTag(\"wbr\"); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a button.\r\n */\r\nexport function InputButton(...rest: ElementChild[]) { return Input(Type(\"button\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a checkbox.\r\n */\r\nexport function InputCheckbox(...rest: ElementChild[]) { return Input(Type(\"checkbox\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a color picker.\r\n */\r\nexport function InputColor(...rest: ElementChild[]) { return Input(Type(\"color\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a date picker.\r\n */\r\nexport function InputDate(...rest: ElementChild[]) { return Input(Type(\"date\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a local date-time picker.\r\n */\r\nexport function InputDateTime(...rest: ElementChild[]) { return Input(Type(\"datetime-local\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is an email entry field.\r\n */\r\nexport function InputEmail(...rest: ElementChild[]) { return Input(Type(\"email\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a file picker.\r\n */\r\nexport function InputFile(...rest: ElementChild[]) { return Input(Type(\"file\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a hidden field.\r\n */\r\nexport function InputHidden(...rest: ElementChild[]) { return Input(Type(\"hidden\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a graphical submit button.\r\n */\r\nexport function InputImage(...rest: ElementChild[]) { return Input(Type(\"image\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a month picker.\r\n */\r\nexport function InputMonth(...rest: ElementChild[]) { return Input(Type(\"month\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a month picker.\r\n */\r\nexport function InputNumber(...rest: ElementChild[]) { return Input(Type(\"number\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a password entry field.\r\n */\r\nexport function InputPassword(...rest: ElementChild[]) { return Input(Type(\"password\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a radio button.\r\n */\r\nexport function InputRadio(...rest: ElementChild[]) { return Input(Type(\"radio\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a range selector.\r\n */\r\nexport function InputRange(...rest: ElementChild[]) { return Input(Type(\"range\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a form reset button.\r\n */\r\nexport function InputReset(...rest: ElementChild[]) { return Input(Type(\"reset\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a search entry field.\r\n */\r\nexport function InputSearch(...rest: ElementChild[]) { return Input(Type(\"search\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a submit button.\r\n */\r\nexport function InputSubmit(...rest: ElementChild[]) { return Input(Type(\"submit\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a telephone number entry field.\r\n */\r\nexport function InputTelephone(...rest: ElementChild[]) { return Input(Type(\"tel\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a text entry field.\r\n */\r\nexport function InputText(...rest: ElementChild[]) { return Input(Type(\"text\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a time picker.\r\n */\r\nexport function InputTime(...rest: ElementChild[]) { return Input(Type(\"time\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a URL entry field.\r\n */\r\nexport function InputURL(...rest: ElementChild[]) { return Input(Type(\"url\"), ...rest); }\r\n\r\n/**\r\n * creates an HTML Input tag that is a week picker.\r\n */\r\nexport function InputWeek(...rest: ElementChild[]) { return Input(Type(\"week\"), ...rest); }\r\n\r\n/**\r\n * Creates a text node out of the give input.\r\n */\r\nexport function TextNode(txt: any) {\r\n    return document.createTextNode(txt);\r\n}\r\n\r\n/**\r\n * Creates a Div element with margin: auto.\r\n */\r\nexport function Run(...rest: ElementChild[]) {\r\n    return Div(\r\n        margin(\"auto\"),\r\n        ...rest);\r\n}\r\n\r\nexport function Style(...props: PropSet[]) {\r\n    const elem = document.createElement(\"style\");\r\n    document.head.append(elem);\r\n    for (const prop of props) {\r\n        prop.applyToSheet(elem.sheet);\r\n    }\r\n\r\n    return elem;\r\n}\r\n\r\nexport function StyleBlob(...props: (string | PropSet)[]) {\r\n    const blob = new Blob(props.map(p => p.toString()), {\r\n        type: Text_Css.value\r\n    });\r\n    return Link(\r\n        Rel(\"stylesheet\"),\r\n        Href(blob)\r\n    );\r\n}", "export function getColumnIndex(element: Element) {\r\n    let column = element;\r\n    while (column\r\n        && column.tagName !== \"TD\"\r\n        && column.tagName !== \"TH\") {\r\n        column = column.parentElement;\r\n    }\r\n\r\n    if (column) {\r\n        const columnRow = column.parentElement;\r\n        let columnIndex = 0;\r\n        for (const child of columnRow.children) {\r\n            if (child === column) {\r\n                return columnIndex;\r\n            }\r\n\r\n            if (child instanceof HTMLTableCellElement) {\r\n                columnIndex += child.colSpan;\r\n            }\r\n        }\r\n    }\r\n\r\n    return -1;\r\n}", "import { isNumber } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nexport function debounce<T extends (...args: any[]) => any>(action: T): (...args: Parameters<T>) => void\r\nexport function debounce<T extends (...args: any[]) => any>(time: number, action: T): (...args: Parameters<T>) => void;\r\nexport function debounce<T extends (...args: any[]) => any>(timeOrAction: number | T, action?: T): (...args: Parameters<T>) => void {\r\n    let time = 0;\r\n    if (isNumber(timeOrAction)) {\r\n        time = timeOrAction;\r\n    }\r\n    else {\r\n        action = timeOrAction;\r\n    }\r\n\r\n    let ready = true;\r\n    return (...args: Parameters<T>) => {\r\n        if (ready) {\r\n            ready = false;\r\n            setTimeout(() => {\r\n                ready = true;\r\n                action(...args);\r\n            }, time);\r\n        }\r\n    };\r\n}\r\n\r\n", "import { arrayClear, arrayReplace, insertSorted, binarySearch, compareBy } from \"@juniper-lib/collections/dist/arrays\";\r\nimport { ClassList, ColSpan, CustomData, QueryAll } from \"@juniper-lib/dom/dist/attrs\";\r\nimport { padding, px } from \"@juniper-lib/dom/dist/css\";\r\nimport { getColumnIndex } from \"@juniper-lib/dom/dist/getColumnIndex\";\r\nimport { ButtonReset, ButtonSecondaryOutlineSmall, ElementChild, ErsatzElement, Label, Span, TBody, TD, TFoot, TH, THead, TR, Table, buttonSetEnabled, HtmlRender, elementClearChildren, elementGetText, elementSetClass, elementSetText } from \"@juniper-lib/dom/dist/tags\";\r\nimport { debounce } from \"@juniper-lib/events/dist/debounce\";\r\nimport { identity } from \"@juniper-lib/tslib/dist/identity\";\r\nimport { stringRandom } from \"@juniper-lib/tslib/dist/strings/stringRandom\";\r\nimport { isDate, isDefined, isNullOrUndefined, isNumber } from \"@juniper-lib/tslib/dist/typeChecks\";\r\n\r\nimport \"./style.css\";\r\n\r\nexport type HTMLValuedElement = HTMLInputElement | HTMLSelectElement;\r\n\r\nfunction makeDate(value: string): Date {\r\n    if (/^\\d{4}-\\d\\d?-\\d\\d?$/.test(value)) {\r\n        const parts = value.split(\"-\");\r\n        const year = parts.shift();\r\n        parts.push(year);\r\n        value = parts.join(\"/\");\r\n    }\r\n    return new Date(value);\r\n}\r\n\r\nfunction isRangeStart(filterElement: HTMLValuedElement) {\r\n    return filterElement.classList.contains(\"range-start\");\r\n}\r\n\r\nfunction isRangeEnd(filterElement: HTMLValuedElement): boolean {\r\n    return filterElement.classList.contains(\"range-end\");\r\n}\r\n\r\nfunction parseValue(input: HTMLValuedElement, value: string): string | number | Date {\r\n    if (input instanceof HTMLInputElement && (input.type.startsWith(\"date\") || input.type.startsWith(\"time\") || input.type.startsWith(\"month\") || input.type.startsWith(\"week\"))) {\r\n        return value && makeDate(value) || null;\r\n    }\r\n    else if (input instanceof HTMLInputElement && (input.type === \"number\" || input.type === \"range\")) {\r\n        return value && parseFloat(value) || null;\r\n    }\r\n    else {\r\n        return value && value.toLocaleLowerCase() || null;\r\n    }\r\n}\r\n\r\nfunction getCellValue(cell: HTMLTableCellElement, filterElement: HTMLValuedElement) {\r\n    const inputs = Array.from(cell.querySelectorAll<HTMLInputElement>(\"input\"));\r\n    if (inputs.length === 0) {\r\n        const text = cell.textContent.trim();\r\n        return [parseValue(filterElement, text)];\r\n    }\r\n    else {\r\n        return inputs.map(input => parseValue(input, input.value));\r\n    }\r\n}\r\n\r\nexport interface FilterableTableColumn<T> {\r\n    header?: ElementChild;\r\n    headerColSpan?: number;\r\n    filter?: HTMLValuedElement;\r\n    filterColSpan?: number;\r\n    getCellValue?: (value: T, row?: HTMLTableRowElement) => ElementChild;\r\n}\r\n\r\nexport interface FilterableTableOptions<T> {\r\n    resourceName: string;\r\n    pageSizes?: number[];\r\n    columns: FilterableTableColumn<T>[];\r\n}\r\n\r\nconst DEFAULT_PAGE_SIZES = [\r\n    10,\r\n    25,\r\n    50,\r\n    100\r\n];\r\n\r\nconst comparer = compareBy<number>(identity);\r\n\r\nexport class FilterableTable<T extends any> implements ErsatzElement<HTMLTableElement> {\r\n\r\n    static create<T>(options: FilterableTableOptions<T>) {\r\n        const headerRow = TR();\r\n        const filterRow = TR();\r\n        let burnHeader = 0;\r\n        let burnFilter = 0;\r\n        for (const column of options.columns) {\r\n            let filterId = null;\r\n            if (burnHeader > 0) {\r\n                --burnHeader;\r\n            }\r\n            else {\r\n                const header = Label(column.header);\r\n                if (column.filter) {\r\n                    filterId = stringRandom(10);\r\n                    header.htmlFor = filterId;\r\n                }\r\n                const headerCell = TH(header);\r\n                if (isDefined(column.headerColSpan)) {\r\n                    headerCell.colSpan = column.headerColSpan;\r\n                    burnHeader = column.headerColSpan - 1;\r\n                }\r\n                headerRow.appendChild(headerCell);\r\n            }\r\n\r\n            if (burnFilter > 0) {\r\n                --burnFilter;\r\n            }\r\n            else if (column.filter) {\r\n                const filter = column.filter;\r\n                if (filterId) {\r\n                    filter.id = filterId;\r\n                }\r\n                if (column.header && filter instanceof HTMLInputElement) {\r\n                    filter.placeholder = \"Filter by \" + column.header;\r\n                }\r\n                const filterCell = TH(filter);\r\n                if (isDefined(column.filterColSpan)) {\r\n                    filterCell.colSpan = column.filterColSpan;\r\n                    burnFilter = column.filterColSpan - 1;\r\n                }\r\n                filterRow.appendChild(filterCell);\r\n            }\r\n        }\r\n\r\n        let lastColumn = getColumnIndex(headerRow.lastElementChild) - 1;\r\n        while (getColumnIndex(filterRow.lastElementChild) < lastColumn) {\r\n            filterRow.appendChild(TH());\r\n        }\r\n\r\n        filterRow.appendChild(TH(ButtonReset(ClassList(\"btn\", \"btn-secondary\"), \"Reset\")));\r\n\r\n        lastColumn = getColumnIndex(filterRow.lastElementChild);\r\n        while (lastColumn > getColumnIndex(headerRow.lastElementChild)) {\r\n            headerRow.appendChild(TH());\r\n        }\r\n\r\n        const table = new FilterableTable<T>(Table(\r\n            ClassList(\"table\", \"table-responsive\", \"table-hover\", \"table-striped\", \"summary\"),\r\n            CustomData(\"resourcename\", options.resourceName),\r\n            THead(\r\n                headerRow,\r\n                filterRow\r\n            ),\r\n            TBody()\r\n        ));\r\n\r\n        options.columns.forEach((c, i) => table.setCellMapper(i, c.getCellValue));\r\n        table.setPageSizes(options.pageSizes || DEFAULT_PAGE_SIZES);\r\n\r\n        return table;\r\n    }\r\n\r\n    private readonly update: (updatedElement?: HTMLValuedElement) => void;\r\n\r\n    private readonly resourceName: string;\r\n    private readonly rows: Array<HTMLTableRowElement>;\r\n    private readonly ranges = new Map<number, [HTMLValuedElement, HTMLValuedElement]>();\r\n    private readonly valueCache = new Map<HTMLValuedElement, string | number | Date>();\r\n    private readonly filterElements: HTMLValuedElement[];\r\n    private readonly colCount: number;\r\n    private readonly noContentMessageElement: HTMLTableRowElement;\r\n    private readonly paginator: HTMLTableCellElement;\r\n    private readonly columnIndices: Map<HTMLValuedElement, number>;\r\n    private readonly resetButton: HTMLButtonElement = null;\r\n    private readonly cellMappers = new Map<number, (value: T, row?: HTMLTableRowElement) => ElementChild>();\r\n    private readonly pageSizes = [0, ...DEFAULT_PAGE_SIZES];\r\n    private readonly pageIndexKey: string;\r\n    private readonly pageSizeKey: string;\r\n\r\n    private _pageIndex: number;\r\n    get pageIndex() {\r\n        return this._pageIndex;\r\n    }\r\n\r\n    set pageIndex(v) {\r\n        this._pageIndex = v;\r\n        localStorage.setItem(this.pageIndexKey, v.toString());\r\n    }\r\n\r\n    private _pageSize: number;\r\n    get pageSize() {\r\n        return this._pageSize;\r\n    }\r\n\r\n    set pageSize(v) {\r\n        this._pageSize = v;\r\n        localStorage.setItem(this.pageSizeKey, v.toString());\r\n    }\r\n\r\n    constructor(public readonly element: HTMLTableElement) {\r\n        this.update = debounce(this._update.bind(this));\r\n\r\n        this.resourceName = this.element.dataset.resourcename;\r\n        this.pageIndexKey = `${this.resourceName}-page-index`;\r\n        this.pageSizeKey = `${this.resourceName}-page-size`;\r\n\r\n        this.rows = QueryAll(this.element, \"tbody > tr\");\r\n\r\n        this.ranges = new Map<number, [HTMLValuedElement, HTMLValuedElement]>();\r\n\r\n        if (this.element.tHead) {\r\n            this.filterElements = QueryAll(this.element.tHead, \"input,select\");\r\n            this.resetButton = this.element.tHead.querySelector<HTMLButtonElement>(\"button[type=reset]\");\r\n        }\r\n        else {\r\n            this.filterElements = [];\r\n        }\r\n\r\n        this.colCount = Math.max(\r\n            ...QueryAll(this.element, \"tr\")\r\n                .map(r => r.children.length)\r\n        );\r\n\r\n        this.noContentMessageElement = TR(TD(ColSpan(this.colCount), \"No content\"));\r\n        this.paginator = TD(ColSpan(this.colCount), ClassList(\"multi\"));\r\n        this.columnIndices = new Map<HTMLValuedElement, number>();\r\n\r\n        if (this.resetButton) {\r\n            this.resetButton.addEventListener(\"click\", () => {\r\n                this.valueCache.clear();\r\n                for (const element of this.filterElements) {\r\n                    this.deleteValue(element);\r\n                    element.value = \"\";\r\n                }\r\n                this.update();\r\n            });\r\n        }\r\n\r\n        if (!this.element.tFoot) {\r\n            this.element.tFoot = TFoot();\r\n        }\r\n\r\n        HtmlRender(this.element.tFoot,\r\n            this.noContentMessageElement,\r\n            ...this.element.tFoot.children,\r\n            TR(this.paginator));\r\n\r\n        for (const f of this.filterElements) {\r\n            const idx = getColumnIndex(f);\r\n            this.columnIndices.set(f, idx);\r\n            f.addEventListener(\"input\", this.update.bind(null, f));\r\n            this.restoreValue(f);\r\n            if (isRangeStart(f)\r\n                || isRangeEnd(f)) {\r\n                if (!this.ranges.has(idx)) {\r\n                    this.ranges.set(idx, [null, null]);\r\n                }\r\n\r\n                const range = this.ranges.get(idx);\r\n                const part = isRangeStart(f) ? 0 : 1;\r\n                range[part] = f;\r\n            }\r\n        }\r\n\r\n        for (const f of this.element.querySelectorAll(\"input\")) {\r\n            f.classList.add(\"form-control\", \"form-control-sm\");\r\n        }\r\n\r\n        for (const f of this.element.querySelectorAll(\"select\")) {\r\n            f.classList.add(\"custom-select\", \"custom-select-sm\");\r\n        }\r\n\r\n        this.pageIndex = parseFloat(localStorage.getItem(this.pageIndexKey) || \"0\");\r\n        this.pageSize = parseFloat(localStorage.getItem(this.pageSizeKey) || \"10\");\r\n\r\n        if (isDefined(this.element.dataset.pagesizes)\r\n            && this.element.dataset.pagesizes.length > 0) {\r\n            const sizes = this.element.dataset.pagesizes\r\n                .split(\",\")\r\n                .map(v => parseFloat(v.trim()))\r\n                .filter(identity);\r\n            this.setPageSizes(sizes);\r\n        }\r\n        else {\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    setPageSizes(pageSizes: number[]): void {\r\n        if (isNullOrUndefined(pageSizes) || pageSizes.length === 0) {\r\n            throw new Error(\"Need at least one page size\");\r\n        }\r\n        arrayReplace(this.pageSizes, 0, ...pageSizes);\r\n        this.pageSize = this.pageSizes[1];\r\n        this.update();\r\n    }\r\n\r\n    setCellMapper(columnIndex: number, mapper: (value: T, row?: HTMLTableRowElement) => ElementChild): void {\r\n        this.cellMappers.set(columnIndex, mapper);\r\n    }\r\n\r\n    clear(): void {\r\n        arrayClear(this.rows);\r\n        for (const body of this.element.tBodies) {\r\n            elementClearChildren(body);\r\n        }\r\n        this._update();\r\n    }\r\n\r\n    setValues(...values: T[]): void {\r\n        const newRows = values.map(value => {\r\n            const row = TR();\r\n            for (let i = 0; i < this.colCount; ++i) {\r\n                const cell = TD();\r\n                if (this.cellMappers.has(i)) {\r\n                    HtmlRender(cell, this.cellMappers.get(i)(value, row));\r\n                }\r\n                row.appendChild(cell);\r\n            }\r\n            this.rows.push(row);\r\n            return row;\r\n        });\r\n\r\n        arrayReplace(this.rows, ...newRows);\r\n\r\n        for (const body of this.element.tBodies) {\r\n            elementClearChildren(body);\r\n        }\r\n\r\n        HtmlRender(this.contentRoot,\r\n            ...this.rows\r\n        );\r\n\r\n        this._update();\r\n    }\r\n\r\n    select(sel: HTMLTableRowElement) {\r\n        let selectedIndex: number = null;\r\n        for (let i = 0; i < this.rows.length; ++i) {\r\n            const row = this.rows[i];\r\n            const selected = row === sel;\r\n            elementSetClass(row, selected, \"selected\");\r\n            if (selected) {\r\n                selectedIndex = i;\r\n            }\r\n        }\r\n\r\n        if (selectedIndex !== null) {\r\n            this.pageIndex = Math.floor(selectedIndex / this.pageSize) * this.pageSize;\r\n            this.update();\r\n        }\r\n    }\r\n\r\n    get noContentMessage(): string {\r\n        return elementGetText(this.noContentMessageElement);\r\n    }\r\n\r\n    set noContentMessage(v: string) {\r\n        elementSetText(this.noContentMessageElement, v);\r\n    }\r\n\r\n    private get contentRoot() { return this.element.tBodies[0]; }\r\n\r\n    private makeKey(filterElement: HTMLValuedElement): string {\r\n        return `yarrow:${this.resourceName}:${filterElement.id}`;\r\n    }\r\n\r\n    private saveValue(filterElement: HTMLValuedElement, value: string | number | Date): void {\r\n        const key = this.makeKey(filterElement);\r\n        if (value) {\r\n            localStorage.setItem(key, value.toString());\r\n        }\r\n        else {\r\n            localStorage.removeItem(key);\r\n        }\r\n    }\r\n\r\n    private deleteValue(filterElement: HTMLValuedElement): void {\r\n        const key = this.makeKey(filterElement);\r\n        localStorage.removeItem(key);\r\n    }\r\n\r\n    private restoreValue(input: HTMLValuedElement): void {\r\n        const key = this.makeKey(input);\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (!isDefined(value)) {\r\n            input.value = \"\";\r\n        }\r\n        else if (input instanceof HTMLSelectElement) {\r\n            input.value = value;\r\n            this.valueCache.set(input, input.value);\r\n        }\r\n        else if (input.type.startsWith(\"date\")) {\r\n            const date = makeDate(value);\r\n            input.valueAsDate = date;\r\n            this.valueCache.set(input, date);\r\n        }\r\n        else if (input.type === \"number\"\r\n            || input.type === \"range\") {\r\n            const number = parseFloat(value);\r\n            input.valueAsNumber = number;\r\n            this.valueCache.set(input, number);\r\n        }\r\n        else {\r\n            input.value = value;\r\n            this.valueCache.set(input, input.value);\r\n        }\r\n    }\r\n\r\n    private isRange(filterElement: HTMLValuedElement) {\r\n        const idx = getColumnIndex(filterElement);\r\n        return this.ranges.has(idx);\r\n    }\r\n\r\n    private _update(updatedElement: HTMLValuedElement = null) {\r\n        if (isDefined(updatedElement)) {\r\n            const value = parseValue(updatedElement, updatedElement.value);\r\n            this.saveValue(updatedElement, value);\r\n            if (value) {\r\n                this.valueCache.set(updatedElement, value);\r\n            }\r\n            else {\r\n                this.valueCache.delete(updatedElement);\r\n            }\r\n        }\r\n\r\n        if (this.resetButton) {\r\n            buttonSetEnabled(this.resetButton, this.valueCache.size > 0, \"Reset\", \"Clear out filters\");\r\n            elementSetClass(this.resetButton, this.valueCache.size > 0, \"btn-secondary\");\r\n            elementSetClass(this.resetButton, this.valueCache.size === 0, \"btn-outline-secondary\");\r\n        }\r\n\r\n        let showCount = 0;\r\n        for (let r = 0; r < this.rows.length; ++r) {\r\n            const row = this.rows[r] as HTMLTableRowElement;\r\n            let showCell = true;\r\n\r\n            for (let f = 0; f < this.filterElements.length && showCell; ++f) {\r\n                const element = this.filterElements[f];\r\n                const columnIndex = this.columnIndices.get(element);\r\n                if (this.isRange(element)) {\r\n                    const [minFilterElement, maxFilterElement] = this.ranges.get(columnIndex);\r\n                    const minFilterValue = this.valueCache.get(minFilterElement) as Date;\r\n                    const maxFilterValue = this.valueCache.get(maxFilterElement) as Date;\r\n                    const cell = row.children[columnIndex] as HTMLTableCellElement;\r\n                    const cellValues = getCellValue(cell, minFilterElement);\r\n\r\n                    let matches: boolean[] = null;\r\n                    if (isDefined(minFilterValue)\r\n                        && isDefined(maxFilterValue)) {\r\n                        matches = cellValues.map(cellValue =>\r\n                            minFilterValue <= cellValue && cellValue <= maxFilterValue);\r\n\r\n                    }\r\n                    else if (isDefined(minFilterValue)) {\r\n                        matches = cellValues.map(cellValue =>\r\n                            minFilterValue <= cellValue);\r\n                    }\r\n                    else if (isDefined(maxFilterValue)) {\r\n                        matches = cellValues.map(cellValue =>\r\n                            cellValue <= maxFilterValue);\r\n                    }\r\n\r\n                    if (matches) {\r\n                        const match = matches.reduce((a, b) => a || b, false);\r\n                        showCell &&= match;\r\n                    }\r\n                }\r\n                else {\r\n                    const filterValue = this.valueCache.get(element);\r\n                    if (filterValue) {\r\n                        const cell = row.children[columnIndex] as HTMLTableCellElement;\r\n                        const cellValues = getCellValue(cell, element);\r\n                        const matches = cellValues.map(cellValue =>\r\n                            isNullOrUndefined(cellValue)\r\n                                ? true\r\n                                : isDate(cellValue)\r\n                                    ? (filterValue as Date).getTime() === cellValue.getTime()\r\n                                    : isNumber(cellValue)\r\n                                        ? cellValue === filterValue\r\n                                        : filterValue === \"XXX_NONE_XXX\"\r\n                                            ? cellValue.length === 0 || cellValue === \"NONE\"\r\n                                            : element.classList.contains(\"exact\")\r\n                                                ? cellValue.toLocaleLowerCase() === filterValue\r\n                                                : cellValue.toLocaleLowerCase().indexOf(filterValue as string) > -1);\r\n                        const match = matches.reduce((a, b) => a || b, false);\r\n                        showCell &&= match;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (showCell) {\r\n                ++showCount;\r\n            }\r\n\r\n            row.style.display = showCell\r\n                ? \"\"\r\n                : \"none\";\r\n        }\r\n\r\n        const numPages = Math.ceil(showCount / this.pageSize);\r\n        const lastPage = Math.max(0, numPages - 1);\r\n        const curPage = Math.min(lastPage, Math.floor(this.pageIndex / this.pageSize));\r\n        this.pageIndex = curPage * this.pageSize;\r\n\r\n        const nextPage = Math.min(lastPage, curPage + 1);\r\n        const prevPage = Math.max(0, curPage - 1);\r\n        const minIndex = curPage * this.pageSize;\r\n        const maxIndex = minIndex + this.pageSize;\r\n\r\n        const filteredRows = this.rows.filter(r => r.style.display !== \"none\");\r\n        for (let i = 0; i < filteredRows.length; ++i) {\r\n            if (i < minIndex || maxIndex <= i) {\r\n                filteredRows[i].style.display = \"none\";\r\n            }\r\n        }\r\n\r\n        this.noContentMessageElement.style.display = showCount === 0\r\n            ? \"\"\r\n            : \"none\";\r\n\r\n        elementClearChildren(this.paginator);\r\n\r\n        const pageNumbers: number[] = [];\r\n        const addPage = (page: number) => {\r\n            const idx = binarySearch(pageNumbers, page, comparer);\r\n            if (idx < 0) {\r\n                insertSorted(pageNumbers, page, idx);\r\n            }\r\n        };\r\n\r\n        addPage(0);\r\n        addPage(curPage);\r\n        addPage(prevPage);\r\n        addPage(nextPage);\r\n        addPage(lastPage);\r\n\r\n        const lastIndex = lastPage * this.pageSize;\r\n        const prevPageIndex = Math.max(0, this.pageIndex - this.pageSize);\r\n\r\n        const makeChunk = (text: string, enabled: boolean) => {\r\n            let chunk: HTMLElement;\r\n            if (enabled) {\r\n                chunk = ButtonSecondaryOutlineSmall(text);\r\n            }\r\n            else {\r\n                chunk = Span(padding(px(5), px(10)), text);\r\n            }\r\n            this.paginator.append(chunk);\r\n            return chunk;\r\n        };\r\n\r\n        const makePageIndexLink = (text: string, index: number) => {\r\n            const enabled = 0 <= index\r\n                && index <= lastIndex\r\n                && index !== this.pageIndex;\r\n            const link = makeChunk(text, enabled);\r\n            if (enabled) {\r\n                link.addEventListener(\"click\", () => {\r\n                    this.pageIndex = index;\r\n                    this.update();\r\n                });\r\n            }\r\n        };\r\n\r\n        const makePageSizeLink = (size: number) => {\r\n            const enabled = size !== this.pageSize;\r\n            const link = makeChunk(size.toString(), enabled);\r\n            if (enabled) {\r\n                link.addEventListener(\"click\", () => {\r\n                    this.pageSize = size;\r\n                    this.update();\r\n                });\r\n            }\r\n        };\r\n\r\n        makePageIndexLink(\"<\", prevPageIndex);\r\n\r\n        let last = -1;\r\n        for (const pageNumber of pageNumbers) {\r\n            const delta = pageNumber - last;\r\n            last = pageNumber;\r\n            if (delta > 1) {\r\n                makeChunk(\"...\", false);\r\n            }\r\n            makePageIndexLink((pageNumber + 1).toFixed(0), pageNumber * this.pageSize);\r\n        }\r\n\r\n        makePageIndexLink(\">\", maxIndex);\r\n\r\n        makeChunk(\"|\", false);\r\n        makeChunk(`${showCount} filtered items of ${this.rows.length} results`, false);\r\n\r\n        if (this.pageSizes.length > 2) {\r\n            makeChunk(\"|\", false);\r\n            makeChunk(\"Items per page:\", false);\r\n            for (let i = 1; i < this.pageSizes.length; ++i) {\r\n                if (this.rows.length > this.pageSizes[i - 1]) {\r\n                    makePageSizeLink(this.pageSizes[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n", "import { getElements } from \"@juniper-lib/dom/dist/tags\";\r\nimport { FilterableTable } from \"@juniper-lib/widgets/dist/FilterableTable\";\r\n\r\nconst tables = getElements<HTMLTableElement>(\"table.summary\");\r\nfor (const table of tables) {\r\n    new FilterableTable(table);\r\n}"],
  "mappings": ";AAAA,SAAS,EAAE,GAAQ,GAAW,GAAW;AACrC,SAAO,OAAO,MAAM,KACb,aAAa;AACxB;AAEM,SAAU,WAAW,KAAQ;AAC/B,SAAO,EAAE,KAAK,YAAY,QAAQ;AACtC;AAEM,SAAU,SAAS,KAAQ;AAC7B,SAAO,EAAE,KAAK,UAAU,MAAM;AAClC;AAEM,SAAU,UAAU,KAAQ;AAC9B,SAAO,EAAE,KAAK,WAAW,OAAO;AACpC;AAEM,SAAU,SAAS,KAAQ;AAC7B,SAAO,EAAE,KAAK,UAAU,MAAM;AAClC;AAqBM,SAAU,SAAS,KAAQ;AAC7B,SAAO,UAAU,GAAG,KACb,EAAE,KAAK,UAAU,MAAM;AAClC;AAMM,SAAU,OAAO,KAAQ;AAC3B,SAAO,eAAe;AAC1B;AAUM,SAAU,kBAAqB,KAAyB;AAC1D,SAAO,QAAQ,QACR,QAAQ;AACnB;AAEM,SAAU,UAAa,KAAyB;AAClD,SAAO,CAAC,kBAAkB,GAAG;AACjC;;;AC9DA,SAAS,cAAiB,KAAQ;AAC9B,SAAO,SAAS,GAAG,KACZ,eAAe,OACf,WAAW,IAAI,SAAS;AACnC;AAYM,SAAU,UAAa,8BAAwE,SAAmC;AACpI,MAAI,YAA8B;AAClC,MAAI,SAAS,yBAAyB,GAAG;AACrC,gBAAY;SAEX;AACD,gBAAY;AACZ,YAAQ,QAAQ,yBAAyB;;AAG7C,QAAM,IAAI,cAAc,cAAc,IAAI;AAE1C,QAAMA,YAAW,CAAC,GAAM,MAAQ;AAC5B,QAAI,MAAM,GAAG;AACT,aAAO;;AAGX,eAAW,UAAU,SAAS;AAC1B,YAAM,OAAO,kBAAkB,CAAC,IAAI,OAAO,OAAO,CAAC;AACnD,YAAM,OAAO,kBAAkB,CAAC,IAAI,OAAO,OAAO,CAAC;AACnD,YAAM,WAAW,SAAS,OACpB,IACA,SAAS,IAAI,KAAK,SAAS,IAAI,IAC3B,IAAI,KAAK,cAAc,IAAI,IAC3B,cAAc,IAAI,KAAK,cAAc,IAAI,IACrC,IAAI,KAAK,UAAU,IAAI,IACvB,cAAc,eAAe,OAAO,QAC/B,cAAc,gBAAgB,OAAO,OACtC,IAAI;AAEtB,UAAI,aAAa,GAAG;AAChB,eAAO;;;AAIf,WAAO;EACX;AAEA,SAAO,OAAO,OAAOA,WAAU;IAC3B;GACH;AACL;AAIM,SAAU,aAAgB,KAAmB,aAAgBA,WAA8B,OAAmB,UAAQ;AACxH,MAAI,OAAO;AACX,MAAI,QAAQ,IAAI,SAAS;AACzB,SAAO,QAAQ,OAAO;AAClB,QAAI,MAAO,OAAO,SAAU;AAC5B,QAAI,WAAWA,UAAS,IAAI,GAAG,GAAG,WAAW;AAC7C,QAAI,aAAa,GAAG;AAChB,UAAI,SAAS,UAAU;AACnB,cAAM,gBAAgB,SAAS,WAAW,IAAI;AAC9C,YAAI,gBAAgB,GAAG;AACnB,iBAAO;;AAEX,eAAO,KAAK,OACL,MAAM,IAAI,WACT,WAAWA,UAAS,IAAI,GAAG,GAAG,WAAW,OAAO,GAAG;AACvD,iBAAO;;AAEX,YAAI,gBAAgB,GAAG;AACnB,iBAAO;;;AAIf,aAAO;eAEF,WAAW,GAAG;AACnB,aAAO,MAAM;WAEZ;AACD,cAAQ,MAAM;;;AAItB,SAAO,CAAC,OAAO;AACnB;AAOM,SAAU,aAAgB,KAAU,KAAQ,eAA4C,OAAmB,UAAQ;AACrH,QAAM,kBAAkB,SAAS;AACjC,MAAI,SAAS,OAAO;AAChB,WAAO;;AAGX,MAAI,MAAc;AAClB,MAAI,SAAS,aAAa,GAAG;AACzB,UAAM;SAEL;AACD,UAAM,aAAa,KAAK,KAAK,eAAe,IAAI;;AAGpD,MAAI,MAAM,GAAG;AACT,UAAM,CAAC,MAAM;aAER,CAAC,iBAAiB;AACvB,WAAO;;AAGX,gBAAc,KAAK,KAAK,GAAG;AAC3B,SAAO;AACX;AAiBM,SAAU,WAAc,KAAQ;AAClC,SAAO,IAAI,OAAO,CAAC;AACvB;AAsCM,SAAU,cAAiB,KAAU,MAAS,KAAW;AAC3D,MAAI,OAAO,KAAK,GAAG,IAAI;AAC3B;AAuBM,SAAU,YAAe,KAAU,OAAQ;AAC7C,QAAM,MAAM,IAAI,QAAQ,KAAK;AAC7B,MAAI,MAAM,IAAI;AACV,kBAAc,KAAK,GAAG;AACtB,WAAO;;AAGX,SAAO;AACX;AAmBM,SAAU,cAAiB,KAAU,KAAW;AAClD,SAAO,IAAI,OAAO,KAAK,CAAC,EAAE,CAAC;AAC/B;AAWM,SAAU,aAAgB,QAAa,OAAU;AACnD,MAAI,OAAO,GAAG,IAAI,QAAQ,GAAG,KAAK;AACtC;;;AC9PM,SAAU,SAAY,MAAO;AAC/B,SAAO;AACX;;;ACkBM,IAAO,OAAP,MAAW;;;;;;;EA8Bb,YAA6B,YAAY,MAAI;AAAhB,SAAA,YAAA;AA7BZ,SAAA,UAAU,IAAI,MAAK;AACnB,SAAA,YAAY,IAAI,MAAK;AAE9B,SAAA,UAAoB;AACpB,SAAA,SAAc;AACd,SAAA,kBAAsC;AACtC,SAAA,eAAgC;AA4BpC,SAAK,UAAU,CAAC,UAAS;AACrB,UAAI,KAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,eAAe;AAEpB,mBAAW,WAAW,KAAK,SAAS;AAChC,kBAAQ,KAAK;;AAGjB,aAAK,MAAK;AACV,aAAK,kBAAkB;;IAE/B;AAEA,SAAK,SAAS,CAAC,WAAU;AACrB,UAAI,KAAK,SAAS;AACd,aAAK,SAAS;AACd,aAAK,eAAe;AAEpB,mBAAW,WAAW,KAAK,WAAW;AAClC,kBAAQ,MAAM;;AAGlB,aAAK,MAAK;AACV,aAAK,kBAAkB;;IAE/B;AAEA,QAAI,KAAK,WAAW;AAChB,WAAK,MAAK;;EAElB;EAEQ,QAAK;AACT,eAAW,KAAK,OAAO;AACvB,eAAW,KAAK,SAAS;EAC7B;;;;;EAMA,QAAK;AACD,SAAK,kBAAkB;EAC3B;;;;;EAMA,SAAS,OAAe;AACpB,WAAO,MAAM,KAAK,QAAQ,KAAK;EACnC;EAEA,UACI,QACA,YACA,OAAe;AACf,UAAM,WAAW,KAAK,SAAS,KAAK;AACpC,WAAO,iBAAiB,YAAmB,QAAQ;AACnD,SAAK,QAAQ,MACT,OAAO,oBAAoB,YAAmB,QAAQ,CAAC;EAC/D;;;;;;;EAQA,IAAI,SAAM;AACN,QAAI,UAAU,KAAK,KAAK,GAAG;AACvB,YAAM,KAAK;;AAGf,WAAO,KAAK;EAChB;;;;EAKA,IAAI,QAAK;AACL,WAAO,KAAK;EAChB;;;;EAKA,IAAI,iBAAc;AACd,WAAO,KAAK;EAChB;;;;EAKA,IAAI,UAAO;AACP,WAAO,KAAK,mBAAmB;EACnC;;;;EAKA,IAAI,UAAO;AACP,WAAO,KAAK,mBAAmB;EACnC;;;;EAKA,IAAI,UAAO;AACP,WAAO,KAAK,mBAAmB;EACnC;;;;EAKA,IAAI,WAAQ;AACR,WAAO,KAAK,mBAAmB;EACnC;EAEA,IAAI,cAAW;AACX,WAAO,KAAK;EAChB;;;;EAKA,IAAI,WAAQ;AACR,WAAO,KAAK,gBAAgB;EAChC;;;;;EAMA,IAAI,UAAO;AACP,WAAO,KAAK,gBAAgB;EAChC;EAEA,KAAK,OAAO,WAAW,IAAC;AACpB,WAAO,KAAK,SAAQ;EACxB;;;;;EAMQ,UAAO;AACX,WAAO,IAAI,QAAkB,CAAC,SAAS,WAAU;AAC7C,UAAI,CAAC,KAAK,UAAU;AAChB,aAAK,QAAQ,KAAK,OAAO;AACzB,aAAK,UAAU,KAAK,MAAM;iBAErB,KAAK,SAAS;AACnB,eAAO,KAAK,KAAK;aAEhB;AACD,gBAAQ,KAAK,MAAM;;IAE3B,CAAC;EACL;;;;;;;EAQA,KAA4C,aAAqE,YAA8D;AAC3K,WAAO,KAAK,QAAO,EAAG,KAAK,aAAa,UAAU;EACtD;;;;;;EAOA,MAAuB,YAA4D;AAC/E,WAAO,KAAK,QAAO,EAAG,MAAM,UAAU;EAC1C;;;;;;;EAQA,QAAQ,WAAsB;AAC1B,WAAO,KAAK,QAAO,EAAG,QAAQ,SAAS;EAC3C;;;;;EAMA,QAAK;AACD,SAAK,OAAO,KAAK,SAAS;EAC9B;EAEA,UAAO;AACH,SAAK,OAAO,IAAI;EACpB;EAEQ,OAAO,OAAc;AACzB,QAAI,KAAK,SAAS;AACd,WAAK,OAAO,+BAA+B;;AAG/C,SAAK,MAAK;AACV,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,eAAe;AAEpB,QAAI,OAAO;AACP,WAAK,MAAK;;EAElB;;;;AC9QJ,IAAM,mBAAmB;AAEnB,SAAU,aAAa,QAAgB,SAAgB;AACzD,MAAI,SAAS,GAAG;AACZ,UAAM,IAAI,MAAM,+BAA+B;;AAGnD,MAAI,kBAAkB,OAAO,GAAG;AAC5B,cAAU;;AAGd,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,QAAQ,EAAE,GAAG;AAC7B,UAAM,MAAM,KAAK,MAAM,KAAK,OAAM,IAAK,QAAQ,MAAM;AACrD,WAAO,QAAQ,GAAG;;AAGtB,SAAO;AACX;;;ACfA,IAAM,WAAW,oBAAI,IAAG;AAKlB,IAAO,WAAP,MAAe;;;;;;;;EAWjB,YACoB,KACA,OACC,mBACd,MAAc;AAHD,SAAA,MAAA;AACA,SAAA,QAAA;AACC,SAAA,iBAAA;AAEjB,SAAK,OAAO,KAAK,IAAI,CAACC,OAAMA,GAAE,kBAAiB,CAAE;AACjD,WAAO,OAAO,IAAI;EACtB;;;;;EAMA,eAAe,MAAiB;AAC5B,QAAI,KAAK,KAAK,SAAS,KAChB,KAAK,KAAK,QAAQ,KAAK,OAAO,MAAM,IAAI;AAC3C,UAAI,MAAM,SAAS,IAAI,KAAK,OAAO;AACnC,UAAI,CAAC,KAAK;AACN,iBAAS,IAAI,KAAK,SAAS,MAAM,oBAAI,IAAG,CAAE;;AAG9C,UAAI,CAAC,IAAI,IAAI,KAAK,GAAG,GAAG;AACpB,YAAI,IAAI,KAAK,GAAG;AAChB,gBAAQ,KAAK,WAAW,KAAK,OAAO,+BAA+B,KAAK,GAAG,EAAE;;;AAIrF,QAAI,KAAK,gBAAgB;AACrB,WAAK,aAAa,KAAK,KAAK,KAAK,MAAM,SAAQ,CAAE;eAE5C,KAAK,OAAO,MAAM;AACtB,WAAiB,KAAK,GAAG,IAAI,KAAK;eAE9B,KAAK,UAAU,OAAO;AAC3B,WAAK,gBAAgB,KAAK,GAAG;eAExB,KAAK,UAAU,MAAM;AAC1B,WAAK,aAAa,KAAK,KAAK,EAAE;eAEzB,WAAW,KAAK,KAAK,GAAG;AAC7B,WAAK,MAAM,IAAI;WAEd;AACD,WAAK,aAAa,KAAK,KAAK,KAAK,MAAM,SAAQ,CAAE;;EAEzD;;AAGJ,SAAS,KAAqD,KAAQ,OAAU,mBAA4B,MAAc;AACtH,SAAO,IAAI,SAAS,KAAK,OAAO,gBAAgB,GAAG,IAAI;AAC3D;AAEM,SAAU,OAAO,KAAY;AAC/B,SAAO,eAAe;AAC1B;AAiUM,SAAU,aAAa,QAAgB;AACzC,WAAS,OAAO,OAAO,QAAQ;AAC/B,SAAO,KAAK,cAAc,CAAC,YAAyB,QAAQ,UAAU,IAAI,GAAG,MAAM,GAAG,KAAK;AAC/F;AAoBM,SAAU,QAAQ,OAAa;AAAI,SAAO,KAAK,WAAW,OAAO,OAAO,MAAM,IAAI;AAAG;AA6CrF,SAAU,WAAgC,MAAc,OAAQ;AAAI,SAAO,KAAK,UAAU,KAAK,YAAW,GAAI,OAAO,IAAI;AAAG;AAmX5H,SAAU,SAA0C,gBAAqC,UAAiB;AAC5G,MAAI,OAAmB;AACvB,MAAI,SAAS,cAAc,GAAG;AAC1B,WAAO;AACP,eAAW;SAEV;AACD,WAAO;;AAGX,QAAM,QAAQ,KAAK,iBAAiB,QAAQ;AAC5C,SAAO,MAAM,KAAK,KAAK;AAC3B;AA+KM,SAAU,KAAK,OAAyB;AAC1C,MAAI,CAAC,SAAS,KAAK,GAAG;AAClB,YAAQ,MAAM;;AAElB,SAAO,KAAK,QAAQ,OAAO,OAAO,UAAU,SAAS,WAAW,SAAS,QAAQ,UAAU,UAAU,UAAU,SAAS,MAAM;AAClI;;;ACh7BM,SAAU,GAAG,OAAa;AAC5B,SAAO,GAAG,KAAK;AACnB;AA2OM,IAAO,OAAP,MAAW;EACb,YAA6B,QAAc;AAAd,SAAA,SAAA;EAE7B;EAEA,IAAI,QAAK;AACL,WAAO,KAAK;EAChB;EAEA,WAAQ;AACJ,WAAO,KAAK;EAChB;;AA0BJ,IAAM,eAAN,cAA2B,KAAI;EAC3B,YACqB,OACA,KACjB,OAAa;AACb,UAAM,KAAK;AAHM,SAAA,QAAA;AACA,SAAA,MAAA;EAGrB;EAEA,IAAI,OAAI;AACJ,WAAO,KAAK;EAChB;EAES,WAAQ;AACb,WAAO,KAAK,OACN,KAAK,MACL,KAAK,QACL;EACV;;AASJ,IAAM,iBAAN,cACY,aAAY;EACpB,YAAY,KAAa,OAAa;AAClC,UAAM,KAAK,MAAM,KAAK;EAC1B;;AAGE,IAAO,sBAAP,cACM,eAAc;EAItB,YACoB,KAChB,OAAsB;AACtB,UAAM,IAAI,QAAQ,UAAU,CAAC,MAAM,IAAI,EAAE,kBAAiB,CAAE,EAAE,GAAG,MAAM,SAAQ,CAAE;AAFjE,SAAA,MAAA;AAHZ,SAAA,WAAW;EAMnB;;;;;EAMA,eAAe,MAAiB;AAC3B,SAAK,MAAc,KAAK,GAAG,IAAI,KAAK,QAAQ,KAAK;EACtD;EAEA,YAAS;AACL,SAAK,WAAW;AAChB,WAAO;EACX;EAEA,IAAa,QAAK;AACd,WAAO,MAAM,QAAQ,KAAK;EAC9B;;AA+nBE,SAAU,WAAW,GAA2C;AAAI,SAAO,IAAI,oBAAoB,WAAW,EAAE,KAAK,GAAG,CAAC;AAAG;;;ACnhC5H,SAAU,gBAA6C,KAAQ;AACjE,MAAI,CAAC,SAAS,GAAG,GAAG;AAChB,WAAO;;AAGX,QAAM,OAAO;AACb,SAAO,KAAK,mBAAmB;AACnC;AAIM,SAAU,eAAgD,MAA0B;AACtF,MAAI,gBAAgB,IAAI,GAAG;AACvB,WAAO,KAAK;aAEP,SAAS,IAAI,GAAG;AACrB,WAAO,WAAW,IAAI;;AAG1B,SAAO;AACX;AAMM,SAAU,oBAAiD,KAAQ;AACrE,SAAO,SAAS,GAAG,KACZ,oBAAoB,OACpB,WAAY,IAAY,cAAc;AACjD;AAkGM,SAAU,WAA4C,YAAwB,UAAwB;AACxG,QAAM,OAAO,mBAAmB,UAC1B,UACA,mBAAmB,aACf,UACA,SAAS,OAAO,IACZ,SAAS,cAAc,OAAO,IAC9B,QAAQ;AAEtB,QAAM,SAAS,gBAAgB,sBACzB,KAAK,UACL;AAEN,aAAW,SAAS,UAAU;AAC1B,QAAI,UAAU,KAAK,GAAG;AAClB,UAAI,iBAAiB,MAAM;AACvB,eAAO,YAAY,KAAK;iBAEnB,gBAAgB,KAAK,GAAG;AAC7B,eAAO,YAAY,eAAe,KAAK,CAAC;iBAEnC,oBAAoB,KAAK,GAAG;AACjC,YAAI,EAAE,gBAAgB,aAAa;AAC/B,gBAAM,eAAe,IAAI;;aAG5B;AACD,eAAO,YAAY,SAAS,eAAe,MAAM,eAAc,CAAE,CAAC;;;;AAK9E,SAAO;AACX;AAsBM,SAAU,WAA4C,UAAgB;AACxE,SAAO,SAAS,cAAiB,QAAQ;AAC7C;AAEM,SAAU,YAA6C,UAAgB;AACzE,SAAO,MAAM,KAAK,SAAS,iBAAoB,QAAQ,CAAC;AAC5D;AAwCM,SAAU,QAAmI,SAAY,MAAoB;AAC/K,MAAI,OAA8B;AAElC,QAAM,UAAU,KAAK,OAAO,MAAM,EAAE,OAAO,OAAK,EAAE,QAAQ,QAAQ,EAAE,QAAQ,OAAO;AACnF,aAAW,UAAU,SAAS;AAC1B,QAAI,OAAO,QAAQ,SAAS;AACxB,aAAO,OAAO;AACd,kBAAY,MAAM,MAAM;eAEnB,OAAO,QAAQ,MAAM;AAC1B,aAAO,SAAS,eAAe,OAAO,KAAY;AAClD,UAAI,MAAM;AACN,oBAAY,MAAM,MAAM;;;;AAKpC,MAAI,QAAQ,KAAK,YAAY,KAAK,YAAW,GAAI;AAC7C,YAAQ,KAAK,eAAe,KAAK,YAAW,CAAE,0BAA0B,KAAK,OAAO,IAAI;;AAG5F,MAAI,CAAC,MAAM;AACP,WAAO,SAAS,cAAc,IAAI;;AAGtC,aAAW,MAAM,GAAG,IAAI;AAExB,SAAO;AACX;AAeM,SAAU,qBAAqB,MAAc;AAC/C,SAAO,eAAe,IAAI;AAC1B,SAAO,KAAK,WAAW;AACnB,SAAK,UAAU,OAAM;;AAE7B;AAEM,SAAU,eAAe,MAA6B,MAAY;AACpE,SAAO,eAAe,IAAI;AAC1B,uBAAqB,IAAI;AACzB,OAAK,OAAO,SAAS,IAAI,CAAC;AAC9B;AAEM,SAAU,eAAe,MAA2B;AACtD,SAAO,eAAe,IAAI;AAC1B,SAAO,KAAK;AAChB;AAEM,SAAU,gBAAgB,MAA6B,MAAY;AACrE,SAAO,eAAe,IAAI;AAC1B,OAAK,QAAQ;AACjB;AAEM,SAAU,gBAAgB,MAAgB,SAAkB,WAAiB;AAC/E,SAAO,eAAe,IAAI;AAC1B,QAAM,YAAY,UAAU,SAAS;AACrC,QAAM,aAAa,aAAa,KAAK,UAAU,SAAS,SAAS;AAEjE,MAAI,aAAa,eAAe,SAAS;AACrC,SAAK,UAAU,OAAO,SAAS;;AAEvC;AAkBM,SAAU,iBAAiB,QAAqC,gBAA2C,gBAAmC,cAAuB,OAAc;AACrL,WAAS,eAAe,MAAM;AAC9B,MAAI,QAAyB;AAC7B,MAAI,UAAmB;AACvB,MAAI,QAAgB;AACpB,MAAI,UAAU,cAAc,GAAG;AAC3B,cAAU;AACV,YAAQ;AACR,YAAQ;SAEP;AACD,YAAQ;AACR,cAAU;AACV,YAAQ;;AAGZ,SAAO,WAAW,CAAC;AAEnB,MAAI,OAAO;AACP,mBAAe,QAAQ,KAAK;;AAGhC,MAAI,OAAO;AACP,oBAAgB,QAAQ,KAAK;;AAGjC,MAAI,OAAO;AACP,WAAO,UAAU,OAAO,SAAS,OAAO,OAAO;AAC/C,WAAO,UAAU,OAAO,iBAAiB,OAAO,CAAC,OAAO;;AAEhE;AAqDM,SAAU,aAAa,MAAoB;AAAuB,SAAO,QAAQ,UAAU,GAAG,IAAI;AAAG;AACrG,SAAU,UAAU,MAAoB;AAAuB,SAAO,UAAU,GAAG,MAAM,KAAK,QAAQ,CAAC;AAAG;AAS1G,SAAU,+BAA+B,MAAoB;AAAuB,SAAO,OAAO,GAAG,MAAM,UAAU,OAAO,UAAU,uBAAuB,CAAC;AAAG;AAMjK,SAAU,eAAe,MAAoB;AAAuB,SAAO,UAAU,GAAG,MAAM,KAAK,OAAO,CAAC;AAAG;AA0C9G,SAAU,SAAS,MAAoB;AAAsB,SAAO,QAAQ,SAAS,GAAG,IAAI;AAAG;AA+C/F,SAAU,QAAQ,MAAoB;AAAI,SAAO,QAAQ,QAAQ,GAAG,IAAI;AAAG;AAK3E,SAAU,SAAS,MAAoB;AAAI,SAAO,QAAQ,SAAS,GAAG,IAAI;AAAG;AAC7E,SAAU,SAAS,MAAoB;AAAI,SAAO,QAAQ,SAAS,GAAG,IAAI;AAAG;AAC7E,SAAU,MAAM,MAAoB;AAAI,SAAO,QAAQ,MAAM,GAAG,IAAI;AAAG;AAGvE,SAAU,SAAS,MAAoB;AAAI,SAAO,QAAQ,SAAS,GAAG,IAAI;AAAG;AAC7E,SAAU,MAAM,MAAoB;AAAI,SAAO,QAAQ,MAAM,GAAG,IAAI;AAAG;AACvE,SAAU,SAAS,MAAoB;AAAI,SAAO,QAAQ,SAAS,GAAG,IAAI;AAAG;AAG7E,SAAU,MAAM,MAAoB;AAAI,SAAO,QAAQ,MAAM,GAAG,IAAI;AAAG;AAyHvE,SAAU,SAAS,KAAQ;AAC7B,SAAO,SAAS,eAAe,GAAG;AACtC;;;ACnpBM,SAAU,eAAe,SAAgB;AAC3C,MAAI,SAAS;AACb,SAAO,UACA,OAAO,YAAY,QACnB,OAAO,YAAY,MAAM;AAC5B,aAAS,OAAO;;AAGpB,MAAI,QAAQ;AACR,UAAM,YAAY,OAAO;AACzB,QAAI,cAAc;AAClB,eAAW,SAAS,UAAU,UAAU;AACpC,UAAI,UAAU,QAAQ;AAClB,eAAO;;AAGX,UAAI,iBAAiB,sBAAsB;AACvC,uBAAe,MAAM;;;;AAKjC,SAAO;AACX;;;ACnBM,SAAU,SAA4C,cAA0B,QAAU;AAC5F,MAAI,OAAO;AACX,MAAI,SAAS,YAAY,GAAG;AACxB,WAAO;SAEN;AACD,aAAS;;AAGb,MAAI,QAAQ;AACZ,SAAO,IAAI,SAAuB;AAC9B,QAAI,OAAO;AACP,cAAQ;AACR,iBAAW,MAAK;AACZ,gBAAQ;AACR,eAAO,GAAG,IAAI;MAClB,GAAG,IAAI;;EAEf;AACJ;;;ACTA,SAAS,SAAS,OAAa;AAC3B,MAAI,sBAAsB,KAAK,KAAK,GAAG;AACnC,UAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,UAAM,OAAO,MAAM,MAAK;AACxB,UAAM,KAAK,IAAI;AACf,YAAQ,MAAM,KAAK,GAAG;;AAE1B,SAAO,IAAI,KAAK,KAAK;AACzB;AAEA,SAAS,aAAa,eAAgC;AAClD,SAAO,cAAc,UAAU,SAAS,aAAa;AACzD;AAEA,SAAS,WAAW,eAAgC;AAChD,SAAO,cAAc,UAAU,SAAS,WAAW;AACvD;AAEA,SAAS,WAAW,OAA0B,OAAa;AACvD,MAAI,iBAAiB,qBAAqB,MAAM,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,WAAW,MAAM,KAAK,MAAM,KAAK,WAAW,OAAO,KAAK,MAAM,KAAK,WAAW,MAAM,IAAI;AAC1K,WAAO,SAAS,SAAS,KAAK,KAAK;aAE9B,iBAAiB,qBAAqB,MAAM,SAAS,YAAY,MAAM,SAAS,UAAU;AAC/F,WAAO,SAAS,WAAW,KAAK,KAAK;SAEpC;AACD,WAAO,SAAS,MAAM,kBAAiB,KAAM;;AAErD;AAEA,SAAS,aAAa,MAA4B,eAAgC;AAC9E,QAAM,SAAS,MAAM,KAAK,KAAK,iBAAmC,OAAO,CAAC;AAC1E,MAAI,OAAO,WAAW,GAAG;AACrB,UAAM,OAAO,KAAK,YAAY,KAAI;AAClC,WAAO,CAAC,WAAW,eAAe,IAAI,CAAC;SAEtC;AACD,WAAO,OAAO,IAAI,WAAS,WAAW,OAAO,MAAM,KAAK,CAAC;;AAEjE;AAgBA,IAAM,qBAAqB;EACvB;EACA;EACA;EACA;;AAGJ,IAAM,WAAW,UAAkB,QAAQ;AAErC,IAAO,kBAAP,MAAO,iBAAe;EAExB,OAAO,OAAU,SAAkC;AAC/C,UAAM,YAAY,GAAE;AACpB,UAAM,YAAY,GAAE;AACpB,QAAI,aAAa;AACjB,QAAI,aAAa;AACjB,eAAW,UAAU,QAAQ,SAAS;AAClC,UAAI,WAAW;AACf,UAAI,aAAa,GAAG;AAChB,UAAE;aAED;AACD,cAAM,SAAS,MAAM,OAAO,MAAM;AAClC,YAAI,OAAO,QAAQ;AACf,qBAAW,aAAa,EAAE;AAC1B,iBAAO,UAAU;;AAErB,cAAM,aAAa,GAAG,MAAM;AAC5B,YAAI,UAAU,OAAO,aAAa,GAAG;AACjC,qBAAW,UAAU,OAAO;AAC5B,uBAAa,OAAO,gBAAgB;;AAExC,kBAAU,YAAY,UAAU;;AAGpC,UAAI,aAAa,GAAG;AAChB,UAAE;iBAEG,OAAO,QAAQ;AACpB,cAAM,SAAS,OAAO;AACtB,YAAI,UAAU;AACV,iBAAO,KAAK;;AAEhB,YAAI,OAAO,UAAU,kBAAkB,kBAAkB;AACrD,iBAAO,cAAc,eAAe,OAAO;;AAE/C,cAAM,aAAa,GAAG,MAAM;AAC5B,YAAI,UAAU,OAAO,aAAa,GAAG;AACjC,qBAAW,UAAU,OAAO;AAC5B,uBAAa,OAAO,gBAAgB;;AAExC,kBAAU,YAAY,UAAU;;;AAIxC,QAAI,aAAa,eAAe,UAAU,gBAAgB,IAAI;AAC9D,WAAO,eAAe,UAAU,gBAAgB,IAAI,YAAY;AAC5D,gBAAU,YAAY,GAAE,CAAE;;AAG9B,cAAU,YAAY,GAAG,YAAY,UAAU,OAAO,eAAe,GAAG,OAAO,CAAC,CAAC;AAEjF,iBAAa,eAAe,UAAU,gBAAgB;AACtD,WAAO,aAAa,eAAe,UAAU,gBAAgB,GAAG;AAC5D,gBAAU,YAAY,GAAE,CAAE;;AAG9B,UAAM,QAAQ,IAAI,iBAAmB,MACjC,UAAU,SAAS,oBAAoB,eAAe,iBAAiB,SAAS,GAChF,WAAW,gBAAgB,QAAQ,YAAY,GAC/C,MACI,WACA,SAAS,GAEb,MAAK,CAAE,CACV;AAED,YAAQ,QAAQ,QAAQ,CAAC,GAAG,MAAM,MAAM,cAAc,GAAG,EAAE,YAAY,CAAC;AACxE,UAAM,aAAa,QAAQ,aAAa,kBAAkB;AAE1D,WAAO;EACX;EAoBA,IAAI,YAAS;AACT,WAAO,KAAK;EAChB;EAEA,IAAI,UAAU,GAAC;AACX,SAAK,aAAa;AAClB,iBAAa,QAAQ,KAAK,cAAc,EAAE,SAAQ,CAAE;EACxD;EAGA,IAAI,WAAQ;AACR,WAAO,KAAK;EAChB;EAEA,IAAI,SAAS,GAAC;AACV,SAAK,YAAY;AACjB,iBAAa,QAAQ,KAAK,aAAa,EAAE,SAAQ,CAAE;EACvD;EAEA,YAA4B,SAAyB;AAAzB,SAAA,UAAA;AAjCX,SAAA,SAAS,oBAAI,IAAG;AAChB,SAAA,aAAa,oBAAI,IAAG;AAMpB,SAAA,cAAiC;AACjC,SAAA,cAAc,oBAAI,IAAG;AACrB,SAAA,YAAY,CAAC,GAAG,GAAG,kBAAkB;AAyBlD,SAAK,SAAS,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AAE9C,SAAK,eAAe,KAAK,QAAQ,QAAQ;AACzC,SAAK,eAAe,GAAG,KAAK,YAAY;AACxC,SAAK,cAAc,GAAG,KAAK,YAAY;AAEvC,SAAK,OAAO,SAAS,KAAK,SAAS,YAAY;AAE/C,SAAK,SAAS,oBAAI,IAAG;AAErB,QAAI,KAAK,QAAQ,OAAO;AACpB,WAAK,iBAAiB,SAAS,KAAK,QAAQ,OAAO,cAAc;AACjE,WAAK,cAAc,KAAK,QAAQ,MAAM,cAAiC,oBAAoB;WAE1F;AACD,WAAK,iBAAiB,CAAA;;AAG1B,SAAK,WAAW,KAAK,IACjB,GAAG,SAAS,KAAK,SAAS,IAAI,EACzB,IAAI,OAAK,EAAE,SAAS,MAAM,CAAC;AAGpC,SAAK,0BAA0B,GAAG,GAAG,QAAQ,KAAK,QAAQ,GAAG,YAAY,CAAC;AAC1E,SAAK,YAAY,GAAG,QAAQ,KAAK,QAAQ,GAAG,UAAU,OAAO,CAAC;AAC9D,SAAK,gBAAgB,oBAAI,IAAG;AAE5B,QAAI,KAAK,aAAa;AAClB,WAAK,YAAY,iBAAiB,SAAS,MAAK;AAC5C,aAAK,WAAW,MAAK;AACrB,mBAAWC,YAAW,KAAK,gBAAgB;AACvC,eAAK,YAAYA,QAAO;AACxB,UAAAA,SAAQ,QAAQ;;AAEpB,aAAK,OAAM;MACf,CAAC;;AAGL,QAAI,CAAC,KAAK,QAAQ,OAAO;AACrB,WAAK,QAAQ,QAAQ,MAAK;;AAG9B,eAAW,KAAK,QAAQ,OACpB,KAAK,yBACL,GAAG,KAAK,QAAQ,MAAM,UACtB,GAAG,KAAK,SAAS,CAAC;AAEtB,eAAW,KAAK,KAAK,gBAAgB;AACjC,YAAM,MAAM,eAAe,CAAC;AAC5B,WAAK,cAAc,IAAI,GAAG,GAAG;AAC7B,QAAE,iBAAiB,SAAS,KAAK,OAAO,KAAK,MAAM,CAAC,CAAC;AACrD,WAAK,aAAa,CAAC;AACnB,UAAI,aAAa,CAAC,KACX,WAAW,CAAC,GAAG;AAClB,YAAI,CAAC,KAAK,OAAO,IAAI,GAAG,GAAG;AACvB,eAAK,OAAO,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC;;AAGrC,cAAM,QAAQ,KAAK,OAAO,IAAI,GAAG;AACjC,cAAM,OAAO,aAAa,CAAC,IAAI,IAAI;AACnC,cAAM,IAAI,IAAI;;;AAItB,eAAW,KAAK,KAAK,QAAQ,iBAAiB,OAAO,GAAG;AACpD,QAAE,UAAU,IAAI,gBAAgB,iBAAiB;;AAGrD,eAAW,KAAK,KAAK,QAAQ,iBAAiB,QAAQ,GAAG;AACrD,QAAE,UAAU,IAAI,iBAAiB,kBAAkB;;AAGvD,SAAK,YAAY,WAAW,aAAa,QAAQ,KAAK,YAAY,KAAK,GAAG;AAC1E,SAAK,WAAW,WAAW,aAAa,QAAQ,KAAK,WAAW,KAAK,IAAI;AAEzE,QAAI,UAAU,KAAK,QAAQ,QAAQ,SAAS,KACrC,KAAK,QAAQ,QAAQ,UAAU,SAAS,GAAG;AAC9C,YAAM,QAAQ,KAAK,QAAQ,QAAQ,UAC9B,MAAM,GAAG,EACT,IAAI,OAAK,WAAW,EAAE,KAAI,CAAE,CAAC,EAC7B,OAAO,QAAQ;AACpB,WAAK,aAAa,KAAK;WAEtB;AACD,WAAK,OAAM;;EAEnB;EAEA,aAAa,WAAmB;AAC5B,QAAI,kBAAkB,SAAS,KAAK,UAAU,WAAW,GAAG;AACxD,YAAM,IAAI,MAAM,6BAA6B;;AAEjD,iBAAa,KAAK,WAAW,GAAG,GAAG,SAAS;AAC5C,SAAK,WAAW,KAAK,UAAU,CAAC;AAChC,SAAK,OAAM;EACf;EAEA,cAAc,aAAqB,QAA6D;AAC5F,SAAK,YAAY,IAAI,aAAa,MAAM;EAC5C;EAEA,QAAK;AACD,eAAW,KAAK,IAAI;AACpB,eAAW,QAAQ,KAAK,QAAQ,SAAS;AACrC,2BAAqB,IAAI;;AAE7B,SAAK,QAAO;EAChB;EAEA,aAAa,QAAW;AACpB,UAAM,UAAU,OAAO,IAAI,WAAQ;AAC/B,YAAM,MAAM,GAAE;AACd,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,EAAE,GAAG;AACpC,cAAM,OAAO,GAAE;AACf,YAAI,KAAK,YAAY,IAAI,CAAC,GAAG;AACzB,qBAAW,MAAM,KAAK,YAAY,IAAI,CAAC,EAAE,OAAO,GAAG,CAAC;;AAExD,YAAI,YAAY,IAAI;;AAExB,WAAK,KAAK,KAAK,GAAG;AAClB,aAAO;IACX,CAAC;AAED,iBAAa,KAAK,MAAM,GAAG,OAAO;AAElC,eAAW,QAAQ,KAAK,QAAQ,SAAS;AACrC,2BAAqB,IAAI;;AAG7B,eAAW,KAAK,aACZ,GAAG,KAAK,IAAI;AAGhB,SAAK,QAAO;EAChB;EAEA,OAAO,KAAwB;AAC3B,QAAI,gBAAwB;AAC5B,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,EAAE,GAAG;AACvC,YAAM,MAAM,KAAK,KAAK,CAAC;AACvB,YAAM,WAAW,QAAQ;AACzB,sBAAgB,KAAK,UAAU,UAAU;AACzC,UAAI,UAAU;AACV,wBAAgB;;;AAIxB,QAAI,kBAAkB,MAAM;AACxB,WAAK,YAAY,KAAK,MAAM,gBAAgB,KAAK,QAAQ,IAAI,KAAK;AAClE,WAAK,OAAM;;EAEnB;EAEA,IAAI,mBAAgB;AAChB,WAAO,eAAe,KAAK,uBAAuB;EACtD;EAEA,IAAI,iBAAiB,GAAS;AAC1B,mBAAe,KAAK,yBAAyB,CAAC;EAClD;EAEA,IAAY,cAAW;AAAK,WAAO,KAAK,QAAQ,QAAQ,CAAC;EAAG;EAEpD,QAAQ,eAAgC;AAC5C,WAAO,UAAU,KAAK,YAAY,IAAI,cAAc,EAAE;EAC1D;EAEQ,UAAU,eAAkC,OAA6B;AAC7E,UAAM,MAAM,KAAK,QAAQ,aAAa;AACtC,QAAI,OAAO;AACP,mBAAa,QAAQ,KAAK,MAAM,SAAQ,CAAE;WAEzC;AACD,mBAAa,WAAW,GAAG;;EAEnC;EAEQ,YAAY,eAAgC;AAChD,UAAM,MAAM,KAAK,QAAQ,aAAa;AACtC,iBAAa,WAAW,GAAG;EAC/B;EAEQ,aAAa,OAAwB;AACzC,UAAM,MAAM,KAAK,QAAQ,KAAK;AAC9B,UAAM,QAAQ,aAAa,QAAQ,GAAG;AAEtC,QAAI,CAAC,UAAU,KAAK,GAAG;AACnB,YAAM,QAAQ;eAET,iBAAiB,mBAAmB;AACzC,YAAM,QAAQ;AACd,WAAK,WAAW,IAAI,OAAO,MAAM,KAAK;eAEjC,MAAM,KAAK,WAAW,MAAM,GAAG;AACpC,YAAM,OAAO,SAAS,KAAK;AAC3B,YAAM,cAAc;AACpB,WAAK,WAAW,IAAI,OAAO,IAAI;eAE1B,MAAM,SAAS,YACjB,MAAM,SAAS,SAAS;AAC3B,YAAM,SAAS,WAAW,KAAK;AAC/B,YAAM,gBAAgB;AACtB,WAAK,WAAW,IAAI,OAAO,MAAM;WAEhC;AACD,YAAM,QAAQ;AACd,WAAK,WAAW,IAAI,OAAO,MAAM,KAAK;;EAE9C;EAEQ,QAAQ,eAAgC;AAC5C,UAAM,MAAM,eAAe,aAAa;AACxC,WAAO,KAAK,OAAO,IAAI,GAAG;EAC9B;EAEQ,QAAQ,iBAAoC,MAAI;AACpD,QAAI,UAAU,cAAc,GAAG;AAC3B,YAAM,QAAQ,WAAW,gBAAgB,eAAe,KAAK;AAC7D,WAAK,UAAU,gBAAgB,KAAK;AACpC,UAAI,OAAO;AACP,aAAK,WAAW,IAAI,gBAAgB,KAAK;aAExC;AACD,aAAK,WAAW,OAAO,cAAc;;;AAI7C,QAAI,KAAK,aAAa;AAClB,uBAAiB,KAAK,aAAa,KAAK,WAAW,OAAO,GAAG,SAAS,mBAAmB;AACzF,sBAAgB,KAAK,aAAa,KAAK,WAAW,OAAO,GAAG,eAAe;AAC3E,sBAAgB,KAAK,aAAa,KAAK,WAAW,SAAS,GAAG,uBAAuB;;AAGzF,QAAI,YAAY;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,EAAE,GAAG;AACvC,YAAM,MAAM,KAAK,KAAK,CAAC;AACvB,UAAI,WAAW;AAEf,eAAS,IAAI,GAAG,IAAI,KAAK,eAAe,UAAU,UAAU,EAAE,GAAG;AAC7D,cAAM,UAAU,KAAK,eAAe,CAAC;AACrC,cAAM,cAAc,KAAK,cAAc,IAAI,OAAO;AAClD,YAAI,KAAK,QAAQ,OAAO,GAAG;AACvB,gBAAM,CAAC,kBAAkB,gBAAgB,IAAI,KAAK,OAAO,IAAI,WAAW;AACxE,gBAAM,iBAAiB,KAAK,WAAW,IAAI,gBAAgB;AAC3D,gBAAM,iBAAiB,KAAK,WAAW,IAAI,gBAAgB;AAC3D,gBAAM,OAAO,IAAI,SAAS,WAAW;AACrC,gBAAM,aAAa,aAAa,MAAM,gBAAgB;AAEtD,cAAI,UAAqB;AACzB,cAAI,UAAU,cAAc,KACrB,UAAU,cAAc,GAAG;AAC9B,sBAAU,WAAW,IAAI,eACrB,kBAAkB,aAAa,aAAa,cAAc;qBAGzD,UAAU,cAAc,GAAG;AAChC,sBAAU,WAAW,IAAI,eACrB,kBAAkB,SAAS;qBAE1B,UAAU,cAAc,GAAG;AAChC,sBAAU,WAAW,IAAI,eACrB,aAAa,cAAc;;AAGnC,cAAI,SAAS;AACT,kBAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,MAAM,KAAK,GAAG,KAAK;AACpD,yBAAa;;eAGhB;AACD,gBAAM,cAAc,KAAK,WAAW,IAAI,OAAO;AAC/C,cAAI,aAAa;AACb,kBAAM,OAAO,IAAI,SAAS,WAAW;AACrC,kBAAM,aAAa,aAAa,MAAM,OAAO;AAC7C,kBAAM,UAAU,WAAW,IAAI,eAC3B,kBAAkB,SAAS,IACrB,OACA,OAAO,SAAS,IACX,YAAqB,QAAO,MAAO,UAAU,QAAO,IACrD,SAAS,SAAS,IACd,cAAc,cACd,gBAAgB,iBACZ,UAAU,WAAW,KAAK,cAAc,SACxC,QAAQ,UAAU,SAAS,OAAO,IAC9B,UAAU,kBAAiB,MAAO,cAClC,UAAU,kBAAiB,EAAG,QAAQ,WAAqB,IAAI,EAAE;AAC3F,kBAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,MAAM,KAAK,GAAG,KAAK;AACpD,yBAAa;;;;AAKzB,UAAI,UAAU;AACV,UAAE;;AAGN,UAAI,MAAM,UAAU,WACd,KACA;;AAGV,UAAM,WAAW,KAAK,KAAK,YAAY,KAAK,QAAQ;AACpD,UAAM,WAAW,KAAK,IAAI,GAAG,WAAW,CAAC;AACzC,UAAM,UAAU,KAAK,IAAI,UAAU,KAAK,MAAM,KAAK,YAAY,KAAK,QAAQ,CAAC;AAC7E,SAAK,YAAY,UAAU,KAAK;AAEhC,UAAM,WAAW,KAAK,IAAI,UAAU,UAAU,CAAC;AAC/C,UAAM,WAAW,KAAK,IAAI,GAAG,UAAU,CAAC;AACxC,UAAM,WAAW,UAAU,KAAK;AAChC,UAAM,WAAW,WAAW,KAAK;AAEjC,UAAM,eAAe,KAAK,KAAK,OAAO,OAAK,EAAE,MAAM,YAAY,MAAM;AACrE,aAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,EAAE,GAAG;AAC1C,UAAI,IAAI,YAAY,YAAY,GAAG;AAC/B,qBAAa,CAAC,EAAE,MAAM,UAAU;;;AAIxC,SAAK,wBAAwB,MAAM,UAAU,cAAc,IACrD,KACA;AAEN,yBAAqB,KAAK,SAAS;AAEnC,UAAM,cAAwB,CAAA;AAC9B,UAAM,UAAU,CAAC,SAAgB;AAC7B,YAAM,MAAM,aAAa,aAAa,MAAM,QAAQ;AACpD,UAAI,MAAM,GAAG;AACT,qBAAa,aAAa,MAAM,GAAG;;IAE3C;AAEA,YAAQ,CAAC;AACT,YAAQ,OAAO;AACf,YAAQ,QAAQ;AAChB,YAAQ,QAAQ;AAChB,YAAQ,QAAQ;AAEhB,UAAM,YAAY,WAAW,KAAK;AAClC,UAAM,gBAAgB,KAAK,IAAI,GAAG,KAAK,YAAY,KAAK,QAAQ;AAEhE,UAAM,YAAY,CAAC,MAAc,YAAoB;AACjD,UAAI;AACJ,UAAI,SAAS;AACT,gBAAQ,4BAA4B,IAAI;aAEvC;AACD,gBAAQ,KAAK,QAAQ,GAAG,CAAC,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI;;AAE7C,WAAK,UAAU,OAAO,KAAK;AAC3B,aAAO;IACX;AAEA,UAAM,oBAAoB,CAAC,MAAc,UAAiB;AACtD,YAAM,UAAU,KAAK,SACd,SAAS,aACT,UAAU,KAAK;AACtB,YAAM,OAAO,UAAU,MAAM,OAAO;AACpC,UAAI,SAAS;AACT,aAAK,iBAAiB,SAAS,MAAK;AAChC,eAAK,YAAY;AACjB,eAAK,OAAM;QACf,CAAC;;IAET;AAEA,UAAM,mBAAmB,CAAC,SAAgB;AACtC,YAAM,UAAU,SAAS,KAAK;AAC9B,YAAM,OAAO,UAAU,KAAK,SAAQ,GAAI,OAAO;AAC/C,UAAI,SAAS;AACT,aAAK,iBAAiB,SAAS,MAAK;AAChC,eAAK,WAAW;AAChB,eAAK,OAAM;QACf,CAAC;;IAET;AAEA,sBAAkB,KAAK,aAAa;AAEpC,QAAI,OAAO;AACX,eAAW,cAAc,aAAa;AAClC,YAAM,QAAQ,aAAa;AAC3B,aAAO;AACP,UAAI,QAAQ,GAAG;AACX,kBAAU,OAAO,KAAK;;AAE1B,yBAAmB,aAAa,GAAG,QAAQ,CAAC,GAAG,aAAa,KAAK,QAAQ;;AAG7E,sBAAkB,KAAK,QAAQ;AAE/B,cAAU,KAAK,KAAK;AACpB,cAAU,GAAG,SAAS,sBAAsB,KAAK,KAAK,MAAM,YAAY,KAAK;AAE7E,QAAI,KAAK,UAAU,SAAS,GAAG;AAC3B,gBAAU,KAAK,KAAK;AACpB,gBAAU,mBAAmB,KAAK;AAClC,eAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,EAAE,GAAG;AAC5C,YAAI,KAAK,KAAK,SAAS,KAAK,UAAU,IAAI,CAAC,GAAG;AAC1C,2BAAiB,KAAK,UAAU,CAAC,CAAC;;;;EAIlD;;;;AC9kBJ,IAAM,SAAS,YAA8B,eAAe;AAC5D,WAAW,SAAS,QAAQ;AACxB,MAAI,gBAAgB,KAAK;AAC7B;",
  "names": ["comparer", "t", "element"]
}
