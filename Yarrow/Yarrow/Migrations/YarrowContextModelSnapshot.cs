// <auto-generated />
using System;
using System.Net;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yarrow.Data;

#nullable disable

namespace Yarrow.Migrations
{
    [DbContext(typeof(YarrowContext))]
    partial class YarrowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("C.UTF-8")
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("Activities_ID_seq")
                .HasMax(2147483647L);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ScenarioGroupsGrantedToOrganizations", b =>
                {
                    b.Property<int>("ScenarioGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("ScenarioGroupId", "OrganizationId")
                        .HasName("ScenarioGroupsGrantedToOrganizations_pk");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "ScenarioGroupId" }, "IX_ScenarioGroupsGrantedToOrganizations_ScenarioGroupId");

                    b.HasIndex(new[] { "ScenarioGroupId", "OrganizationId" }, "_ScenarioGroupsGrantedToOrganizations_ScenarioGroupId_OrganizationId_IDX");

                    b.ToTable("ScenarioGroupsGrantedToOrganizations", (string)null);
                });

            modelBuilder.Entity("TagOnFile", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("TagID");

                    b.HasKey("FileId", "TagId")
                        .HasName("TagOnFile__pk");

                    b.HasIndex(new[] { "TagId" }, "IX_TagOnFile_TagID");

                    b.HasIndex(new[] { "FileId", "TagId" }, "_TagOnFile___FileID__IDX");

                    b.ToTable("TagOnFile", (string)null);
                });

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Effect")
                        .HasColumnType("text");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<float>("MaxDistance")
                        .HasColumnType("real");

                    b.Property<float>("MinDistance")
                        .HasColumnType("real");

                    b.Property<bool>("Spatialize")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "AudioTracks_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "AudioTracks_TransformID_index");

                    b.ToTable("AudioTracks");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AltMime")
                        .HasColumnType("text")
                        .HasColumnName("AltMIME");

                    b.Property<string>("Copyright")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateOnly?>("CopyrightDate")
                        .HasColumnType("date");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("FileId")
                        .HasName("FileContents_pkey");

                    b.HasIndex(new[] { "FileId" }, "filecontents_fileid_index");

                    b.ToTable("FileContents");
                });

            modelBuilder.Entity("Yarrow.Data.FileTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Name" }, "FileTags_ID_Name__IDX");

                    b.HasIndex(new[] { "Name" }, "FileTags_Name_unq")
                        .IsUnique();

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("Yarrow.Data.Gsvmetadatum", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Pano")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileId")
                        .HasName("GSVMetadata_pkey");

                    b.HasIndex(new[] { "Pano" }, "GSVMetadata_unique_pano")
                        .IsUnique();

                    b.HasIndex(new[] { "FileId" }, "fki_Metadata_Files");

                    b.ToTable("GSVMetadata", (string)null);
                });

            modelBuilder.Entity("Yarrow.Data.Headset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateOnly?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("Id");

                    b.ToTable("Headsets");
                });

            modelBuilder.Entity("Yarrow.Data.HeadsetLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("HeadsetId")
                        .HasColumnType("integer")
                        .HasColumnName("HeadsetID");

                    b.Property<DateOnly>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HeadsetId" }, "IX_HeadsetLocations_HeadsetID");

                    b.ToTable("HeadsetLocations");
                });

            modelBuilder.Entity("Yarrow.Data.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Yarrow.Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<IPAddress>("FromAddress")
                        .HasColumnType("inet");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ReportId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<JsonDocument>("Value")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "UserId", "Timestamp", "FromAddress", "Key", "Value");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentID");

                    b.Property<int?>("ScenarioGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex(new[] { "Id", "FileId" }, "IDX_MenuItems__ID_FileID");

                    b.HasIndex(new[] { "Id", "ParentId" }, "IDX_MenuItems__ID_ParentID");

                    b.HasIndex(new[] { "FileId" }, "IX_MenuItems_FileID");

                    b.HasIndex(new[] { "ParentId" }, "IX_MenuItems_ParentID");

                    b.HasIndex(new[] { "ScenarioGroupId" }, "IX_MenuItems_ScenarioGroupID");

                    b.HasIndex(new[] { "Id", "ScenarioGroupId" }, "fki_FK_MenuItem_ScenarioGroup");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<bool>("IsGrabbable")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "Models_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "Models_TransformID_index");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Yarrow.Data.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Id", "UserId", "Timestamp");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Yarrow.Data.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name", "Timestamp");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('\"Activities_ID_seq\"'::regclass)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<float?>("OriginAltitude")
                        .HasColumnType("real");

                    b.Property<float?>("OriginLatitude")
                        .HasColumnType("real");

                    b.Property<float?>("OriginLongitude")
                        .HasColumnType("real");

                    b.Property<bool>("Published")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PublishedById")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScenarioGroupId")
                        .HasColumnType("integer");

                    b.Property<float>("StartRotation")
                        .HasColumnType("real");

                    b.Property<int?>("StartStationId")
                        .HasColumnType("integer")
                        .HasColumnName("StartStationID");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex(new[] { "StartStationId" }, "IX_Scenario_StartStationID");

                    b.HasIndex(new[] { "CreatedById" }, "IX_Scenarios_CreatedByID");

                    b.HasIndex(new[] { "PublishedById" }, "IX_Scenarios_PublishedByID");

                    b.HasIndex(new[] { "ScenarioGroupId" }, "IX_Scenarios_ScenarioGroupID");

                    b.HasIndex(new[] { "Id", "CreatedById" }, "fki_FK_Scenario_CreatedBy");

                    b.HasIndex(new[] { "Id", "PublishedById" }, "fki_FK_Scenario_PublishedBy");

                    b.HasIndex(new[] { "Id", "ScenarioGroupId" }, "fki_FK_Scenario_ScenarioGroup");

                    b.HasIndex(new[] { "Id", "StartStationId" }, "fki_FK_Scenario_StartStation");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedById")
                        .HasColumnType("text");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedById" }, "IX_ScenarioGroups_CreatedByID");

                    b.HasIndex(new[] { "LanguageId" }, "IX_ScenarioGroups_LanguageID");

                    b.HasIndex(new[] { "Id", "CreatedById" }, "fki_FK_ScenarioGroup_CreatedBy");

                    b.HasIndex(new[] { "Id", "LanguageId" }, "fki_FK_ScenarioGroup_Language");

                    b.ToTable("ScenarioGroups");
                });

            modelBuilder.Entity("Yarrow.Data.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name")
                        .HasName("Settings_pkey");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlwaysVisible")
                        .HasColumnType("boolean");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "Signs_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "Signs_TransformID_index");

                    b.ToTable("Signs");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.Property<float>("Altitude")
                        .HasColumnType("real");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<float[]>("Rotation")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("TransformId")
                        .HasName("Stations_pkey");

                    b.HasIndex(new[] { "TransformId" }, "fki_Stations_Transforms");

                    b.HasIndex(new[] { "FileId" }, "stations_fileid_index");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.Property<int>("FromStationId")
                        .HasColumnType("integer")
                        .HasColumnName("FromStationID");

                    b.Property<int>("ToStationId")
                        .HasColumnType("integer")
                        .HasColumnName("ToStationID");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.HasKey("FromStationId", "ToStationId")
                        .HasName("StationConnections_pkey");

                    b.HasIndex(new[] { "FromStationId" }, "StationConnections_FromStationID_index");

                    b.HasIndex(new[] { "ToStationId" }, "StationConnections_ToStationID_index");

                    b.HasIndex(new[] { "TransformId" }, "StationConnections_TransformID_index");

                    b.ToTable("StationConnections");
                });

            modelBuilder.Entity("Yarrow.Data.Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AlwaysVisible")
                        .HasColumnType("boolean");

                    b.Property<int>("FileId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float[]>("Matrix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real[]")
                        .HasDefaultValueSql("'{1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}'::real[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentTransformId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentTransformID");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("ScenarioID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScenarioId" }, "fki_FK_Transform_Scenario");

                    b.HasIndex(new[] { "ParentTransformId" }, "fki_FK_Transforms_ParentTransforms");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeadsetId")
                        .HasColumnType("text");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("integer");

                    b.Property<int?>("RoomID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId");

                    b.HasIndex("HeadsetId")
                        .IsUnique();

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RoomID");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId", "HeadsetId");

                    b.ToTable("UserProfiles", (string)null);
                });

            modelBuilder.Entity("Yarrow.Data.VideoClip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<string>("SphereEncoding")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StereoLayout")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "VideoClips_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "VideoClips_TransformID_index");

                    b.ToTable("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.WebRtc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WebRTC", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScenarioGroupsGrantedToOrganizations", b =>
                {
                    b.HasOne("Yarrow.Data.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("_ScenarioGroupsGrantedToOrganizations_FK_OrganizationId");

                    b.HasOne("Yarrow.Data.ScenarioGroup", null)
                        .WithMany()
                        .HasForeignKey("ScenarioGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("_ScenarioGroupsGrantedToOrganizations_FK_ScenarioGroupId");
                });

            modelBuilder.Entity("TagOnFile", b =>
                {
                    b.HasOne("Yarrow.Data.File", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("_TagOnFile__FK");

                    b.HasOne("Yarrow.Data.FileTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("_TagOnFile__FK_1");
                });

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("AudioTracks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AudioTracks_Files");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("AudioTracks")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_AudioTracks_Transforms");

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("FileContent")
                        .HasForeignKey("Yarrow.Data.FileContent", "FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileContents_Files");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.Gsvmetadatum", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("Gsvmetadatum")
                        .HasForeignKey("Yarrow.Data.Gsvmetadatum", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_Metadata_Files");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.HeadsetLocation", b =>
                {
                    b.HasOne("Yarrow.Data.Headset", "Headset")
                        .WithMany("HeadsetLocations")
                        .HasForeignKey("HeadsetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_HeadsetLocations_to_Headsets");

                    b.Navigation("Headset");
                });

            modelBuilder.Entity("Yarrow.Data.Log", b =>
                {
                    b.HasOne("Yarrow.Data.Report", "Report")
                        .WithMany("Logs")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Yarrow.Data.UserProfile", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("MenuItems")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_MenuItem_File");

                    b.HasOne("Yarrow.Data.Organization", "Organization")
                        .WithMany("MenuItems")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_MenuItem_Organization");

                    b.HasOne("Yarrow.Data.MenuItem", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_MenuItem_Parent");

                    b.HasOne("Yarrow.Data.ScenarioGroup", "ScenarioGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("ScenarioGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_MenuItem_ScenarioGroup");

                    b.Navigation("File");

                    b.Navigation("Organization");

                    b.Navigation("Parent");

                    b.Navigation("ScenarioGroup");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Models")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Models_Files");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Models")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Models_Transforms");

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "CreatedBy")
                        .WithMany("CreatedScenarios")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Scenarios_CreatedBy");

                    b.HasOne("Yarrow.Data.UserProfile", "PublishedBy")
                        .WithMany("PublishedScenarios")
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Scenarios_PublishedBy");

                    b.HasOne("Yarrow.Data.ScenarioGroup", "ScenarioGroup")
                        .WithMany("Scenarios")
                        .HasForeignKey("ScenarioGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Scenario_ScenarioGroup");

                    b.HasOne("Yarrow.Data.Station", "StartStation")
                        .WithMany("Scenarios")
                        .HasForeignKey("StartStationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Scenario_StartStation");

                    b.Navigation("CreatedBy");

                    b.Navigation("PublishedBy");

                    b.Navigation("ScenarioGroup");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioGroup", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "CreatedBy")
                        .WithMany("ScenarioGroups")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_ScenarioGroup_CreatedBy");

                    b.HasOne("Yarrow.Data.Language", "Language")
                        .WithMany("ScenarioGroups")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ScenarioGroup_Language");

                    b.Navigation("CreatedBy");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Signs")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Signs_Files");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Signs")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Signs_Transforms");

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Stations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Stations_Files");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithOne("Station")
                        .HasForeignKey("Yarrow.Data.Station", "TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Stations_Transforms");

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.HasOne("Yarrow.Data.Station", "FromStation")
                        .WithMany("StationConnectionFromStations")
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StationConnection_From");

                    b.HasOne("Yarrow.Data.Station", "ToStation")
                        .WithMany("StationConnectionToStations")
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_StationConnection_To");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("StationConnections")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_StationConnection_Transform");

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Text", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Texts")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Texts")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.HasOne("Yarrow.Data.Transform", "ParentTransform")
                        .WithMany("InverseParentTransform")
                        .HasForeignKey("ParentTransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Transforms_ParentTransforms");

                    b.HasOne("Yarrow.Data.Scenario", "Scenario")
                        .WithMany("Transforms")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Transform_Scenario");

                    b.Navigation("ParentTransform");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "Headset")
                        .WithOne("HeadsetUser")
                        .HasForeignKey("Yarrow.Data.UserProfile", "HeadsetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Yarrow.Data.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Yarrow.Data.Room", "Room")
                        .WithMany("Users")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithOne()
                        .HasForeignKey("Yarrow.Data.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserProfiles_AspNetUsers");

                    b.Navigation("Headset");

                    b.Navigation("Organization");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.VideoClip", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("VideoClips")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_VideoClips_Files");

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("VideoClips")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_VideoClips_Transforms");

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("FileContent");

                    b.Navigation("Gsvmetadatum");

                    b.Navigation("MenuItems");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Stations");

                    b.Navigation("Texts");

                    b.Navigation("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.Headset", b =>
                {
                    b.Navigation("HeadsetLocations");
                });

            modelBuilder.Entity("Yarrow.Data.Language", b =>
                {
                    b.Navigation("ScenarioGroups");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Yarrow.Data.Organization", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Yarrow.Data.Room", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioGroup", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Navigation("Scenarios");

                    b.Navigation("StationConnectionFromStations");

                    b.Navigation("StationConnectionToStations");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("InverseParentTransform");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Station");

                    b.Navigation("StationConnections");

                    b.Navigation("Texts");

                    b.Navigation("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.Navigation("CreatedScenarios");

                    b.Navigation("HeadsetUser");

                    b.Navigation("Logs");

                    b.Navigation("PublishedScenarios");

                    b.Navigation("Reports");

                    b.Navigation("ScenarioGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
