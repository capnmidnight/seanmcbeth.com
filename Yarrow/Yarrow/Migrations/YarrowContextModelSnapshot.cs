// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yarrow.Data;

#nullable disable

namespace Yarrow.Migrations
{
    [DbContext(typeof(YarrowContext))]
    partial class YarrowContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.11");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OrganizationScenario", b =>
                {
                    b.Property<int>("OrganizationsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScenarioGroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrganizationsId", "ScenarioGroupsId");

                    b.HasIndex("ScenarioGroupsId");

                    b.ToTable("OrganizationScenario");
                });

            modelBuilder.Entity("TagOnFile", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagId", "FileId")
                        .HasName("PK_TagOnFile");

                    b.HasIndex("FileId");

                    b.HasIndex(new[] { "TagId", "FileId" }, "IDX_TagOnFile_TagId_FileId_IDX");

                    b.ToTable("TagOnFile", (string)null);
                });

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("MaxDistance")
                        .HasColumnType("REAL");

                    b.Property<float>("MinDistance")
                        .HasColumnType("REAL");

                    b.Property<bool>("Spatialize")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Volume")
                        .HasColumnType("REAL");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.HasIndex("Id", "TransformId", "FileId");

                    b.ToTable("AudioTracks");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AltMime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Copyright")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("CopyrightDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.HasKey("FileId");

                    b.ToTable("FileContents");
                });

            modelBuilder.Entity("Yarrow.Data.FileTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("Yarrow.Data.GsvMetadatum", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Pano")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FileId");

                    b.ToTable("GsvMetadata");
                });

            modelBuilder.Entity("Yarrow.Data.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScenarioGroupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ScenarioGroupId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGrabbable")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Yarrow.Data.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("Yarrow.Data.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedById")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<float?>("OriginAltitude")
                        .HasColumnType("REAL");

                    b.Property<float?>("OriginLatitude")
                        .HasColumnType("REAL");

                    b.Property<float?>("OriginLongitude")
                        .HasColumnType("REAL");

                    b.Property<bool>("Published")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublishedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScenarioGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("StartRotation")
                        .HasColumnType("REAL");

                    b.Property<int?>("StartStationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PublishedById");

                    b.HasIndex("ScenarioGroupId");

                    b.HasIndex("StartStationId");

                    b.ToTable("ScenariosSnapshots");
                });

            modelBuilder.Entity("Yarrow.Data.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AlwaysVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.ToTable("Signs");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Altitude")
                        .HasColumnType("REAL");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<float>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("RotationString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'1,0,0,0'");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TransformId");

                    b.HasIndex("FileId");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromStationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ToStationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TransformId");

                    b.HasIndex("FromStationId");

                    b.HasIndex("ToStationId");

                    b.ToTable("StationConnections");
                });

            modelBuilder.Entity("Yarrow.Data.Text", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AlwaysVisible")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatrixString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("'1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentTransformId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ParentTransformId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RoomID")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("RoomID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Yarrow.Data.VideoClip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasDefaultValueSql("true");

                    b.Property<int>("FileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("''");

                    b.Property<int>("SphereEncoding")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StereoLayout")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TransformId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Volume")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("TransformId");

                    b.ToTable("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.WebRTCSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WebRTCSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrganizationScenario", b =>
                {
                    b.HasOne("Yarrow.Data.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Scenario", null)
                        .WithMany()
                        .HasForeignKey("ScenarioGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TagOnFile", b =>
                {
                    b.HasOne("Yarrow.Data.File", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TagOnFile_FileId");

                    b.HasOne("Yarrow.Data.FileTag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TagOnFile_TagId");
                });

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("AudioTracks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("AudioTracks")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("FileContent")
                        .HasForeignKey("Yarrow.Data.FileContent", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.GsvMetadatum", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("GsvMetadatum")
                        .HasForeignKey("Yarrow.Data.GsvMetadatum", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.Log", b =>
                {
                    b.HasOne("Yarrow.Data.Report", "Report")
                        .WithMany("Logs")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Yarrow.Data.UserProfile", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("MenuItems")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yarrow.Data.Organization", "Organization")
                        .WithMany("MenuItems")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.MenuItem", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yarrow.Data.Scenario", "ScenarioGroup")
                        .WithMany("MenuItems")
                        .HasForeignKey("ScenarioGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("File");

                    b.Navigation("Organization");

                    b.Navigation("Parent");

                    b.Navigation("ScenarioGroup");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Models")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Models")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "CreatedBy")
                        .WithMany("ScenarioGroups")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioSnapshot", b =>
                {
                    b.HasOne("Yarrow.Data.UserProfile", "CreatedBy")
                        .WithMany("CreatedScenarios")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.UserProfile", "PublishedBy")
                        .WithMany("PublishedScenarios")
                        .HasForeignKey("PublishedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yarrow.Data.Scenario", "ScenarioGroup")
                        .WithMany("Scenarios")
                        .HasForeignKey("ScenarioGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Station", "StartStation")
                        .WithMany("Scenarios")
                        .HasForeignKey("StartStationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("PublishedBy");

                    b.Navigation("ScenarioGroup");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Signs")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Signs")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Stations")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithOne("Station")
                        .HasForeignKey("Yarrow.Data.Station", "TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.HasOne("Yarrow.Data.Station", "FromStation")
                        .WithMany("StationConnectionFromStations")
                        .HasForeignKey("FromStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Station", "ToStation")
                        .WithMany("StationConnectionToStations")
                        .HasForeignKey("ToStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("StationConnections")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Text", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Texts")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Texts")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.HasOne("Yarrow.Data.Transform", "ParentTransform")
                        .WithMany("InverseParentTransform")
                        .HasForeignKey("ParentTransformId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yarrow.Data.ScenarioSnapshot", "Scenario")
                        .WithMany("Transforms")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTransform");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.HasOne("Yarrow.Data.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yarrow.Data.Room", "Room")
                        .WithMany("Users")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Yarrow.Data.VideoClip", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("VideoClips")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("VideoClips")
                        .HasForeignKey("TransformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("FileContent");

                    b.Navigation("GsvMetadatum");

                    b.Navigation("MenuItems");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Stations");

                    b.Navigation("Texts");

                    b.Navigation("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Yarrow.Data.Organization", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Yarrow.Data.Report", b =>
                {
                    b.Navigation("Logs");
                });

            modelBuilder.Entity("Yarrow.Data.Room", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.ScenarioSnapshot", b =>
                {
                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Navigation("Scenarios");

                    b.Navigation("StationConnectionFromStations");

                    b.Navigation("StationConnectionToStations");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("InverseParentTransform");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Station");

                    b.Navigation("StationConnections");

                    b.Navigation("Texts");

                    b.Navigation("VideoClips");
                });

            modelBuilder.Entity("Yarrow.Data.UserProfile", b =>
                {
                    b.Navigation("CreatedScenarios");

                    b.Navigation("Logs");

                    b.Navigation("PublishedScenarios");

                    b.Navigation("Reports");

                    b.Navigation("ScenarioGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
