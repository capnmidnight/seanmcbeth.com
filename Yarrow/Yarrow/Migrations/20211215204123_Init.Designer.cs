// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Yarrow.Data;

namespace Yarrow.Migrations
{
    [DbContext(typeof(YarrowContext))]
    [Migration("20211215204123_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "C.UTF-8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("Activities_ID_seq")
                .HasMax(2147483647L);

            modelBuilder.HasSequence("Errors_ID_seq")
                .HasMax(2147483647L);

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AutoPlay")
                        .HasColumnType("boolean");

                    b.Property<string>("Effect")
                        .HasColumnType("text");

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<bool>("Loop")
                        .HasColumnType("boolean");

                    b.Property<float>("MaxDistance")
                        .HasColumnType("real");

                    b.Property<float>("MinDistance")
                        .HasColumnType("real");

                    b.Property<bool>("Spatialize")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.Property<float>("Volume")
                        .HasColumnType("real");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "AudioTracks_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "AudioTracks_TransformID_index");

                    b.ToTable("AudioTracks");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Copyright")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime?>("CopyrightDate")
                        .HasColumnType("date");

                    b.Property<string>("DiskPathName")
                        .HasColumnType("text");

                    b.Property<string>("Mime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("FileId")
                        .HasName("FileContents_pkey");

                    b.HasIndex(new[] { "FileId" }, "filecontents_fileid_index");

                    b.ToTable("FileContents");
                });

            modelBuilder.Entity("Yarrow.Data.FileTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "Name" }, "FileTags_ID_Name__IDX");

                    b.HasIndex(new[] { "Name" }, "FileTags_Name_unq")
                        .IsUnique();

                    b.ToTable("FileTags");
                });

            modelBuilder.Entity("Yarrow.Data.Gsvmetadatum", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Pano")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FileId")
                        .HasName("GSVMetadata_pkey");

                    b.HasIndex(new[] { "Pano" }, "GSVMetadata_unique_pano")
                        .IsUnique();

                    b.HasIndex(new[] { "FileId" }, "fki_Metadata_Files");

                    b.ToTable("GSVMetadata");
                });

            modelBuilder.Entity("Yarrow.Data.Headset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<int?>("PurchasePrice")
                        .HasColumnType("integer");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("Id");

                    b.ToTable("Headsets");
                });

            modelBuilder.Entity("Yarrow.Data.HeadsetLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("HeadsetId")
                        .HasColumnType("integer")
                        .HasColumnName("HeadsetID");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "HeadsetId" }, "IX_HeadsetLocations_HeadsetID");

                    b.ToTable("HeadsetLocations");
                });

            modelBuilder.Entity("Yarrow.Data.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentID");

                    b.Property<int?>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("ScenarioID");

                    b.Property<bool>("Visible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("ParentId");

                    b.HasIndex("ScenarioId");

                    b.HasIndex(new[] { "Id", "FileId" }, "IDX_MenuItems__ID_FileID");

                    b.HasIndex(new[] { "Id", "ParentId" }, "IDX_MenuItems__ID_ParentID");

                    b.HasIndex(new[] { "Id", "ScenarioId" }, "fki_FK_MenuItem_Scenario");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<bool>("IsGrabbable")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "Models_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "Models_TransformID_index");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("nextval('\"Activities_ID_seq\"'::regclass)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("integer")
                        .HasColumnName("LanguageID");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("StartRotation")
                        .HasColumnType("real");

                    b.Property<int?>("StartStationId")
                        .HasColumnType("integer")
                        .HasColumnName("StartStationID");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex(new[] { "Id", "LanguageId" }, "fki_FK_Scenario_Language");

                    b.HasIndex(new[] { "StartStationId" }, "fki_FK_Scenario_StartStation");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.Setting", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name")
                        .HasName("Settings_pkey");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<bool>("IsCallout")
                        .HasColumnType("boolean");

                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FileId" }, "Signs_FileID_index");

                    b.HasIndex(new[] { "TransformId" }, "Signs_TransformID_index");

                    b.ToTable("Signs");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Property<int>("TransformId")
                        .HasColumnType("integer")
                        .HasColumnName("TransformID");

                    b.Property<float>("Altitude")
                        .HasColumnType("real");

                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<float[]>("Rotation")
                        .IsRequired()
                        .HasColumnType("real[]");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.HasKey("TransformId")
                        .HasName("Stations_pkey");

                    b.HasIndex(new[] { "TransformId" }, "fki_Stations_Transforms");

                    b.HasIndex(new[] { "FileId" }, "stations_fileid_index");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.Property<int>("FromStationId")
                        .HasColumnType("integer")
                        .HasColumnName("FromStationID");

                    b.Property<int>("ToStationId")
                        .HasColumnType("integer")
                        .HasColumnName("ToStationID");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.HasKey("FromStationId", "ToStationId")
                        .HasName("StationConnections_pkey");

                    b.HasIndex(new[] { "FromStationId" }, "StationConnections_FromStationID_index");

                    b.HasIndex(new[] { "ToStationId" }, "StationConnections_ToStationID_index");

                    b.ToTable("StationConnections");
                });

            modelBuilder.Entity("Yarrow.Data.TagOnFile", b =>
                {
                    b.Property<int>("FileId")
                        .HasColumnType("integer")
                        .HasColumnName("FileID");

                    b.Property<int>("TagId")
                        .HasColumnType("integer")
                        .HasColumnName("TagID");

                    b.HasKey("FileId", "TagId")
                        .HasName("TagOnFile__pk");

                    b.HasIndex(new[] { "TagId" }, "IX_TagOnFile_TagID");

                    b.HasIndex(new[] { "FileId", "TagId" }, "_TagOnFile___FileID__IDX");

                    b.ToTable("TagOnFile");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<float[]>("Matrix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real[]")
                        .HasDefaultValueSql("'{1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1}'::real[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentTransformId")
                        .HasColumnType("integer")
                        .HasColumnName("ParentTransformID");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("ScenarioID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ScenarioId" }, "fki_FK_Transform_Scenario");

                    b.HasIndex(new[] { "ParentTransformId" }, "fki_FK_Transforms_ParentTransforms");

                    b.ToTable("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.WebRtc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool?>("Enabled")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WebRTC");
                });

            modelBuilder.Entity("Yarrow.Data.AudioTrack", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("AudioTracks")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_AudioTracks_Files")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("AudioTracks")
                        .HasForeignKey("TransformId")
                        .HasConstraintName("FK_AudioTracks_Transforms")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.FileContent", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("FileContent")
                        .HasForeignKey("Yarrow.Data.FileContent", "FileId")
                        .HasConstraintName("FK_FileContents_Files")
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.Gsvmetadatum", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithOne("Gsvmetadatum")
                        .HasForeignKey("Yarrow.Data.Gsvmetadatum", "FileId")
                        .HasConstraintName("fk_Metadata_Files")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Yarrow.Data.HeadsetLocation", b =>
                {
                    b.HasOne("Yarrow.Data.Headset", "Headset")
                        .WithMany("HeadsetLocations")
                        .HasForeignKey("HeadsetId")
                        .HasConstraintName("FK_HeadsetLocations_to_Headsets")
                        .IsRequired();

                    b.Navigation("Headset");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("MenuItems")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_MenuItem_File");

                    b.HasOne("Yarrow.Data.MenuItem", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_MenuItem_Parent");

                    b.HasOne("Yarrow.Data.Scenario", "Scenario")
                        .WithMany("MenuItems")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("FK_MenuItem_Scenario");

                    b.Navigation("File");

                    b.Navigation("Parent");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Yarrow.Data.Model", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Models")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_Models_Files")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Models")
                        .HasForeignKey("TransformId")
                        .HasConstraintName("FK_Models_Transforms")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.HasOne("Yarrow.Data.Language", "Language")
                        .WithMany("Scenarios")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Scenario_Language")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Station", "StartStation")
                        .WithMany("Scenarios")
                        .HasForeignKey("StartStationId")
                        .HasConstraintName("FK_Scenario_StartStation")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Language");

                    b.Navigation("StartStation");
                });

            modelBuilder.Entity("Yarrow.Data.Sign", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Signs")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_Signs_Files")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithMany("Signs")
                        .HasForeignKey("TransformId")
                        .HasConstraintName("FK_Signs_Transforms")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("Stations")
                        .HasForeignKey("FileId")
                        .HasConstraintName("FK_Stations_Files")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Transform", "Transform")
                        .WithOne("Station")
                        .HasForeignKey("Yarrow.Data.Station", "TransformId")
                        .HasConstraintName("FK_Stations_Transforms")
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Transform");
                });

            modelBuilder.Entity("Yarrow.Data.StationConnection", b =>
                {
                    b.HasOne("Yarrow.Data.Station", "FromStation")
                        .WithMany("StationConnectionFromStations")
                        .HasForeignKey("FromStationId")
                        .HasConstraintName("FK_StationConnection_From")
                        .IsRequired();

                    b.HasOne("Yarrow.Data.Station", "ToStation")
                        .WithMany("StationConnectionToStations")
                        .HasForeignKey("ToStationId")
                        .HasConstraintName("FK_StationConnection_To")
                        .IsRequired();

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("Yarrow.Data.TagOnFile", b =>
                {
                    b.HasOne("Yarrow.Data.File", "File")
                        .WithMany("TagOnFiles")
                        .HasForeignKey("FileId")
                        .HasConstraintName("_TagOnFile__FK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Yarrow.Data.FileTag", "Tag")
                        .WithMany("TagOnFiles")
                        .HasForeignKey("TagId")
                        .HasConstraintName("_TagOnFile__FK_1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.HasOne("Yarrow.Data.Transform", "ParentTransform")
                        .WithMany("InverseParentTransform")
                        .HasForeignKey("ParentTransformId")
                        .HasConstraintName("FK_Transforms_ParentTransforms");

                    b.HasOne("Yarrow.Data.Scenario", "Scenario")
                        .WithMany("Transforms")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("FK_Transform_Scenario")
                        .IsRequired();

                    b.Navigation("ParentTransform");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("Yarrow.Data.File", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("FileContent");

                    b.Navigation("Gsvmetadatum");

                    b.Navigation("MenuItems");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Stations");

                    b.Navigation("TagOnFiles");
                });

            modelBuilder.Entity("Yarrow.Data.FileTag", b =>
                {
                    b.Navigation("TagOnFiles");
                });

            modelBuilder.Entity("Yarrow.Data.Headset", b =>
                {
                    b.Navigation("HeadsetLocations");
                });

            modelBuilder.Entity("Yarrow.Data.Language", b =>
                {
                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("Yarrow.Data.MenuItem", b =>
                {
                    b.Navigation("InverseParent");
                });

            modelBuilder.Entity("Yarrow.Data.Scenario", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Transforms");
                });

            modelBuilder.Entity("Yarrow.Data.Station", b =>
                {
                    b.Navigation("Scenarios");

                    b.Navigation("StationConnectionFromStations");

                    b.Navigation("StationConnectionToStations");
                });

            modelBuilder.Entity("Yarrow.Data.Transform", b =>
                {
                    b.Navigation("AudioTracks");

                    b.Navigation("InverseParentTransform");

                    b.Navigation("Models");

                    b.Navigation("Signs");

                    b.Navigation("Station");
                });
#pragma warning restore 612, 618
        }
    }
}
