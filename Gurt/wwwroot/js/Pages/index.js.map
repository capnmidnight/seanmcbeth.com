{
  "version": 3,
  "sources": ["../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/src/typeChecks.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/attrs.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/arrays.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/Task.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/src/tags.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/collections/src/arrays.ts", "../../../node_modules/gl-matrix/src/common.ts", "../../../node_modules/gl-matrix/src/vec2.ts", "../../../Pages/Ball.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/events/src/debounce.ts", "../../../Pages/index.ts"],
  "sourcesContent": ["function t(o: any, s: string, c: Function) {\n    return typeof o === s\n        || o instanceof c;\n}\n\nexport function isFunction(obj: any): obj is Function {\n    return t(obj, \"function\", Function);\n}\n\nexport function isString(obj: any): obj is string {\n    return t(obj, \"string\", String);\n}\n\nexport function isBoolean(obj: any): obj is boolean {\n    return t(obj, \"boolean\", Boolean);\n}\n\nexport function isNumber(obj: any): obj is number {\n    return t(obj, \"number\", Number);\n}\n\n/**\n * Check a value to see if it is of a number type\n * and is the special NaN value or one of the Infinities.\n */\nexport function isBadNumber(num: number): boolean {\n    return isNullOrUndefined(num)\n        || !Number.isFinite(num)\n        || Number.isNaN(num);\n}\n\n/**\n * Check a value to see if it is of a number type\n * and is not the special NaN value nor one of the Infinities.\n */\nexport function isGoodNumber(obj: any): obj is number {\n    return isNumber(obj)\n        && !isBadNumber(obj);\n}\n\nexport function isObject(obj: any): obj is object {\n    return isDefined(obj)\n        && t(obj, \"object\", Object);\n}\n\nexport function isPromise<T>(obj: any): obj is Promise<T> {\n    return obj instanceof Promise;\n}\n\nexport function isDate(obj: any): obj is Date {\n    return obj instanceof Date;\n}\n\nexport function isArray(obj: any): obj is Array<any> {\n    return obj instanceof Array;\n}\n\nexport function assertNever(x: never, msg?: string): never {\n    throw new Error((msg || \"Unexpected object: \") + x);\n}\n\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\n    return obj === null\n        || obj === undefined;\n}\n\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\n    return !isNullOrUndefined(obj);\n}\n\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\n    return isFunction(obj);\n}\n\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\n    return !isEventListener(obj);\n}\n\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\n    return obj instanceof Uint8Array\n        || obj instanceof Uint8ClampedArray\n        || obj instanceof Int8Array\n        || obj instanceof Uint16Array\n        || obj instanceof Int16Array\n        || obj instanceof Uint32Array\n        || obj instanceof Int32Array\n        || obj instanceof Float32Array\n        || obj instanceof Float64Array\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\n}\n\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\n    return val && typeof ArrayBuffer !== \"undefined\" &&\n        (val instanceof ArrayBuffer ||\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\n}", "import type { MediaType } from \"@juniper-lib/mediatypes\";\nimport { identity } from \"@juniper-lib/tslib/dist/identity\";\nimport { stringRandom } from \"@juniper-lib/tslib/dist/strings/stringRandom\";\nimport { isBoolean, isFunction, isNullOrUndefined, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\n\nconst warnings = new Map<string, Set<string>>();\n\n/**\n * A setter functor for HTML attributes.\n **/\nexport class HtmlAttr<T extends string = string, V = number | object | ((elem: HTMLElement) => unknown)> {\n\n    readonly tags: readonly string[];\n\n    /**\n     * Creates a new setter functor for HTML Attributes\n     * @param key - the attribute name.\n     * @param value - the value to set for the attribute.\n     * @param bySetAttribute - whether the attribute should be set via the setAttribute method.\n     * @param tags - the HTML tags that support this attribute.\n     */\n    constructor(\n        public readonly key: T,\n        public readonly value: V,\n        private readonly bySetAttribute: boolean,\n        ...tags: string[]) {\n        this.tags = tags.map((t) => t.toLocaleUpperCase());\n        Object.freeze(this);\n    }\n\n    /**\n     * Set the attribute value on an HTMLElement\n     * @param elem - the element on which to set the attribute.\n     */\n    applyToElement(elem: HTMLElement) {\n        if (this.tags.length > 0\n            && this.tags.indexOf(elem.tagName) === -1) {\n            let set = warnings.get(elem.tagName);\n            if (!set) {\n                warnings.set(elem.tagName, set = new Set());\n            }\n\n            if (!set.has(this.key)) {\n                set.add(this.key);\n                console.warn(`Element ${elem.tagName} does not support Attribute ${this.key}`);\n            }\n        }\n\n        if (this.bySetAttribute) {\n            elem.setAttribute(this.key, this.value.toString());\n        }\n        else if (this.key in elem) {\n            (elem as unknown)[this.key] = this.value;\n        }\n        else if (this.value === false) {\n            elem.removeAttribute(this.key);\n        }\n        else if (this.value === true) {\n            elem.setAttribute(this.key, \"\");\n        }\n        else if (isFunction(this.value)) {\n            this.value(elem);\n        }\n        else {\n            elem.setAttribute(this.key, this.value.toString());\n        }\n    }\n}\n\nfunction attr<T extends string = string, V = number | object>(key: T, value: V, bySetAttribute: boolean, ...tags: string[]) {\n    return new HtmlAttr(key, value, bySetAttribute, ...tags);\n}\n\nexport function isAttr(obj: unknown): obj is HtmlAttr {\n    return obj instanceof HtmlAttr;\n}\n\n/**\n * a list of types the server accepts, typically a file type.\n * @param value - the value to set on the attribute.\n **/\nexport function Accept(value: string) { return attr(\"accept\", value, false, \"form\", \"input\"); }\n\n/**\n * The accessKey attribute\n **/\nexport function AccessKey(value: string) { return attr(\"accessKey\", value, false, \"input\", \"button\"); }\n\n/**\n * specifying the horizontal alignment of the element.\n **/\nexport function Align(value: string) { return attr(\"align\", value, false, \"applet\", \"caption\", \"col\", \"colgroup\", \"hr\", \"iframe\", \"img\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"); }\n\n/**\n * Specifies a feature-policy for the iframe.\n **/\nexport function Allow(value: string) { return attr(\"allow\", value, false, \"iframe\"); }\n\n/**\n * Whether or not to allow an IFrame to open full screen elements.\n */\nexport function AllowFullscreen(value: boolean) { return attr(\"allowfullscreen\", value, false, \"iframe\"); }\n\n/**\n * Alternative text in case an image can't be displayed.\n **/\nexport function Alt(value: string) { return attr(\"alt\", value, false, \"applet\", \"area\", \"img\", \"input\"); }\n\n/**\n * Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.\n **/\nexport function AriaActiveDescendant(value: string) { return attr(\"ariaActiveDescendant\", value, false); }\n\n/**\n * Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n **/\nexport function AriaAtomic(value: boolean) { return attr(\"ariaAtomic\", value, false); }\n\n/**\n * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be presented if they are made.\n **/\nexport function AriaAutoComplete(value: string) { return attr(\"ariaAutoComplete\", value, false); }\n\n/**\n * Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.\n **/\nexport function AriaBusy(value: boolean) { return attr(\"ariaBusy\", value, false); }\n\n/**\n * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets. See related aria-pressed and aria-selected.\n **/\nexport function AriaChecked(value: boolean) { return attr(\"ariaChecked\", value, false); }\n\n/**\n * Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\n  **/\nexport function AriaColCount(value: number) { return attr(\"ariaColCount\", value, false); }\n\n/**\n * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colcount and aria-colspan.\n  **/\nexport function AriaColIndex(value: number) { return attr(\"ariaColIndex\", value, false); }\n\n/**\n * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\n  **/\nexport function AriaColSpan(value: number) { return attr(\"ariaColSpan\", value, false); }\n\n/**\n * Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.\n  **/\nexport function AriaControls(value: string) { return attr(\"ariaControls\", value, false); }\n\n/**\n * Indicates the element that represents the current item within a container or set of related elements.\n  **/\nexport function AriaCurrent(value: string) { return attr(\"ariaCurrent\", value, false); }\n\n/**\n * Identifies the element (or elements) that describes the object. See related aria-labelledby.\n  **/\nexport function AriaDescribedBy(value: string) { return attr(\"ariaDescribedBy\", value, false); }\n\n/**\n * Identifies the element that provides a detailed, extended description for the object. See related aria-describedby.\n  **/\nexport function AriaDetails(value: string) { return attr(\"ariaDetails\", value, false); }\n\n/**\n * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable. See related aria-hidden and aria-readonly.\n  **/\nexport function AriaDisabled(value: boolean) { return attr(\"ariaDisabled\", value, false); }\n\n/**\n * Identifies the element that provides an error message for the object. See related aria-invalid and aria-describedby.\n  **/\nexport function AriaErrorMessage(value: string) { return attr(\"ariaErrorMessage\", value, false); }\n\n/**\n * Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.\n **/\nexport function AriaExpanded(value: boolean) { return attr(\"ariaExpanded\", value, false); }\n\n/**\n * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\n  **/\nexport function AriaFlowTo(value: string) { return attr(\"ariaFlowTo\", value, false); }\n\n/**\n * Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n  **/\nexport function AriaHasPopup(value: string) { return attr(\"ariaHasPopup\", value, false); }\n\n/**\n * Indicates whether the element is exposed to an accessibility API. See related aria-disabled.\n **/\nexport function AriaHidden(value: boolean) { return attr(\"ariaHidden\", value, false); }\n\n/**\n * Indicates the entered value does not conform to the format expected by the application. See related aria-errormessage.\n  **/\nexport function AriaInvalid(value: string) { return attr(\"ariaInvalid\", value, false); }\n\n/**\n * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.\n  **/\nexport function AriaKeyShortcuts(value: string) { return attr(\"ariaKeyShortcuts\", value, false); }\n\n/**\n * Defines a string value that labels the current element. See related aria-labelledby.\n  **/\nexport function AriaLabel(value: string) { return attr(\"ariaLabel\", value, false); }\n\n/**\n * Identifies the element (or elements) that labels the current element. See related aria-describedby.\n  **/\nexport function AriaLabelledBy(value: string) { return attr(\"ariaLabelledBy\", value, false); }\n\n/**\n * Defines the hierarchical level of an element within a structure.\n  **/\nexport function AriaLevel(value: number) { return attr(\"ariaLevel\", value, false); }\n\n/**\n * Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n  **/\nexport function AriaLive(value: string) { return attr(\"ariaLive\", value, false); }\n\n/**\n * Indicates whether an element is modal when displayed\n  **/\nexport function AriaModal(value: boolean) { return attr(\"ariaModal\", value, false); }\n\n/**\n * Indicates whether a text box accepts multiple lines of input or only a single line.\n  **/\nexport function AriaMultiline(value: boolean) { return attr(\"ariaMultiline\", value, false); }\n\n/**\n * Indicates that the user may select more than one item from the current selectable descendants.\n  **/\nexport function AriaMultiSelectable(value: boolean) { return attr(\"ariaMultiSelectable\", value, false); }\n\n/**\n * Indicates that the user may select more than one item from the current selectable descendants.\n  **/\nexport function AriaOrientation(value: string) { return attr(\"ariaOrientation\", value, false); }\n\n/**\n * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\n  **/\nexport function AriaOwns(value: string) { return attr(\"ariaOwns\", value, false); }\n\n/**\n * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n  **/\nexport function AriaPlaceholder(value: string) { return attr(\"ariaPlaceholder\", value, false); }\n\n/**\n * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\n  **/\nexport function AriaPosInSet(value: number) { return attr(\"ariaPosInSet\", value, false); }\n\n/**\n * Indicates the current \"pressed\" state of toggle buttons. See related aria-checked and aria-selected.\n **/\nexport function AriaPressed(value: boolean) { return attr(\"ariaPressed\", value, false); }\n\n/**\n * Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.\n  **/\nexport function AriaReadOnly(value: boolean) { return attr(\"ariaReadOnly\", value, false); }\n\n/**\n * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\n  **/\nexport function AriaRelevant(value: string) { return attr(\"ariaRelevant\", value, false); }\n\n/**\n * Indicates that user input is required on the element before a form may be submitted.\n  **/\nexport function AriaRequired(value: boolean) { return attr(\"ariaRequired\", value, false); }\n\n/**\n * Defines a human-readable, author-localized description for the role of an element.\n  **/\nexport function AriaRoleDescription(value: string) { return attr(\"ariaRoleDescription\", value, false); }\n\n/**\n * Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\n  **/\nexport function AriaRowCount(value: number) { return attr(\"ariaRowCount\", value, false); }\n\n/**\n * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowcount and aria-rowspan.\n  **/\nexport function AriaRowIndex(value: number) { return attr(\"ariaRowIndex\", value, false); }\n\n/**\n Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\n  **/\nexport function AriaRowSpan(value: number) { return attr(\"ariaRowSpan\", value, false); }\n\n/**\n * Indicates the current \"selected\" state of various widgets. See related aria-checked and aria-pressed.\n **/\nexport function AriaSelected(value: boolean) { return attr(\"ariaSelected\", value, false); }\n\n/**\n * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\n  **/\nexport function AriaSetSize(value: number) { return attr(\"ariaSetsize\", value, false); }\n\n/**\n * Indicates if items in a table or grid are sorted in ascending or descending order.\n  **/\nexport function AriaSort(value: string) { return attr(\"ariaSort\", value, false); }\n\n/**\n * Defines the maximum allowed value for a range widget.\n  **/\nexport function AriaValueMax(value: number) { return attr(\"ariaValueMax\", value, false); }\n\n/**\n * Defines the minimum allowed value for a range widget.\n  **/\nexport function AriaValueMin(value: number) { return attr(\"ariaValueMin\", value, false); }\n\n/**\n * Defines the current value for a range widget. See related aria-valuetext.\n  **/\nexport function AriaValueNow(value: number) { return attr(\"ariaValueNow\", value, false); }\n\n/**\n * Defines the human readable text alternative of aria-valuenow for a range widget.\n  **/\nexport function AriaValueText(value: string) { return attr(\"ariaValueText\", value, false); }\n\n/**\n * Executes the script asynchronously.\n  **/\nexport function Async(value: string) { return attr(\"async\", value, false, \"script\"); }\n\n/**\n * Sets whether input is automatically capitalized when entered by user\n  **/\nexport function AutoCapitalize(value: boolean) { return attr(\"autocapitalize\", value, false); }\n\n/**\n * Indicates whether controls in this form can by default have their values automatically completed by the browser.\n  **/\nexport function AutoComplete(value: HTMLAutoCompleteAttributeValue) { return attr(\"autocomplete\", value, false, \"form\", \"input\", \"select\", \"textarea\"); }\n\n/**\n * The element should be automatically focused after the page loaded.\n  **/\nexport function AutoFocus(value: boolean) { return attr(\"autofocus\", value, false, \"button\", \"input\", \"keygen\", \"select\", \"textarea\"); }\n\n/**\n * The audio or video should play as soon as possible.\n  **/\nexport function AutoPlay(value: boolean) { return attr(\"autoplay\", value, false, \"audio\", \"video\"); }\n\n/**\n * Contains the time range of already buffered media.\n  **/\nexport function Buffered(value: boolean) { return attr(\"buffered\", value, false, \"audio\", \"video\"); }\n\n/**\n * From the HTML Media Capture\n  **/\nexport function Capture(value: boolean) { return attr(\"capture\", value, false, \"input\"); }\n\n/**\n * Declares the character encoding of the page or script.\n  **/\nexport function CharSet(value: string) { return attr(\"charset\", value, false, \"meta\", \"script\"); }\n\n/**\n * Indicates whether the element should be checked on page load.\n  **/\nexport function Checked(value: boolean) { return attr(\"checked\", value, false, \"command\", \"input\"); }\n\n/**\n * Contains a URI which points to the source of the quote or change.\n  **/\nexport function Cite_attr(value: string) { return attr(\"cite\", value, false, \"blockquote\", \"del\", \"ins\", \"q\"); }\n\n/**\n * Often used with CSS to style elements with common properties.\n  **/\nexport function ClassName(value: string) { return attr(\"className\", value, false); }\n\n/**\n * Often used with CSS to style elements with common properties.\n  **/\nexport function ClassList(...values: string[]) {\n    values = values.filter(identity);\n    return attr(\"CLASS_LIST\", (element: HTMLElement) => element.classList.add(...values), false);\n}\n\n/**\n * Specifies the URL of the applet's class file to be loaded and executed.\n  **/\nexport function Code_attr(value: string) { return attr(\"code\", value, false, \"applet\"); }\n\n/**\n * This attribute gives the absolute or relative URL of the directory where applets' .class files referenced by the code attribute are stored.\n  **/\nexport function CodeBase(value: string) { return attr(\"codebase\", value, false, \"applet\"); }\n\n/**\n * Defines the number of columns in a textarea.\n  **/\nexport function Cols(value: number) { return attr(\"cols\", value, false, \"textarea\"); }\n\n/**\n * The colspan attribute defines the number of columns a cell should span.\n  **/\nexport function ColSpan(value: number) { return attr(\"colspan\", value, false, \"td\", \"th\"); }\n\n/**\n * A value associated with http-equiv or name depending on the context.\n  **/\nexport function Content(value: string) { return attr(\"content\", value, false, \"meta\"); }\n\n/**\n * Indicates whether the element's content is editable.\n  **/\nexport function ContentEditable(value: string) { return attr(\"contenteditable\", value, false); }\n\n/**\n * Defines the ID of a <menu> element which will serve as the element's context menu.\n  **/\nexport function ContextMenu(value: string) { return attr(\"contextmenu\", value, false); }\n\n/**\n * Indicates whether the browser should show playback controls to the user.\n  **/\nexport function Controls(value: boolean) { return attr(\"controls\", value, false, \"audio\", \"video\"); }\n\n/**\n * A set of values specifying the coordinates of the hot-spot region.\n  **/\nexport function Coords(value: string) { return attr(\"coords\", value, false, \"area\"); }\n\n/**\n * How the element handles cross-origin requests\n  **/\nexport function CrossOrigin(value: string) { return attr(\"crossorigin\", value, false, \"audio\", \"img\", \"link\", \"script\", \"video\"); }\n\n/**\n * Specifies the Content Security Policy that an embedded document must agree to enforce upon itself.\n  **/\nexport function CSP(value: string) { return attr(\"csp\", value, false, \"iframe\"); }\n\n/**\n * Specifies the URL of the resource.\n  **/\nexport function Data_attr(value: string) { return attr(\"data\", value, false, \"object\"); }\n\n/**\n * Lets you attach custom attributes to an HTML element.\n */\nexport function CustomData<V = number | object>(name: string, value: V) { return attr(\"data-\" + name.toLowerCase(), value, true); }\n\n/**\n * Indicates the date and time associated with the element.\n  **/\nexport function DateTime(value: Date) { return attr(\"datetime\", value, false, \"del\", \"ins\", \"time\"); }\n\n/**\n * Indicates the preferred method to decode the image.\n  **/\nexport function Decoding(value: string) { return attr(\"decoding\", value, false, \"img\"); }\n\n/**\n * Indicates that the track should be enabled unless the user's preferences indicate something different.\n  **/\nexport function Default(value: boolean | string) { return attr(\"default\", value, false, \"track\"); }\n\n/**\n * Indicates that the script should be executed after the page has been parsed.\n  **/\nexport function Defer(value: boolean) { return attr(\"defer\", value, false, \"script\"); }\n\n/**\n * Defines the text direction. Allowed values are ltr (Left-To-Right) or rtl (Right-To-Left)\n  **/\nexport function Dir(value: string) { return attr(\"dir\", value, false); }\n\n/**\n * Indicates whether the user can interact with the element.\n  **/\nexport function Disabled(value: boolean) { return attr(\"disabled\", value, false, \"button\", \"command\", \"fieldset\", \"input\", \"keygen\", \"optgroup\", \"option\", \"select\", \"textarea\"); }\n\n/**\n * ??? \n  **/\nexport function DirName(value: string) { return attr(\"dirname\", value, false, \"input\", \"textarea\"); }\n\n/**\n * Indicates that the hyperlink is to be used for downloading a resource by giving the file a name.\n  **/\nexport function Download(value: string) { return attr(\"download\", value, false, \"a\", \"area\"); }\n\n/**\n * Defines whether the element can be dragged.\n  **/\nexport function Draggable(value: boolean) { return attr(\"draggable\", value, false); }\n\n/**\n * Indicates that the element accepts the dropping of content onto it.\n  **/\nexport function DropZone(value: string) { return attr(\"dropzone\", value, false); }\n\n/**\n * Defines the content type of the form data when the method is POST.\n  **/\nexport function EncType(value: string) { return attr(\"enctype\", value, false, \"form\"); }\n\n/**\n * The enterkeyhint specifies what action label (or icon) to present for the enter key on virtual keyboards. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\n  **/\nexport function EnterKeyHint(value: string) { return attr(\"enterkeyhint\", value, false, \"textarea\"); }\n\n/**\n * Describes elements which belongs to this one.\n  **/\nexport function HtmlFor(value: string) { return attr(\"htmlFor\", value, false, \"label\", \"output\"); }\n\n/**\n * Indicates the form that is the owner of the element.\n  **/\nexport function Form_attr(value: string) { return attr(\"form\", value, false, \"button\", \"fieldset\", \"input\", \"keygen\", \"label\", \"meter\", \"object\", \"output\", \"progress\", \"select\", \"textarea\"); }\n\n/**\n * Indicates the action of the element, overriding the action defined in the <form>.\n  **/\nexport function FormAction(value: string) { return attr(\"formaction\", value, false, \"input\", \"button\"); }\n\n/**\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the encoding type to use during form submission. If this attribute is specified, it overrides the enctype attribute of the button's form owner.\n  **/\nexport function FormEncType(value: string) { return attr(\"formenctype\", value, false, \"button\", \"input\"); }\n\n/**\n * If the button/input is a submit button (type=\"submit\"), this attribute sets the submission method to use during form submission (GET, POST, etc.). If this attribute is specified, it overrides the method attribute of the button's form owner.\n  **/\nexport function FormMethod(value: string) { return attr(\"formmethod\", value, false, \"button\", \"input\"); }\n\n/**\n * If the button/input is a submit button (type=\"submit\"), this boolean attribute specifies that the form is not to be validated when it is submitted. If this attribute is specified, it overrides the novalidate attribute of the button's form owner.\n  **/\nexport function FormNoValidate(value: boolean) { return attr(\"formnovalidate\", value, false, \"button\", \"input\"); }\n\n/**\n * If the button/input is a submit button (type=\"submit\"), this attribute specifies the browsing context (for example, tab, window, or inline frame) in which to display the response that is received after submitting the form. If this attribute is specified, it overrides the target attribute of the button's form owner.\n  **/\nexport function FormTarget(value: string) { return attr(\"formtarget\", value, false, \"button\", \"input\"); }\n\n/**\n * Width of the border to put around an `iframe` tag.\n */\nexport function FrameBorder(value: string | number | boolean) {\n    if (isBoolean(value)) {\n        value = value ? \"yes\" : \"no\";\n    }\n\n    return attr(\"frameborder\", value, false, \"iframe\");\n}\n\n/**\n * IDs of the <th> elements which applies to this element.\n  **/\nexport function Headers(value: string) { return attr(\"headers\", value, false, \"td\", \"th\"); }\n\n/**\n * Specifies the height of elements listed here. For all other elements, use the CSS height property.\n  **/\nexport function Height(value: number | string) { return attr(\"height\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\n\n/**\n * Prevents rendering of given element, while keeping child elements, e.g. script elements, active.\n  **/\nexport function Hidden(value: boolean) { return attr(\"hidden\", value, false); }\n\n/**\n * Indicates the lower bound of the upper range.\n  **/\nexport function High(value: number) { return attr(\"high\", value, false, \"meter\"); }\n\n/**\n * The URL of a linked resource.\n  **/\nexport function Href(value: string | URL | Blob) {\n    if (value instanceof Blob) {\n        value = URL.createObjectURL(value);\n    }\n\n    return attr(\"href\", unpackURL(value), false, \"a\", \"area\", \"base\", \"link\");\n}\n\n/**\n * Specifies the language of the linked resource.\n  **/\nexport function HrefLang(value: string) { return attr(\"hreflang\", value, false, \"a\", \"area\", \"link\"); }\n\n/**\n * Defines a pragma directive.\n  **/\nexport function HttpEquiv(value: string) { return attr(\"httpEquiv\", value, false, \"meta\"); }\n\n/**\n * Specifies a picture which represents the command.\n  **/\nexport function Icon(value: string) { return attr(\"icon\", value, false, \"command\"); }\n\n/**\n * Often used with CSS to style a specific element. The value of this attribute must be unique.\n  **/\nexport function ID(value: string) { return attr(\"id\", value, false); }\n\n/**\n * Indicates the relative fetch priority for the resource.\n  **/\nexport function Importance(value: string) { return attr(\"importance\", value, false, \"iframe\", \"img\", \"link\", \"script\"); }\n\n/**\n * Provides a hint as to the type of data that might be entered by the user while editing the element or its contents. The attribute can be used with form controls (such as the value of textarea elements), or in elements in an editing host (e.g., using contenteditable attribute).\n  **/\nexport function InputMode(value: string) { return attr(\"inputmode\", value, false, \"textarea\"); }\n\n/**\n * Specifies a Subresource Integrity value that allows browsers to verify what they fetch.\n  **/\nexport function Integrity(value: string) { return attr(\"integrity\", value, false, \"link\", \"script\"); }\n\n/**\n * This attribute tells the browser to ignore the actual intrinsic size of the image and pretend it\u2019s the size specified in the attribute.\n  **/\nexport function IntrinsicSize(value: string) { return attr(\"intrinsicsize\", value, false, \"img\"); }\n\nexport function Is(value: string) { return attr(\"is\", value, false); }\n\n/**\n * Indicates that the image is part of a server-side image map.\n  **/\nexport function IsMap(value: boolean) { return attr(\"ismap\", value, false, \"img\"); }\n\n/**\n * The itemprop attribute\n  **/\nexport function ItemProp(value: string) { return attr(\"itemprop\", value, false); }\n\n/**\n * Specifies the type of key generated.\n  **/\nexport function KeyType(value: string) { return attr(\"keytype\", value, false, \"keygen\"); }\n\n/**\n * Specifies the kind of text track.\n  **/\nexport function Kind(value: string) { return attr(\"kind\", value, false, \"track\"); }\n\n/**\n * Specifies a user-readable title of the element.\n  **/\nexport function Label_attr(value: string) { return attr(\"label\", value, false, \"optgroup\", \"option\", \"track\"); }\n\n/**\n * Defines the language used in the element.\n  **/\nexport function Lang(value: string) { return attr(\"lang\", value, false); }\n\n/**\n * Defines the script language used in the element.\n  **/\nexport function Language(value: string) { return attr(\"language\", value, false, \"script\"); }\n\n/**\n * Identifies a list of pre-defined options to suggest to the user.\n  **/\nexport function List(value: string | HTMLDataListElement) {\n    if (value instanceof HTMLDataListElement) {\n        if (isNullOrUndefined(value.id)) {\n            value.id = stringRandom(12);\n        }\n\n        if (!value.isConnected) {\n            document.body.append(value);\n        }\n\n        value = value.id;\n    }\n\n    return attr(\"list\", value, true, \"input\");\n}\n\n/**\n * Indicates whether the media should start playing from the start when it's finished.\n  **/\nexport function Loop(value: boolean) { return attr(\"loop\", value, false, \"audio\", \"bgsound\", \"marquee\", \"video\"); }\n\n/**\n * Indicates the upper bound of the lower range.\n  **/\nexport function Low(value: number) { return attr(\"low\", value, false, \"meter\"); }\n\n/**\n * Indicates the maximum value allowed.\n  **/\nexport function Max(value: number) { return attr(\"max\", value, false, \"input\", \"meter\", \"progress\"); }\n\n/**\n * Defines the maximum number of characters allowed in the element.\n  **/\nexport function MaxLength(value: number) { return attr(\"maxlength\", value, false, \"input\", \"textarea\"); }\n\n/**\n * Defines the minimum number of characters allowed in the element.\n  **/\nexport function MinLength(value: number) { return attr(\"minlength\", value, false, \"input\", \"textarea\"); }\n\n/**\n * Specifies a hint of the media for which the linked resource was designed.\n  **/\nexport function Media(value: string) { return attr(\"media\", value, false, \"a\", \"area\", \"link\", \"source\", \"style\"); }\n\n/**\n * Defines which HTTP method to use when submitting the form. Can be GET (default) or POST.\n  **/\nexport function Method(value: string) { return attr(\"method\", value, false, \"form\"); }\n\n/**\n * Indicates the minimum value allowed.\n  **/\nexport function Min(value: number) { return attr(\"min\", value, false, \"input\", \"meter\"); }\n\n/**\n * Indicates whether multiple values can be entered in an input of the type email or file.\n  **/\nexport function Multiple(value: boolean) { return attr(\"multiple\", value, false, \"input\", \"select\"); }\n\n/**\n * Indicates whether the audio will be initially silenced on page load.\n  **/\nexport function Muted(value: boolean) { return attr(\"muted\", value, false, \"audio\", \"video\"); }\n\n/**\n * Name of the element. For example used by the server to identify the fields in form submits.\n  **/\nexport function Name(value: string) { return attr(\"name\", value, false, \"button\", \"form\", \"fieldset\", \"iframe\", \"input\", \"keygen\", \"map\", \"meta\", \"object\", \"output\", \"param\", \"select\", \"slot\", \"textarea\"); }\n\n/**\n * This attribute indicates that the form shouldn't be validated when submitted.\n  **/\nexport function NoValidate(value: boolean) { return attr(\"novalidate\", value, false, \"form\"); }\n\n/**\n * Indicates whether the details will be shown on page load.\n  **/\nexport function Open(value: boolean) { return attr(\"open\", value, false, \"details\"); }\n\n/**\n * Indicates the optimal numeric value.\n  **/\nexport function Optimum(value: number) { return attr(\"optimum\", value, false, \"meter\"); }\n\n/**\n * Defines a regular expression which the element's value will be validated against.\n  **/\nexport function Pattern(value: string) { return attr(\"pattern\", value, false, \"input\"); }\n\n/**\n * The ping attribute specifies a space-separated list of URLs to be notified if a user follows the hyperlink.\n  **/\nexport function Ping(value: string) { return attr(\"ping\", value, false, \"a\", \"area\"); }\n\n/**\n * Provides a hint to the user of what can be entered in the field.\n  **/\nexport function PlaceHolder(value: string) { return attr(\"placeholder\", value, false, \"input\", \"textarea\"); }\n\n/**\n * A URL indicating a poster frame to show until the user plays or seeks.\n  **/\nexport function Poster(value: string) { return attr(\"poster\", value, false, \"video\"); }\n\n/**\n * Indicates whether the whole resource, parts of it or nothing should be preloaded.\n  **/\nexport function Preload(value: boolean | string) { return attr(\"preload\", value, false, \"audio\", \"video\"); }\n\n/**\n * Attempts to find an element under a given element.\n * @param root\n * @param selector\n */\nexport function Query(root: ParentNode, selector: string): HtmlAttr<\"query\", HTMLElement>;\n/**\n * Attempts to find an element in the document.\n * @param selector\n */\nexport function Query(selector: string): HtmlAttr<\"query\", HTMLElement>;\n/**\n * Attempts to find an element in the document.\n * @param rootOrSelector\n * @param selector\n */\nexport function Query(rootOrSelector: ParentNode | string, selector?: string) {\n    let root: ParentNode = null;\n    if (isString(rootOrSelector)) {\n        root = document;\n        selector = rootOrSelector;\n    }\n    else {\n        root = rootOrSelector;\n    }\n\n    const elem = root.querySelector(selector);\n    return attr(\"query\", elem, false);\n}\n\nexport function QueryAll<T extends Element>(root: ParentNode, selector: string): T[];\n/**\n * Attempts to find an element in the document.\n * @param selector\n */\nexport function QueryAll<T extends Element = HTMLElement>(selector: string): T[];\n/**\n * Attempts to find an element in the document.\n * @param rootOrSelector\n * @param selector\n */\nexport function QueryAll<T extends Element = HTMLElement>(rootOrSelector: ParentNode | string, selector?: string): T[] {\n    let root: ParentNode = null;\n    if (isString(rootOrSelector)) {\n        root = document;\n        selector = rootOrSelector;\n    }\n    else {\n        root = rootOrSelector;\n    }\n\n    const elems = root.querySelectorAll(selector);\n    return Array.from(elems) as T[];\n}\n\n/**\n * Indicates whether the element can be edited.\n  **/\nexport function ReadOnly(value: boolean) { return attr(\"readonly\", value, false, \"input\", \"textarea\"); }\n\n/**\n * The radiogroup attribute\n  **/\nexport function RadioGroup(value: string) { return attr(\"radiogroup\", value, false, \"command\"); }\n\n/**\n * Specifies which referrer is sent when fetching the resource.\n  **/\nexport function ReferrerPolicy(value: string) { return attr(\"referrerpolicy\", value, false, \"a\", \"area\", \"iframe\", \"img\", \"link\", \"script\"); }\n\n/**\n * Specifies the relationship of the target object to the link object.\n  **/\nexport function Rel(value: string) { return attr(\"rel\", value, false, \"a\", \"area\", \"link\"); }\n\n/**\n * Indicates whether this element is required to fill out or not.\n  **/\nexport function Required(value: boolean) { return attr(\"required\", value, false, \"input\", \"select\", \"textarea\"); }\n\n/**\n * Indicates whether the list should be displayed in a descending order instead of a ascending.\n  **/\nexport function Reversed(value: boolean) { return attr(\"reversed\", value, false, \"ol\"); }\n\n/**\n * Defines the number of rows in a text area.\n  **/\nexport function Role(value: string) { return attr(\"role\", value, false); }\n\n/**\n * The rows attribute\n  **/\nexport function Rows(value: number) { return attr(\"rows\", value, false, \"textarea\"); }\n\n/**\n * Defines the number of rows a table cell should span over.\n  **/\nexport function RowSpan(value: number) { return attr(\"rowspan\", value, false, \"td\", \"th\"); }\n\n/**\n * Stops a document loaded in an iframe from using certain features (such as submitting forms or opening new windows).\n  **/\nexport function Sandbox(value: string) { return attr(\"sandbox\", value, false, \"iframe\"); }\n\n/**\n * Defines the cells that the header test (defined in the th element) relates to.\n  **/\nexport function Scope(value: string) { return attr(\"scope\", value, false, \"th\"); }\n\n/**\n * The scoped attribute for `style` tags.\n  **/\nexport function Scoped(value: boolean) { return attr(\"scoped\", value, false, \"style\"); }\n\n/**\n * The scrolling attribute for `iframe` tags.\n  **/\nexport function Scrolling(value: boolean) { return attr(\"scrolling\", value ? \"yes\" : \"no\", false, \"iframe\"); }\n\n/**\n * Defines an `option` tag which will be selected on page load.\n  **/\nexport function Selected(value: boolean) { return attr(\"selected\", value, false, \"option\"); }\n\n/**\n * The shape attribute for `a` and `area` tags.\n  **/\nexport function Shape(value: string) { return attr(\"shape\", value, false, \"a\", \"area\"); }\n\n/**\n * Defines the width of the element (in pixels). If the element's type attribute is text or password then it's the number of characters.\n  **/\nexport function Size(value: number) { return attr(\"size\", value, false, \"input\", \"select\"); }\n\n/**\n * Assigns a slot in a shadow DOM shadow tree to an element.\n  **/\nexport function Slot_attr(value: string) { return attr(\"slot\", value, false); }\n\n/**\n * The sizes attribute\n  **/\nexport function Sizes(value: string) { return attr(\"sizes\", value, false, \"link\", \"img\", \"source\"); }\n\n/**\n * The span attribute\n  **/\nexport function Span_attr(value: string) { return attr(\"span\", value, false, \"col\", \"colgroup\"); }\n\n/**\n * Indicates whether spell checking is allowed for the element.\n  **/\nexport function SpellCheck(value: boolean) { return attr(\"spellcheck\", value, false); }\n\nfunction unpackURL(value: string | URL) {\n    if (value instanceof URL) {\n        value = value.href;\n    }\n\n    return value;\n}\n\n/**\n * The URL of the embeddable content.\n  **/\nexport function Src(value: string | URL) {\n    return attr(\"src\", unpackURL(value), false, \"audio\", \"embed\", \"iframe\", \"img\", \"input\", \"script\", \"source\", \"track\", \"video\");\n}\n\n/**\n * The srcdoc attribute\n  **/\nexport function SrcDoc(value: string) { return attr(\"srcdoc\", value, false, \"iframe\"); }\n\n/**\n * The srclang attribute\n  **/\nexport function SrcLang(value: string) { return attr(\"srclang\", value, false, \"track\"); }\n\n/**\n * A MediaStream object to use as a source for an HTML video or audio element\n  **/\nexport function SrcObject(value: MediaProvider) { return attr(\"srcObject\", value, false, \"audio\", \"video\"); }\n\n/**\n * One or more responsive image candidates.\n  **/\nexport function SrcSet(value: string) { return attr(\"srcset\", value, false, \"img\", \"source\"); }\n\n/**\n * Defines the first number if other than 1.\n  **/\nexport function Start(value: number) { return attr(\"start\", value, false, \"ol\"); }\n\n/**\n * The step attribute\n  **/\nexport function Step(value: number) { return attr(\"step\", value, false, \"input\"); }\n\n/**\n * The summary attribute\n  **/\nexport function Summary_attr(value: string) { return attr(\"summary\", value, false, \"table\"); }\n\n/**\n * Overrides the browser's default tab order and follows the one specified instead.\n  **/\nexport function TabIndex(value: number) { return attr(\"tabindex\", value, false); }\n\n/**\n * Text to be displayed in a tooltip when hovering over the element.\n  **/\nexport function Title_attr(value: string) { return attr(\"title\", value, false); }\n\n/**\n * The target attribute\n  **/\nexport function Target(value: string) { return attr(\"target\", value, false, \"a\", \"area\", \"base\", \"form\"); }\n\n/**\n * Specify whether an element\u2019s attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.\n  **/\nexport function Translate(value: boolean) { return attr(\"translate\", value, false); }\n\n/**\n * Defines the type of the element.\n  **/\nexport function Type(value: string | MediaType) {\n    if (!isString(value)) {\n        value = value.value;\n    }\n    return attr(\"type\", value, false, \"button\", \"input\", \"command\", \"embed\", \"link\", \"object\", \"script\", \"source\", \"style\", \"menu\");\n}\n\n/**\n * Defines a default value which will be displayed in the element on page load.\n  **/\nexport function Value(value: string | number) { return attr(\"value\", value, false, \"button\", \"data\", \"input\", \"li\", \"meter\", \"option\", \"progress\", \"param\"); }\n\n/**\n * Defines a default value which will be displayed in the element on page load.\n  **/\nexport function ValueAsNumber(value: number) { return attr(\"valueAsNumber\", value, false, \"input\"); }\n\n/**\n * Defines a default value which will be displayed in the element on page load.\n  **/\nexport function ValueAsDate(value: Date) { return attr(\"valueAsDate\", value, false, \"input\"); }\n\n/**\n * setting the volume at which a media element plays.\n  **/\nexport function Volume(value: number) { return attr(\"volume\", value, false, \"audio\", \"video\"); }\n\n/**\n * The usemap attribute\n  **/\nexport function UseMap(value: boolean) { return attr(\"usemap\", value, false, \"img\", \"input\", \"object\"); }\n\n/**\n * For the elements listed here, this establishes the element's width.\n  **/\nexport function Width(value: number | string) { return attr(\"width\", value, false, \"canvas\", \"embed\", \"iframe\", \"img\", \"input\", \"object\", \"video\"); }\n\n/**\n * Indicates whether the text should be wrapped.\n  **/\nexport type HTMLTextAreaWrapValue =\n    | \"hard\"\n    | \"soft\"\n    | \"off\";\nexport function Wrap(value: HTMLTextAreaWrapValue) { return attr(\"wrap\", value, false, \"textarea\"); }", "import { isDefined, isFunction, isNullOrUndefined, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\n\ninterface IComparable<T> {\n    compareTo(b: T): number;\n}\n\nfunction isIComparable<T>(obj: any): obj is IComparable<T> {\n    return isObject(obj)\n        && \"compareTo\" in obj\n        && isFunction(obj.compareTo);\n}\n\nexport type Comparable = number | Date | string | IComparable<any>;\nexport type CompareDirection = \"ascending\" | \"descending\";\nexport type CompareFunction<T> = ((a: T, b: T) => number) & {\n    direction: CompareDirection;\n}\n\nexport type ComparableSelector<T> = (obj: T) => Comparable;\n\nexport function compareBy<T>(direction: CompareDirection, ...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\nexport function compareBy<T>(...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\nexport function compareBy<T>(directionOrFirstKeyGetter: CompareDirection | ComparableSelector<T>, ...getKeys: ((obj: T) => Comparable)[]): CompareFunction<T> {\n    let direction: CompareDirection = null;\n    if (isString(directionOrFirstKeyGetter)) {\n        direction = directionOrFirstKeyGetter;\n    }\n    else {\n        direction = \"ascending\";\n        getKeys.unshift(directionOrFirstKeyGetter);\n    }\n\n    const d = direction === \"ascending\" ? 1 : -1;\n\n    const comparer = (a: T, b: T) => {\n        if (a === b) {\n            return 0;\n        }\n\n        for (const getKey of getKeys) {\n            const keyA = isNullOrUndefined(a) ? null : getKey(a);\n            const keyB = isNullOrUndefined(b) ? null : getKey(b);\n            const relation = keyA === keyB\n                ? 0\n                : isString(keyA) && isString(keyB)\n                    ? d * keyA.localeCompare(keyB)\n                    : isIComparable(keyA) && isIComparable(keyB)\n                        ? d * keyA.compareTo(keyB)\n                        : direction === \"ascending\" && keyA > keyB\n                            || direction === \"descending\" && keyA < keyB\n                            ? 1 : -1;\n\n            if (relation !== 0) {\n                return relation;\n            }\n        }\n\n        return 0;\n    };\n\n    return Object.assign(comparer, {\n        direction\n    });\n}\n\nexport type SearchMode = \"append\" | \"prepend\" | \"search\";\n\nexport function binarySearch<T>(arr: ArrayLike<T>, searchValue: T, comparer: CompareFunction<T>, mode: SearchMode = \"search\") {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left <= right) {\n        let mid = (left + right) >> 1;\n        let relation = comparer(arr[mid], searchValue);\n        if (relation === 0) {\n            if (mode !== \"search\") {\n                const scanDirection = mode === \"append\" ? 1 : -1;\n                if (scanDirection > 0) {\n                    mid += scanDirection;\n                }\n                while (0 <= mid\n                    && mid < arr.length\n                    && (relation = comparer(arr[mid], searchValue)) === 0) {\n                    mid += scanDirection;\n                }\n                if (scanDirection < 0) {\n                    mid -= scanDirection;\n                }\n            }\n\n            return mid;\n        }\n        else if (relation < 0) {\n            left = mid - relation;\n        }\n        else {\n            right = mid - relation;\n        }\n    }\n\n    return -left - 1;\n}\n\nexport type InsertMode = \"set\" | SearchMode;\n\nexport function insertSorted<T>(arr: T[], val: T, idx: number): number;\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number;\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>, mode: InsertMode): number;\nexport function insertSorted<T>(arr: T[], val: T, comparerOrIdx: CompareFunction<T> | number, mode: InsertMode = \"search\"): number {\n    const allowDuplicates = mode !== \"set\";\n    if (mode === \"set\") {\n        mode = \"search\";\n    }\n\n    let idx: number = null;\n    if (isNumber(comparerOrIdx)) {\n        idx = comparerOrIdx;\n    }\n    else {\n        idx = binarySearch(arr, val, comparerOrIdx, mode);\n    }\n\n    if (idx < 0) {\n        idx = -idx - 1;\n    }\n    else if (!allowDuplicates) {\n        return -1;\n    }\n\n    arrayInsertAt(arr, val, idx);\n    return idx;\n}\n\nexport function removeSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number {\n    const idx = binarySearch(arr, val, comparer);\n    if (idx >= 0) {\n        arrayRemoveAt(arr, idx);\n        return idx;\n    }\n    return -1;\n}\n\n\n/**\n * Empties out an array, returning the items that were in the array.\n * \n * @param arr the array to empty\n */\nexport function arrayClear<T>(arr: T[]) {\n    return arr.splice(0);\n}\n\n/**\n * Checks to see if two arrays contain the same elements\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\n * @param arr1\n * @param arr2\n */\n\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\n    for (let i = 0; i < arr1.length; ++i) {\n        if (arr1[i] !== arr2[i]) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n\nexport function arrayGen<T>(count: number, thunk: (i: number) => T): T[] {\n    return Array.from(iterableGen(count, thunk));\n}\n\nexport function* iterableGen<T>(count: number, thunk: (i: number) => T) {\n    for (let i = 0; i < count; ++i) {\n        yield thunk(i);\n    }\n}\n\n\n/**\n * Inserts an item at the given index into an array.\n * @param arr\n * @param item\n * @param idx\n */\n\nexport function arrayInsertAt<T>(arr: T[], item: T, idx: number) {\n    arr.splice(idx, 0, item);\n}\n\n/**\n * Returns a random item from an array of items.\n *\n * Provides an option to consider an additional item as part of the collection\n * for random selection.\n */\nexport function arrayRandom<T>(arr: T[], defaultValue?: T): T | undefined {\n    const offset = defaultValue != null ? 1 : 0,\n        idx = Math.floor(Math.random() * (arr.length + offset)) - offset;\n    if (idx < 0) {\n        return defaultValue;\n    }\n    else {\n        return arr[idx];\n    }\n}\n\n\n/**\n * Removes a given item from an array, returning true if the item was removed.\n */\nexport function arrayRemove<T>(arr: T[], value: T) {\n    const idx = arr.indexOf(value);\n    if (idx > -1) {\n        arrayRemoveAt(arr, idx);\n        return true;\n    }\n\n    return false;\n}\n\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\n    for (let i = arr.length - 1; i >= 0; --i) {\n        if (predicate(arr[i])) {\n            return arrayRemoveAt(arr, i);\n        }\n    }\n\n    return null;\n}\n\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\n    return arrayFilter(arr, (v) => getKey(v) === key);\n}\n\n/**\n * Removes an item at the given index from an array.\n */\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\n    return arr.splice(idx, 1)[0];\n}\n\n/**\n * Replaces all of the items in an array with the given items.\n *\n * This helps reduce GC pressure as you're not creating arrays\n * and then dropping them on the floor.\n * \n * @param arr the array to fill\n * @param items the items to put into the array\n */\nexport function arrayReplace<T>(arr: T[], ...items: T[]) {\n    arr.splice(0, arr.length, ...items);\n}\n\nexport function arrayCreate<T>(count: number, make: (i: number, len?: number) => T): T[] {\n    const arr = new Array<T>(count);\n    for (let i = 0; i < count; ++i) {\n        arr[i] = make(i, count);\n    }\n    return arr;\n}\n\n\nfunction _arrayScan<T>(forward: boolean, arr: readonly T[], tests: ((val: T) => boolean)[]): T {\n    const start = forward ? 0 : arr.length - 1;\n    const end = forward ? arr.length : -1;\n    const inc = forward ? 1 : -1;\n    for (const test of tests) {\n        for (let i = start; i != end; i += inc) {\n            const item = arr[i];\n            if (test(item)) {\n                return item;\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n * Scans through a series of filters to find an item that matches\n * any of the filters. The first item of the first filter that matches\n * will be returned.\n */\nexport function arrayScan<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\n    return _arrayScan(true, arr, tests);\n}\n\n/**\n * Scans through a series of filters to find an item that matches\n * any of the filters. The last item of the first filter that matches\n * will be returned.\n */\nexport function arrayScanReverse<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T;\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\n    return _arrayScan(false, arr, tests);\n}\n\nexport function arrayShuffleInplace<T>(arr: T[]): void {\n    for (let i = 0; i < arr.length - 1; ++i) {\n        const subLength = arr.length - i;\n        const subIndex = Math.floor(Math.random() * subLength);\n        const temp = arr[i];\n        const j = subIndex + i;\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nexport function arrayShuffle<T>(arr: readonly T[]): T[] {\n    const output = arr.slice();\n    arrayShuffleInplace(output);\n    return output;\n}\n\nconst numericPattern = /^(-?(?:\\d+\\.)\\d+)/;\n/**\n * Creates a new array that is sorted by the key extracted\n * by the keySelector callback, not modifying the input array,\n * (unlike JavaScript's own Array.prototype.sort).\n *\n * If the values have a number at the beginning, they'll be sorted\n * by that number.\n * @param arr\n * @param keySelector\n */\nexport function arraySortNumericByKey<T>(arr: ReadonlyArray<T>, keySelector: (obj: T) => string): T[] {\n    const comparer = compareBy<T>(v => {\n        const key = keySelector(v);\n        const match = key.match(numericPattern);\n        if (isDefined(match)) {\n            return parseFloat(match[1]);\n        }\n        return key;\n    });\n\n    return Array\n        .from(arr)\n        .sort(comparer);\n}\n\nexport function arrayZip<T, V>(arr1: readonly T[], arr2: readonly T[], combine: (a: T, b: T) => V): V[] {\n    const len = Math.max(arr1.length, arr2.length);\n    const output = new Array<V>(len);\n    for (let i = 0; i < len; ++i) {\n        output[i] = combine(arr1[i], arr2[i]);\n    }\n\n    return output;\n}\n", "import { arrayClear } from \"@juniper-lib/collections/dist/arrays\";\nimport { isDefined } from \"@juniper-lib/tslib/dist/typeChecks\";\nimport { TypedEventTarget, TypedEventMap } from \"./TypedEventTarget\";\n\nexport type TaskExecutionState =\n    | \"waiting\"\n    | \"running\"\n    | \"finished\"\n\nexport type TaskResultState =\n    | \"none\"\n    | \"resolved\"\n    | \"errored\";\n\n/**\n * A Task represents a Promise that exposes its resolve/reject functions\n * as methods, rather than requiring a callback being passed to its constructor.\n * Tasks can be used to build manually-resolved Promises with less\n * boilerplate of nested function blocks.\n **/\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\n    private readonly onThens = new Array<(v: ResultsT) => any>();\n    private readonly onCatches = new Array<(reason?: any) => void>();\n\n    private _result: ResultsT = undefined;\n    private _error: any = undefined;\n    private _executionState: TaskExecutionState = \"waiting\";\n    private _resultState: TaskResultState = \"none\";\n\n    /**\n     * Signal success for the Task\n     *\n     * @param value - the value to store with the resolved Task.\n     **/\n    public readonly resolve: (value: ResultsT) => void;\n\n    /**\n     * Signal failrue for the Task\n     *\n     * @param value - the error to store with the rejected Task.\n     **/\n    public readonly reject: (reason: any) => void;\n\n\n    /**\n     * Create a new Task\n     *\n     * @param autoStart - set to false to require manually starting the Task. Useful\n     * for reusable tasks that run on timers.\n     */\n    constructor(private readonly autoStart = true) {\n        // It's very likely that we will want to use resolve/reject\n        // as values to pass to another function/method, so we create\n        // them not as methods, but as bound lambda expressions stored\n        // in public fields.\n        this.resolve = (value) => {\n            if (this.running) {\n                this._result = value;\n                this._resultState = \"resolved\";\n\n                for (const thenner of this.onThens) {\n                    thenner(value);\n                }\n\n                this.clear();\n                this._executionState = \"finished\";\n            }\n        };\n\n        this.reject = (reason) => {\n            if (this.running) {\n                this._error = reason;\n                this._resultState = \"errored\";\n\n                for (const catcher of this.onCatches) {\n                    catcher(reason);\n                }\n\n                this.clear();\n                this._executionState = \"finished\";\n            }\n        };\n\n        if (this.autoStart) {\n            this.start();\n        }\n    }\n\n    private clear() {\n        arrayClear(this.onThens);\n        arrayClear(this.onCatches);\n    }\n\n    /**\n     * If the task was not auto-started, signal that the task is now ready to recieve\n     * resolutions or rejections.\n     **/\n    start() {\n        this._executionState = \"running\";\n    }\n\n    /**\n     * Creates a resolving callback for a static value.\n     * @param value\n     */\n    resolver(value: ResultsT) {\n        return () => this.resolve(value);\n    }\n\n    resolveOn<EventMapT extends TypedEventMap<string>, EventT extends keyof EventMapT = keyof EventMapT>(\n        target: TypedEventTarget<EventMapT> | EventTarget,\n        resolveEvt: EventT,\n        value: ResultsT) {\n        const resolver = this.resolver(value);\n        target.addEventListener(resolveEvt as any, resolver);\n        this.finally(() =>\n            target.removeEventListener(resolveEvt as any, resolver));\n    }\n\n    /**\n     * Get the last result that the task had resolved to, if any is available.\n     *\n     * If the Task had been rejected, attempting to get the result will rethrow\n     * the error that had rejected the task.\n     **/\n    get result(): ResultsT {\n        if (isDefined(this.error)) {\n            throw this.error;\n        }\n\n        return this._result;\n    }\n\n    /**\n     * Get the last error that the task had been rejected by, if any.\n     **/\n    get error(): any {\n        return this._error;\n    }\n\n    /**\n     * Get the current state of the task.\n     **/\n    get executionState() {\n        return this._executionState;\n    }\n\n    /**\n     * Returns true when the Task is hasn't started yet.\n     **/\n    get waiting(): boolean {\n        return this.executionState === \"waiting\";\n    }\n\n    /**\n     * Returns true when the Task is waiting to be resolved or rejected.\n     **/\n    get started(): boolean {\n        return this.executionState !== \"waiting\";\n    }\n\n    /**\n     * Returns true after the Task has started, but before it has finished.\n     **/\n    get running(): boolean {\n        return this.executionState === \"running\";\n    }\n\n    /**\n     * Returns true when the Task has been resolved or rejected.\n     **/\n    get finished(): boolean {\n        return this.executionState === \"finished\";\n    }\n\n    get resultState() {\n        return this._resultState;\n    }\n\n    /**\n     * Returns true if the Task had been resolved successfully.\n     **/\n    get resolved(): boolean {\n        return this.resultState === \"resolved\";\n    }\n\n    /**\n     * Returns true if the Task had been rejected, regardless of any\n     * reason being given.\n     **/\n    get errored(): boolean {\n        return this.resultState === \"errored\";\n    }\n\n    get [Symbol.toStringTag](): string {\n        return this.toString();\n    }\n\n    /**\n     * Calling Task.then(), Task.catch(), or Task.finally() creates a new Promise.\n     * This method creates that promise and links it with the task.\n     **/\n    private project(): Promise<ResultsT> {\n        return new Promise<ResultsT>((resolve, reject) => {\n            if (!this.finished) {\n                this.onThens.push(resolve);\n                this.onCatches.push(reject);\n            }\n            else if (this.errored) {\n                reject(this.error);\n            }\n            else {\n                resolve(this.result);\n            }\n        });\n    }\n\n    /**\n     * Attach a handler to the task that fires when the task is resolved.\n     * \n     * @param onfulfilled\n     * @param onrejected\n     */\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\n        return this.project().then(onfulfilled, onrejected);\n    }\n\n    /**\n     * Attach a handler that fires when the Task is rejected.\n     * \n     * @param onrejected\n     */\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\n        return this.project().catch(onrejected);\n    }\n\n    /**\n     * Attach a handler that fires regardless of whether the Task is resolved\n     * or rejected.\n     * \n     * @param onfinally\n     */\n    finally(onfinally?: () => void): Promise<ResultsT> {\n        return this.project().finally(onfinally);\n    }\n\n    /**\n     * Resets the Task to an unsignalled state, which is useful for\n     * reducing GC pressure when working with lots of tasks.\n     **/\n    reset() {\n        this._reset(this.autoStart);\n    }\n\n    restart() {\n        this._reset(true);\n    }\n\n    private _reset(start: boolean) {\n        if (this.running) {\n            this.reject(\"Resetting previous invocation\");\n        }\n\n        this.clear();\n        this._result = undefined;\n        this._error = undefined;\n        this._executionState = \"waiting\";\n        this._resultState = \"none\";\n\n        if (start) {\n            this.start();\n        }\n    }\n}", "import { arrayRemove } from \"@juniper-lib/collections/dist/arrays\";\nimport { once } from \"@juniper-lib/events/dist/once\";\nimport { Text_Css } from \"@juniper-lib/mediatypes\";\nimport { IProgress } from \"@juniper-lib/progress/dist/IProgress\";\nimport { isBoolean, isDate, isDefined, isFunction, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\nimport { ClassList, Href, HtmlFor, Rel, Type, isAttr } from \"./attrs\";\nimport { PropSet, margin } from \"./css\";\n\nexport interface ErsatzElement<T extends Element = Element> {\n    element: T;\n}\n\nexport function isErsatzElement<T extends Element = Element>(obj: any): obj is ErsatzElement<T> {\n    if (!isObject(obj)) {\n        return false;\n    }\n\n    const elem = obj as ErsatzElement;\n    return elem.element instanceof Element;\n}\n\nexport type Elements<T extends Element = Element> = T | ErsatzElement<T>;\n\nexport function resolveElement<T extends Element = HTMLElement>(elem: Elements<T> | string): T {\n    if (isErsatzElement(elem)) {\n        return elem.element;\n    }\n    else if (isString(elem)) {\n        return getElement(elem);\n    }\n\n    return elem;\n}\n\nexport interface IElementAppliable<T extends Element = Element> {\n    applyToElement(x: Elements<T>): void;\n}\n\nexport function isIElementAppliable<T extends Element = Element>(obj: any): obj is IElementAppliable<T> {\n    return isObject(obj)\n        && \"applyToElement\" in obj\n        && isFunction((obj as any).applyToElement);\n}\n\nexport type ElementChild<T extends Element = Element> = Elements<T>\n    | IElementAppliable\n    | string\n    | number\n    | boolean\n    | Date;\n\nexport function isElementChild(obj: any): obj is ElementChild {\n    return obj instanceof Element\n        || isErsatzElement(obj)\n        || isIElementAppliable(obj)\n        || isString(obj)\n        || isNumber(obj)\n        || isBoolean(obj)\n        || isDate(obj);\n}\n\nexport function isElements(child: ElementChild): child is Elements {\n    return isErsatzElement(child)\n        || child instanceof Element;\n}\n\nexport interface IFocusable {\n    focus(): void;\n}\n\nexport function isFocusable(elem: any): elem is IFocusable {\n    return \"focus\" in elem && isFunction((elem as IFocusable).focus);\n}\n\nexport function elementSetDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visible: boolean, visibleDisplayType: CssGlobalValue | CssDisplayValue = \"\"): void {\n    elem = resolveElement(elem);\n    if (visible) {\n        elem.style.removeProperty(\"display\");\n        const style = getComputedStyle(elem);\n        if (style.display === \"none\") {\n            elem.style.display = visibleDisplayType || \"block\";\n        }\n    }\n    else {\n        elem.style.display = \"none\";\n    }\n}\n\nexport function elementIsDisplayed<T extends HTMLElement = HTMLElement>(elem: Elements<T>): boolean {\n    elem = resolveElement(elem);\n    return elem.style.display !== \"none\";\n}\n\nexport function elementToggleDisplay<T extends HTMLElement = HTMLElement>(elem: Elements<T>, visibleDisplayType: CssGlobalValue | CssDisplayValue = \"block\"): void {\n    elementSetDisplay(elem, !elementIsDisplayed(elem), visibleDisplayType);\n}\n\nexport function elementInsertBefore(parent: Elements, newElem: Elements, refElem: Elements): void {\n    parent = resolveElement(parent);\n    newElem = resolveElement(newElem);\n    refElem = resolveElement(refElem);\n    if (parent && newElem) {\n        parent.insertBefore(newElem, refElem);\n    }\n}\n\nexport function elementGetIndexInParent(elem: Elements): number {\n    elem = resolveElement(elem);\n\n    if (elem.parentElement) {\n        for (let i = 0; i < elem.parentElement.childElementCount; ++i) {\n            if (elem.parentElement.children[i] === elem) {\n                return i;\n            }\n        }\n    }\n\n    return null;\n}\n\nexport function Clear() {\n    return {\n        applyToElement(elem: HTMLElement) { elem.innerHTML = \"\"; }\n    }\n}\n\n\nexport function elementGetCustomData(elem: Elements<HTMLElement>, name: Lowercase<string>): string {\n    elem = resolveElement(elem);\n    return elem.dataset[name.toLowerCase()];\n}\n\ntype ReturnElementType<T> = T extends Element\n    ? T\n    : T extends ShadowRoot\n    ? T\n    : T extends Elements<infer ElementT>\n    ? ElementT\n    : never;\n\nexport function HtmlRender<T extends Elements | ShadowRoot>(element: T | string, ...children: ElementChild[]): ReturnElementType<T> {\n    const elem = element instanceof Element\n        ? element\n        : element instanceof ShadowRoot\n            ? element\n            : isString(element)\n                ? document.querySelector(element)\n                : element.element;\n\n    const target = elem instanceof HTMLTemplateElement\n        ? elem.content\n        : elem;\n\n    for (const child of children) {\n        if (isDefined(child)) {\n            if (child instanceof Node) {\n                target.appendChild(child);\n            }\n            else if (isErsatzElement(child)) {\n                target.appendChild(resolveElement(child));\n            }\n            else if (isIElementAppliable(child)) {\n                if (!(elem instanceof ShadowRoot)) {\n                    child.applyToElement(elem);\n                }\n            }\n            else {\n                target.appendChild(document.createTextNode(child.toLocaleString()));\n            }\n        }\n    }\n\n    return elem as ReturnElementType<T>;\n}\n\nexport function elementRemoveFromParent(elem: Elements | string): void {\n    elem = resolveElement(elem);\n    if (isDefined(elem)) {\n        elem.remove();\n    }\n}\n\nexport function elementReplace(elem: Elements, ...elems: Elements[]): Elements {\n    elem = resolveElement(elem);\n    elem.replaceWith(...elems.map(resolveElement));\n    return elem;\n}\n\nexport function elementSwap<T extends Elements>(elem: Elements, withPlaceholder: (placeholder: Elements) => T): T {\n    const placeholder = Div();\n    const e = withPlaceholder(placeholder);\n    elementReplace(placeholder, elementReplace(elem, e));\n    return e;\n}\n\nexport function getElement<T extends Element = HTMLElement>(selector: string): T {\n    return document.querySelector<T>(selector);\n}\n\nexport function getElements<T extends Element = HTMLElement>(selector: string): T[] {\n    return Array.from(document.querySelectorAll<T>(selector));\n}\n\nexport function getButton(selector: string) {\n    return getElement<HTMLButtonElement>(selector);\n}\n\nexport function getButtons(selector: string) {\n    return getElements<HTMLButtonElement>(selector);\n}\n\nexport function getInput(selector: string) {\n    return getElement<HTMLInputElement>(selector);\n}\n\nexport function getDataList(selector: string) {\n    return getElement<HTMLDataListElement>(selector);\n}\n\nexport function getInputs(selector: string) {\n    return getElements<HTMLInputElement>(selector);\n}\n\nexport function getSelect(selector: string) {\n    return getElement<HTMLSelectElement>(selector);\n}\n\nexport function getCanvas(selector: string) {\n    return getElement<HTMLCanvasElement>(selector);\n}\n\n/**\n * Creates an HTML element for a given tag name.\n * \n * Boolean attributes that you want to default to true can be passed\n * as just the attribute creating function, \n *   e.g. `Audio(autoPlay)` vs `Audio(autoPlay(true))`\n * @param name - the name of the tag\n * @param rest - optional attributes, child elements, and text\n * @returns\n */\nexport function HtmlTag<MapT extends Record<keyof MapT, HTMLElement> = HTMLElementTagNameMap, K extends keyof MapT & string = keyof MapT & string>(name: K, ...rest: ElementChild[]): MapT[K] {\n    let elem: MapT[K] & HTMLElement = null;\n\n    const finders = rest.filter(isAttr).filter(v => v.key === \"id\" || v.key === \"query\");\n    for (const finder of finders) {\n        if (finder.key === \"query\") {\n            elem = finder.value as any;\n            arrayRemove(rest, finder);\n        }\n        else if (finder.key === \"id\") {\n            elem = document.getElementById(finder.value as any) as any;\n            if (elem) {\n                arrayRemove(rest, finder);\n            }\n        }\n    }\n\n    if (elem && elem.tagName !== name.toUpperCase()) {\n        console.warn(`Expected a \"${name.toUpperCase()}\" element but found a \"${elem.tagName}\".`);\n    }\n\n    if (!elem) {\n        elem = document.createElement(name) as MapT[K];\n    }\n\n    HtmlRender(elem, ...rest);\n\n    return elem;\n}\n\nexport interface IDisableable {\n    disabled: boolean;\n}\n\nexport function isDisableable(obj: any): obj is IDisableable {\n    return isObject(obj)\n        && \"disabled\" in obj\n        && isBoolean(obj.disabled);\n}\n\n/**\n * Empty an element of all children. This is faster than setting `innerHTML = \"\"`.\n */\nexport function elementClearChildren(elem: Elements) {\n    elem = resolveElement(elem);\n    while (elem.lastChild) {\n        elem.lastChild.remove();\n    }\n}\n\nexport function elementSetText(elem: Elements<HTMLElement>, text: string): void {\n    elem = resolveElement(elem);\n    elementClearChildren(elem);\n    elem.append(TextNode(text));\n}\n\nexport function elementGetText(elem: Elements<HTMLElement>): string {\n    elem = resolveElement(elem);\n    return elem.innerText;\n}\n\nexport function elementSetTitle(elem: Elements<HTMLElement>, text: string): void {\n    elem = resolveElement(elem);\n    elem.title = text;\n}\n\nexport function elementSetClass(elem: Elements, enabled: boolean, className: string) {\n    elem = resolveElement(elem);\n    const canEnable = isDefined(className);\n    const hasEnabled = canEnable && elem.classList.contains(className);\n\n    if (canEnable && hasEnabled !== enabled) {\n        elem.classList.toggle(className);\n    }\n}\n\nexport type ButtonStyleType =\n    | \"primary\"\n    | \"secondary\"\n    | \"success\"\n    | \"info\"\n    | \"warning\"\n    | \"danger\"\n    | \"light\"\n    | \"dark\";\n\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean, label: string): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, enabled: boolean, label: string, title: string): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean, label: string): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, style: ButtonStyleType, enabled: boolean, label: string, title: string): void;\nexport function buttonSetEnabled(button: Elements<HTMLButtonElement>, styleOrEnabled: boolean | ButtonStyleType, enabledOrlabel?: string | boolean, labelOrTitle?: string, title?: string): void {\n    button = resolveElement(button);\n    let style: ButtonStyleType = null;\n    let enabled: boolean = null;\n    let label: string = null;\n    if (isBoolean(styleOrEnabled)) {\n        enabled = styleOrEnabled;\n        label = enabledOrlabel as string;\n        title = labelOrTitle;\n    }\n    else {\n        style = styleOrEnabled;\n        enabled = enabledOrlabel as boolean;\n        label = labelOrTitle;\n    }\n\n    button.disabled = !enabled;\n\n    if (label) {\n        elementSetText(button, label);\n    }\n\n    if (title) {\n        elementSetTitle(button, title);\n    }\n\n    if (style) {\n        button.classList.toggle(\"btn-\" + style, enabled);\n        button.classList.toggle(\"btn-outline-\" + style, !enabled);\n    }\n}\n\n\nasync function mediaElementCan(type: \"canplay\" | \"canplaythrough\", elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\n    if (isDefined(prog)) {\n        prog.start();\n    }\n\n    const expectedState = type === \"canplay\"\n        ? elem.HAVE_CURRENT_DATA\n        : elem.HAVE_ENOUGH_DATA;\n\n    if (elem.readyState >= expectedState) {\n        return true;\n    }\n\n    try {\n        await once(elem, type, \"error\");\n        return true;\n    }\n    catch (err) {\n        console.warn(elem.error, err);\n        return false;\n    }\n    finally {\n        if (isDefined(prog)) {\n            prog.end();\n        }\n    }\n}\n\nexport function mediaElementCanPlay(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\n    return mediaElementCan(\"canplay\", elem, prog);\n}\n\nexport function mediaElementCanPlayThrough(elem: HTMLMediaElement, prog?: IProgress): Promise<boolean> {\n    return mediaElementCan(\"canplaythrough\", elem, prog);\n}\n\nexport function A(...rest: ElementChild[]): HTMLAnchorElement { return HtmlTag(\"a\", ...rest); }\nexport function Abbr(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"abbr\", ...rest); }\nexport function Address(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"address\", ...rest); }\nexport function Area(...rest: ElementChild[]): HTMLAreaElement { return HtmlTag(\"area\", ...rest); }\nexport function Article(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"article\", ...rest); }\nexport function Aside(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"aside\", ...rest); }\nexport function Audio(...rest: ElementChild[]): HTMLAudioElement { return HtmlTag(\"audio\", ...rest); }\nexport function B(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"b\", ...rest); }\nexport function Base(...rest: ElementChild[]): HTMLBaseElement { return HtmlTag(\"base\", ...rest); }\nexport function BDI(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"bdi\", ...rest); }\nexport function BDO(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"bdo\", ...rest); }\nexport function BlockQuote(...rest: ElementChild[]): HTMLQuoteElement { return HtmlTag(\"blockquote\", ...rest); }\nexport function Body(...rest: ElementChild[]): HTMLBodyElement { return HtmlTag(\"body\", ...rest); }\nexport function BR(): HTMLBRElement { return HtmlTag(\"br\"); }\nexport function ButtonRaw(...rest: ElementChild[]): HTMLButtonElement { return HtmlTag(\"button\", ...rest); }\nexport function Button(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"button\")); }\nexport function ButtonSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\")); }\nexport function ButtonPrimary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-primary\")); }\nexport function ButtonPrimaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-primary\")); }\nexport function ButtonPrimarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-primary\")); }\nexport function ButtonPrimaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-primary\")); }\nexport function ButtonSecondary(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-secondary\")); }\nexport function ButtonSecondaryOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-secondary\")); }\nexport function ButtonSecondarySmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-secondary\")); }\nexport function ButtonSecondaryOutlineSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-secondary\")); }\nexport function ButtonDanger(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-danger\")); }\nexport function ButtonDangerOutline(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-outline-danger\")); }\nexport function ButtonDangerSmall(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-danger\")); }\nexport function ButtonDangerOutlineSmalle(...rest: ElementChild[]): HTMLButtonElement { return Button(...rest, ClassList(\"btn\", \"btn-sm\", \"btn-outline-danger\")); }\nexport function ButtonSubmit(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"submit\")); }\nexport function ButtonReset(...rest: ElementChild[]): HTMLButtonElement { return ButtonRaw(...rest, Type(\"reset\")); }\nexport function Canvas(...rest: ElementChild[]): HTMLCanvasElement { return HtmlTag(\"canvas\", ...rest); }\nexport function Caption(...rest: ElementChild[]): HTMLTableCaptionElement { return HtmlTag(\"caption\", ...rest); }\nexport function Cite(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"cite\", ...rest); }\nexport function Code(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"code\", ...rest); }\nexport function Col(...rest: ElementChild[]): HTMLTableColElement { return HtmlTag(\"col\", ...rest); }\nexport function ColGroup(...rest: ElementChild[]): HTMLTableColElement { return HtmlTag(\"colgroup\", ...rest); }\nexport function DataTag(...rest: ElementChild[]): HTMLDataElement { return HtmlTag(\"data\", ...rest); }\nexport function DataList(...rest: ElementChild[]): HTMLDataListElement { return HtmlTag(\"datalist\", ...rest); }\nexport function DD(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dd\", ...rest); }\nexport function Del(...rest: ElementChild[]): HTMLModElement { return HtmlTag(\"del\", ...rest); }\nexport function Details(...rest: ElementChild[]): HTMLDetailsElement { return HtmlTag(\"details\", ...rest); }\nexport function DFN(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dfn\", ...rest); }\nexport function Dialog(...rest: ElementChild[]): HTMLDialogElement { return HtmlTag(\"dialog\", ...rest); }\nexport function Div(...rest: ElementChild[]): HTMLDivElement { return HtmlTag(\"div\", ...rest); }\nexport function DL(...rest: ElementChild[]): HTMLDListElement { return HtmlTag(\"dl\", ...rest); }\nexport function DT(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"dt\", ...rest); }\nexport function Em(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"em\", ...rest); }\nexport function Embed(...rest: ElementChild[]): HTMLEmbedElement { return HtmlTag(\"embed\", ...rest); }\nexport function FieldSet(...rest: ElementChild[]): HTMLFieldSetElement { return HtmlTag(\"fieldset\", ...rest); }\nexport function FigCaption(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"figcaption\", ...rest); }\nexport function Figure(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"figure\", ...rest); }\nexport function Footer(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"footer\", ...rest); }\nexport function Form(...rest: ElementChild[]): HTMLFormElement { return HtmlTag(\"form\", ...rest); }\nexport function H1(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h1\", ...rest); }\nexport function H2(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h2\", ...rest); }\nexport function H3(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h3\", ...rest); }\nexport function H4(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h4\", ...rest); }\nexport function H5(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h5\", ...rest); }\nexport function H6(...rest: ElementChild[]): HTMLHeadingElement { return HtmlTag(\"h6\", ...rest); }\nexport function HR(...rest: ElementChild[]): HTMLHRElement { return HtmlTag(\"hr\", ...rest); }\nexport function Head(...rest: ElementChild[]): HTMLHeadElement { return HtmlTag(\"head\", ...rest); }\nexport function Header(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"header\", ...rest); }\nexport function HGroup(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"hgroup\", ...rest); }\nexport function HTML(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"html\", ...rest); }\nexport function I(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"i\", ...rest); }\nexport function FAIcon(iconName: string, ...rest: ElementChild[]): HTMLElement { return I(ClassList(`fa fa-${iconName}`), ...rest); }\nexport function IFrame(...rest: ElementChild[]): HTMLIFrameElement { return HtmlTag(\"iframe\", ...rest); }\nexport function Img(...rest: ElementChild[]): HTMLImageElement { return HtmlTag(\"img\", ...rest); }\nexport function Input(...rest: ElementChild[]): HTMLInputElement { return HtmlTag(\"input\", ...rest); }\nexport function Ins(...rest: ElementChild[]): HTMLModElement { return HtmlTag(\"ins\", ...rest); }\nexport function KBD(...rest: ElementChild[]): HTMLElement { return HtmlTag(\"kbd\", ...rest); }\nexport function Label(...rest: ElementChild[]): HTMLLabelElement { return HtmlTag(\"label\", ...rest); }\nexport function PreLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [HTMLLabelElement, T] {\n    resolveElement(input).id = id;\n    return [\n        Label(HtmlFor(id), label),\n        input\n    ];\n}\nexport function PostLabeled<T extends Elements>(id: string, label: ElementChild, input: T): [T, HTMLLabelElement] {\n    resolveElement(input).id = id;\n    return [\n        input,\n        Label(HtmlFor(id), label)\n    ];\n}\nexport function Legend(...rest: ElementChild[]) { return HtmlTag(\"legend\", ...rest); }\nexport function LI(...rest: ElementChild[]) { return HtmlTag(\"li\", ...rest); }\nexport function Link(...rest: ElementChild[]) { return HtmlTag(\"link\", ...rest); }\nexport function Main(...rest: ElementChild[]) { return HtmlTag(\"main\", ...rest); }\nexport function Map_tag(...rest: ElementChild[]) { return HtmlTag(\"map\", ...rest); }\nexport function Mark(...rest: ElementChild[]) { return HtmlTag(\"mark\", ...rest); }\nexport function Menu(...rest: ElementChild[]) { return HtmlTag(\"menu\", ...rest); }\nexport function Meta(...rest: ElementChild[]) { return HtmlTag(\"meta\", ...rest); }\nexport function Meter(...rest: ElementChild[]) { return HtmlTag(\"meter\", ...rest); }\nexport function Nav(...rest: ElementChild[]) { return HtmlTag(\"nav\", ...rest); }\nexport function NoScript(...rest: ElementChild[]) { return HtmlTag(\"noscript\", ...rest); }\nexport function Object_tag(...rest: ElementChild[]) { return HtmlTag(\"object\", ...rest); }\nexport function OL(...rest: ElementChild[]) { return HtmlTag(\"ol\", ...rest); }\nexport function OptGroup(...rest: ElementChild[]) { return HtmlTag(\"optgroup\", ...rest); }\nexport function Option(...rest: ElementChild[]) { return HtmlTag(\"option\", ...rest); }\nexport function Output(...rest: ElementChild[]) { return HtmlTag(\"output\", ...rest); }\nexport function P(...rest: ElementChild[]) { return HtmlTag(\"p\", ...rest); }\nexport function Picture(...rest: ElementChild[]) { return HtmlTag(\"picture\", ...rest); }\nexport function Pre(...rest: ElementChild[]) { return HtmlTag(\"pre\", ...rest); }\nexport function Progress(...rest: ElementChild[]) { return HtmlTag(\"progress\", ...rest); }\nexport function Q(...rest: ElementChild[]) { return HtmlTag(\"q\", ...rest); }\nexport function RP(...rest: ElementChild[]) { return HtmlTag(\"rp\", ...rest); }\nexport function RT(...rest: ElementChild[]) { return HtmlTag(\"rt\", ...rest); }\nexport function Ruby(...rest: ElementChild[]) { return HtmlTag(\"ruby\", ...rest); }\nexport function S(...rest: ElementChild[]) { return HtmlTag(\"s\", ...rest); }\nexport function Samp(...rest: ElementChild[]) { return HtmlTag(\"samp\", ...rest); }\nexport function Script(...rest: ElementChild[]) { return HtmlTag(\"script\", ...rest); }\nexport function Section(...rest: ElementChild[]) { return HtmlTag(\"section\", ...rest); }\nexport function Select(...rest: ElementChild[]) { return HtmlTag(\"select\", ...rest); }\nexport function Slot(...rest: ElementChild[]) { return HtmlTag(\"slot\", ...rest); }\nexport function Small(...rest: ElementChild[]) { return HtmlTag(\"small\", ...rest); }\nexport function Source(...rest: ElementChild[]) { return HtmlTag(\"source\", ...rest); }\nexport function Span(...rest: ElementChild[]) { return HtmlTag(\"span\", ...rest); }\nexport function Strong(...rest: ElementChild[]) { return HtmlTag(\"strong\", ...rest); }\nexport function Sub(...rest: ElementChild[]) { return HtmlTag(\"sub\", ...rest); }\nexport function Summary(...rest: ElementChild[]) { return HtmlTag(\"summary\", ...rest); }\nexport function Sup(...rest: ElementChild[]) { return HtmlTag(\"sup\", ...rest); }\nexport function Table(...rest: ElementChild[]) { return HtmlTag(\"table\", ...rest); }\nexport function TBody(...rest: ElementChild[]) { return HtmlTag(\"tbody\", ...rest); }\nexport function TD(...rest: ElementChild[]) { return HtmlTag(\"td\", ...rest); }\nexport function Template(...rest: ElementChild[]) { return HtmlTag(\"template\", ...rest); }\nexport function TextArea(...rest: ElementChild[]) { return HtmlTag(\"textarea\", ...rest); }\nexport function TFoot(...rest: ElementChild[]) { return HtmlTag(\"tfoot\", ...rest); }\nexport function TH(...rest: ElementChild[]) { return HtmlTag(\"th\", ...rest); }\nexport function THead(...rest: ElementChild[]) { return HtmlTag(\"thead\", ...rest); }\nexport function Time(...rest: ElementChild[]) { return HtmlTag(\"time\", ...rest); }\nexport function Title(...rest: ElementChild[]) { return HtmlTag(\"title\", ...rest); }\nexport function TR(...rest: ElementChild[]) { return HtmlTag(\"tr\", ...rest); }\nexport function Track(...rest: ElementChild[]) { return HtmlTag(\"track\", ...rest); }\nexport function U(...rest: ElementChild[]) { return HtmlTag(\"u\", ...rest); }\nexport function UL(...rest: ElementChild[]) { return HtmlTag(\"ul\", ...rest); }\nexport function Var(...rest: ElementChild[]) { return HtmlTag(\"var\", ...rest); }\nexport function Video(...rest: ElementChild[]) { return HtmlTag(\"video\", ...rest); }\nexport function WBR() { return HtmlTag(\"wbr\"); }\n\n/**\n * creates an HTML Input tag that is a button.\n */\nexport function InputButton(...rest: ElementChild[]) { return Input(Type(\"button\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a checkbox.\n */\nexport function InputCheckbox(...rest: ElementChild[]) { return Input(Type(\"checkbox\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a color picker.\n */\nexport function InputColor(...rest: ElementChild[]) { return Input(Type(\"color\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a date picker.\n */\nexport function InputDate(...rest: ElementChild[]) { return Input(Type(\"date\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a local date-time picker.\n */\nexport function InputDateTime(...rest: ElementChild[]) { return Input(Type(\"datetime-local\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is an email entry field.\n */\nexport function InputEmail(...rest: ElementChild[]) { return Input(Type(\"email\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a file picker.\n */\nexport function InputFile(...rest: ElementChild[]) { return Input(Type(\"file\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a hidden field.\n */\nexport function InputHidden(...rest: ElementChild[]) { return Input(Type(\"hidden\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a graphical submit button.\n */\nexport function InputImage(...rest: ElementChild[]) { return Input(Type(\"image\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a month picker.\n */\nexport function InputMonth(...rest: ElementChild[]) { return Input(Type(\"month\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a month picker.\n */\nexport function InputNumber(...rest: ElementChild[]) { return Input(Type(\"number\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a password entry field.\n */\nexport function InputPassword(...rest: ElementChild[]) { return Input(Type(\"password\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a radio button.\n */\nexport function InputRadio(...rest: ElementChild[]) { return Input(Type(\"radio\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a range selector.\n */\nexport function InputRange(...rest: ElementChild[]) { return Input(Type(\"range\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a form reset button.\n */\nexport function InputReset(...rest: ElementChild[]) { return Input(Type(\"reset\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a search entry field.\n */\nexport function InputSearch(...rest: ElementChild[]) { return Input(Type(\"search\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a submit button.\n */\nexport function InputSubmit(...rest: ElementChild[]) { return Input(Type(\"submit\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a telephone number entry field.\n */\nexport function InputTelephone(...rest: ElementChild[]) { return Input(Type(\"tel\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a text entry field.\n */\nexport function InputText(...rest: ElementChild[]) { return Input(Type(\"text\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a time picker.\n */\nexport function InputTime(...rest: ElementChild[]) { return Input(Type(\"time\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a URL entry field.\n */\nexport function InputURL(...rest: ElementChild[]) { return Input(Type(\"url\"), ...rest); }\n\n/**\n * creates an HTML Input tag that is a week picker.\n */\nexport function InputWeek(...rest: ElementChild[]) { return Input(Type(\"week\"), ...rest); }\n\n/**\n * Creates a text node out of the give input.\n */\nexport function TextNode(txt: any) {\n    return document.createTextNode(txt);\n}\n\n/**\n * Creates a Div element with margin: auto.\n */\nexport function Run(...rest: ElementChild[]) {\n    return Div(\n        margin(\"auto\"),\n        ...rest);\n}\n\nexport function Style(...props: PropSet[]) {\n    const elem = document.createElement(\"style\");\n    document.head.append(elem);\n    for (const prop of props) {\n        prop.applyToSheet(elem.sheet);\n    }\n\n    return elem;\n}\n\nexport function StyleBlob(...props: (string | PropSet)[]) {\n    const blob = new Blob(props.map(p => p.toString()), {\n        type: Text_Css.value\n    });\n    return Link(\n        Rel(\"stylesheet\"),\n        Href(blob)\n    );\n}", "import { isDefined, isFunction, isNullOrUndefined, isNumber, isObject, isString } from \"@juniper-lib/tslib/dist/typeChecks\";\n\ninterface IComparable<T> {\n    compareTo(b: T): number;\n}\n\nfunction isIComparable<T>(obj: any): obj is IComparable<T> {\n    return isObject(obj)\n        && \"compareTo\" in obj\n        && isFunction(obj.compareTo);\n}\n\nexport type Comparable = number | Date | string | IComparable<any>;\nexport type CompareDirection = \"ascending\" | \"descending\";\nexport type CompareFunction<T> = ((a: T, b: T) => number) & {\n    direction: CompareDirection;\n}\n\nexport type ComparableSelector<T> = (obj: T) => Comparable;\n\nexport function compareBy<T>(direction: CompareDirection, ...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\nexport function compareBy<T>(...getKeys: ComparableSelector<T>[]): CompareFunction<T>;\nexport function compareBy<T>(directionOrFirstKeyGetter: CompareDirection | ComparableSelector<T>, ...getKeys: ((obj: T) => Comparable)[]): CompareFunction<T> {\n    let direction: CompareDirection = null;\n    if (isString(directionOrFirstKeyGetter)) {\n        direction = directionOrFirstKeyGetter;\n    }\n    else {\n        direction = \"ascending\";\n        getKeys.unshift(directionOrFirstKeyGetter);\n    }\n\n    const d = direction === \"ascending\" ? 1 : -1;\n\n    const comparer = (a: T, b: T) => {\n        if (a === b) {\n            return 0;\n        }\n\n        for (const getKey of getKeys) {\n            const keyA = isNullOrUndefined(a) ? null : getKey(a);\n            const keyB = isNullOrUndefined(b) ? null : getKey(b);\n            const relation = keyA === keyB\n                ? 0\n                : isString(keyA) && isString(keyB)\n                    ? d * keyA.localeCompare(keyB)\n                    : isIComparable(keyA) && isIComparable(keyB)\n                        ? d * keyA.compareTo(keyB)\n                        : direction === \"ascending\" && keyA > keyB\n                            || direction === \"descending\" && keyA < keyB\n                            ? 1 : -1;\n\n            if (relation !== 0) {\n                return relation;\n            }\n        }\n\n        return 0;\n    };\n\n    return Object.assign(comparer, {\n        direction\n    });\n}\n\nexport type SearchMode = \"append\" | \"prepend\" | \"search\";\n\nexport function binarySearch<T>(arr: ArrayLike<T>, searchValue: T, comparer: CompareFunction<T>, mode: SearchMode = \"search\") {\n    let left = 0;\n    let right = arr.length - 1;\n    while (left <= right) {\n        let mid = (left + right) >> 1;\n        let relation = comparer(arr[mid], searchValue);\n        if (relation === 0) {\n            if (mode !== \"search\") {\n                const scanDirection = mode === \"append\" ? 1 : -1;\n                if (scanDirection > 0) {\n                    mid += scanDirection;\n                }\n                while (0 <= mid\n                    && mid < arr.length\n                    && (relation = comparer(arr[mid], searchValue)) === 0) {\n                    mid += scanDirection;\n                }\n                if (scanDirection < 0) {\n                    mid -= scanDirection;\n                }\n            }\n\n            return mid;\n        }\n        else if (relation < 0) {\n            left = mid - relation;\n        }\n        else {\n            right = mid - relation;\n        }\n    }\n\n    return -left - 1;\n}\n\nexport type InsertMode = \"set\" | SearchMode;\n\nexport function insertSorted<T>(arr: T[], val: T, idx: number): number;\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number;\nexport function insertSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>, mode: InsertMode): number;\nexport function insertSorted<T>(arr: T[], val: T, comparerOrIdx: CompareFunction<T> | number, mode: InsertMode = \"search\"): number {\n    const allowDuplicates = mode !== \"set\";\n    if (mode === \"set\") {\n        mode = \"search\";\n    }\n\n    let idx: number = null;\n    if (isNumber(comparerOrIdx)) {\n        idx = comparerOrIdx;\n    }\n    else {\n        idx = binarySearch(arr, val, comparerOrIdx, mode);\n    }\n\n    if (idx < 0) {\n        idx = -idx - 1;\n    }\n    else if (!allowDuplicates) {\n        return -1;\n    }\n\n    arrayInsertAt(arr, val, idx);\n    return idx;\n}\n\nexport function removeSorted<T>(arr: T[], val: T, comparer: CompareFunction<T>): number {\n    const idx = binarySearch(arr, val, comparer);\n    if (idx >= 0) {\n        arrayRemoveAt(arr, idx);\n        return idx;\n    }\n    return -1;\n}\n\n\n/**\n * Empties out an array, returning the items that were in the array.\n * \n * @param arr the array to empty\n */\nexport function arrayClear<T>(arr: T[]) {\n    return arr.splice(0);\n}\n\n/**\n * Checks to see if two arrays contain the same elements\n * @returns -1 if the arrays match, the index of the first mismatched item if they don't.\n * @param arr1\n * @param arr2\n */\n\nexport function arrayCompare<T>(arr1: ReadonlyArray<T>, arr2: ReadonlyArray<T>): number {\n    for (let i = 0; i < arr1.length; ++i) {\n        if (arr1[i] !== arr2[i]) {\n            return i;\n        }\n    }\n\n    return -1;\n}\n\n\nexport function arrayGen<T>(count: number, thunk: (i: number) => T): T[] {\n    return Array.from(iterableGen(count, thunk));\n}\n\nexport function* iterableGen<T>(count: number, thunk: (i: number) => T) {\n    for (let i = 0; i < count; ++i) {\n        yield thunk(i);\n    }\n}\n\n\n/**\n * Inserts an item at the given index into an array.\n * @param arr\n * @param item\n * @param idx\n */\n\nexport function arrayInsertAt<T>(arr: T[], item: T, idx: number) {\n    arr.splice(idx, 0, item);\n}\n\n/**\n * Returns a random item from an array of items.\n *\n * Provides an option to consider an additional item as part of the collection\n * for random selection.\n */\nexport function arrayRandom<T>(arr: T[], defaultValue?: T): T | undefined {\n    const offset = defaultValue != null ? 1 : 0,\n        idx = Math.floor(Math.random() * (arr.length + offset)) - offset;\n    if (idx < 0) {\n        return defaultValue;\n    }\n    else {\n        return arr[idx];\n    }\n}\n\n\n/**\n * Removes a given item from an array, returning true if the item was removed.\n */\nexport function arrayRemove<T>(arr: T[], value: T) {\n    const idx = arr.indexOf(value);\n    if (idx > -1) {\n        arrayRemoveAt(arr, idx);\n        return true;\n    }\n\n    return false;\n}\n\nexport function arrayFilter<T>(arr: T[], predicate: (v: T) => boolean): T | null {\n    for (let i = arr.length - 1; i >= 0; --i) {\n        if (predicate(arr[i])) {\n            return arrayRemoveAt(arr, i);\n        }\n    }\n\n    return null;\n}\n\nexport function arrayRemoveByKey<T, K>(arr: T[], key: K, getKey: (v: T) => K): T | null {\n    return arrayFilter(arr, (v) => getKey(v) === key);\n}\n\n/**\n * Removes an item at the given index from an array.\n */\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\n    return arr.splice(idx, 1)[0];\n}\n\n/**\n * Replaces all of the items in an array with the given items.\n *\n * This helps reduce GC pressure as you're not creating arrays\n * and then dropping them on the floor.\n * \n * @param arr the array to fill\n * @param items the items to put into the array\n */\nexport function arrayReplace<T>(arr: T[], ...items: T[]) {\n    arr.splice(0, arr.length, ...items);\n}\n\nexport function arrayCreate<T>(count: number, make: (i: number, len?: number) => T): T[] {\n    const arr = new Array<T>(count);\n    for (let i = 0; i < count; ++i) {\n        arr[i] = make(i, count);\n    }\n    return arr;\n}\n\n\nfunction _arrayScan<T>(forward: boolean, arr: readonly T[], tests: ((val: T) => boolean)[]): T {\n    const start = forward ? 0 : arr.length - 1;\n    const end = forward ? arr.length : -1;\n    const inc = forward ? 1 : -1;\n    for (const test of tests) {\n        for (let i = start; i != end; i += inc) {\n            const item = arr[i];\n            if (test(item)) {\n                return item;\n            }\n        }\n    }\n\n    return null;\n}\n\n/**\n * Scans through a series of filters to find an item that matches\n * any of the filters. The first item of the first filter that matches\n * will be returned.\n */\nexport function arrayScan<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T\nexport function arrayScan<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\n    return _arrayScan(true, arr, tests);\n}\n\n/**\n * Scans through a series of filters to find an item that matches\n * any of the filters. The last item of the first filter that matches\n * will be returned.\n */\nexport function arrayScanReverse<T, S extends T>(arr: readonly T[], ...tests: ((val: T) => val is S)[]): S;\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T;\nexport function arrayScanReverse<T>(arr: readonly T[], ...tests: ((val: T) => boolean)[]): T {\n    return _arrayScan(false, arr, tests);\n}\n\nexport function arrayShuffleInplace<T>(arr: T[]): void {\n    for (let i = 0; i < arr.length - 1; ++i) {\n        const subLength = arr.length - i;\n        const subIndex = Math.floor(Math.random() * subLength);\n        const temp = arr[i];\n        const j = subIndex + i;\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n\nexport function arrayShuffle<T>(arr: readonly T[]): T[] {\n    const output = arr.slice();\n    arrayShuffleInplace(output);\n    return output;\n}\n\nconst numericPattern = /^(-?(?:\\d+\\.)\\d+)/;\n/**\n * Creates a new array that is sorted by the key extracted\n * by the keySelector callback, not modifying the input array,\n * (unlike JavaScript's own Array.prototype.sort).\n *\n * If the values have a number at the beginning, they'll be sorted\n * by that number.\n * @param arr\n * @param keySelector\n */\nexport function arraySortNumericByKey<T>(arr: ReadonlyArray<T>, keySelector: (obj: T) => string): T[] {\n    const comparer = compareBy<T>(v => {\n        const key = keySelector(v);\n        const match = key.match(numericPattern);\n        if (isDefined(match)) {\n            return parseFloat(match[1]);\n        }\n        return key;\n    });\n\n    return Array\n        .from(arr)\n        .sort(comparer);\n}\n\nexport function arrayZip<T, V>(arr1: readonly T[], arr2: readonly T[], combine: (a: T, b: T) => V): V[] {\n    const len = Math.max(arr1.length, arr2.length);\n    const output = new Array<V>(len);\n    for (let i = 0; i < len; ++i) {\n        output[i] = combine(arr1[i], arr2[i]);\n    }\n\n    return output;\n}\n", null, null, "import { arrayRandom } from \"@juniper-lib/collections/src/arrays\";\nimport { Vec2 } from \"gl-matrix/dist/esm\";\n\nfunction randomRange(min: number, max: number) {\n    return Math.random() * (max - min) + min;\n}\n\nconst colors = [\n    \"red\",\n    \"green\",\n    \"blue\",\n    \"yellow\",\n    \"magenta\",\n    \"cyan\"\n];\n\nexport class Ball {\n\n    #pos: Vec2;\n    get pos() { return this.#pos; }\n\n    #vel: Vec2;\n    get vel() { return this.#vel; }\n\n    #color: string;\n\n    static BYTE_LENGTH = 2 * Vec2.BYTE_LENGTH;\n\n    constructor(floats: Float32Array) {\n        this.#pos = new Vec2(floats, 0);\n        this.#vel = new Vec2(floats, Vec2.BYTE_LENGTH);\n        this.#color = arrayRandom(colors);\n    }\n\n    static fill(outputArray: Ball[]): ArrayBuffer {\n        const buffer = new ArrayBuffer(Ball.BYTE_LENGTH * outputArray.length);\n        for (let i = 0; i < outputArray.length; ++i) {\n            const floats = new Float32Array(buffer, Ball.BYTE_LENGTH * i, 4);\n            const ball = outputArray[i] = new Ball(floats);\n            ball.pos.x = randomRange(-1, 1);\n            ball.pos.y = randomRange(-1, 1);\n            ball.vel.x = randomRange(-.1, .1)\n            ball.vel.y = randomRange(-.1, .1);\n\n        }\n\n        return buffer;\n    }\n\n    draw2d(g: CanvasRenderingContext2D, s: number, sh: number) {\n        const heading = Math.atan2(this.vel.y, this.vel.x);\n        const speed = this.vel.magnitude;\n\n        g.save();\n        g.fillStyle = this.#color;\n        g.translate(this.#pos.x, this.#pos.y);\n        g.rotate(heading);\n        g.scale(1 + speed, 1);\n        g.fillRect(-sh, -sh, s, s);\n        g.restore();\n    }\n}\n", "import { isNumber } from \"@juniper-lib/tslib/dist/typeChecks\";\n\nexport function debounce<T extends (...args: any[]) => any>(action: T): (...args: Parameters<T>) => void\nexport function debounce<T extends (...args: any[]) => any>(time: number, action: T): (...args: Parameters<T>) => void;\nexport function debounce<T extends (...args: any[]) => any>(timeOrAction: number | T, action?: T): (...args: Parameters<T>) => void {\n    let time = 0;\n    if (isNumber(timeOrAction)) {\n        time = timeOrAction;\n    }\n    else {\n        action = timeOrAction;\n    }\n\n    let ready = true;\n    return (...args: Parameters<T>) => {\n        if (ready) {\n            ready = false;\n            setTimeout(() => {\n                ready = true;\n                action(...args);\n            }, time);\n        }\n    };\n}\n\n", "import { ID } from \"@juniper-lib/dom/src/attrs\";\nimport { Canvas } from \"@juniper-lib/dom/src/tags\";\nimport { Ball } from \"./Ball\";\nimport { debounce } from \"@juniper-lib/events/src/debounce\";\nimport \"./index.css\";\n\nconst canvas = Canvas(ID(\"frontBuffer\"));\nconst context = canvas.getContext(\"2d\", { alpha: true, desynchronized: true });\nconst resize = debounce(_resize);\nconst resizer = new ResizeObserver((evts) => {\n    for(const evt of evts){ \n        if(evt.target === canvas) {\n            resize();\n        }\n    }\n});\n\n\nconst adapter = await navigator.gpu.requestAdapter({ powerPreference: \"high-performance\" });\nconst device = await adapter.requestDevice();\n\nconst balls = new Array<Ball>(100);\nconst srcArrayBuffer = Ball.fill(balls);\nconst srcDataBuffer = new Uint8Array(srcArrayBuffer);\nconst gpuBuffer = device.createBuffer({\n    mappedAtCreation: true,\n    size: srcArrayBuffer.byteLength,\n    usage: GPUBufferUsage.MAP_WRITE\n});\nconst gpuArrayBuffer = gpuBuffer.getMappedRange();\nconst gpuDataBuffer = new Uint8Array(gpuArrayBuffer);\ngpuDataBuffer.set(srcDataBuffer);\n\nresizer.observe(canvas);\n\nfunction _resize() {\n    canvas.width = canvas.clientWidth * devicePixelRatio;\n    canvas.height = canvas.clientHeight * devicePixelRatio;\n}\n\nrequestAnimationFrame(draw);\nfunction draw() {\n    requestAnimationFrame(draw);\n    const s = Math.min(canvas.width, canvas.height);\n    const sh = s / 2;\n\n    context.clearRect(0, 0, canvas.width, canvas.height);\n\n    context.save();\n    context.translate(canvas.width / 2, canvas.height / 2);\n    context.scale(0.01, 0.01);\n    for(const ball of balls) {\n        ball.draw2d(context, s, sh);\n    }\n    context.restore();\n}\n\nrequestAnimationFrame(update);\nasync function update() {\n    requestAnimationFrame(update);\n}"],
  "mappings": "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",
  "names": ["t", "t"]
}
