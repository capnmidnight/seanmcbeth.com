{
  "version": 3,
  "sources": ["../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayClear.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/collections/arrayRemoveAt.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/typeChecks.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/EventBase.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/progress/BaseProgress.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/workers/WorkerServer.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/identity.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/events/Task.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/dom/canvas.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/math.ts", "../../../../Juniper/src/Juniper.TypeScript/@juniper-lib/tslib/singleton.ts", "../../../../TypeScript Code/src/dirt-worker/DirtService.ts", "../../../../TypeScript Code/src/dirt-worker/DirtWorkerServer.ts", "../../../../TypeScript Code/src/dirt-worker/index.ts"],
  "sourcesContent": ["/**\r\n * Empties out an array, returning the items that were in the array.\r\n * \r\n * @param arr the array to empty\r\n */\r\nexport function arrayClear<T>(arr: T[]) {\r\n    return arr.splice(0);\r\n}", "/**\r\n * Removes an item at the given index from an array.\r\n */\r\nexport function arrayRemoveAt<T>(arr: T[], idx: number) {\r\n    return arr.splice(idx, 1)[0];\r\n}", "function t(o: any, s: string, c: Function) {\r\n    return typeof o === s\r\n        || o instanceof c;\r\n}\r\n\r\nexport function isFunction(obj: any): obj is Function {\r\n    return t(obj, \"function\", Function);\r\n}\r\n\r\nexport function isString(obj: any): obj is string {\r\n    return t(obj, \"string\", String);\r\n}\r\n\r\nexport function isBoolean(obj: any): obj is boolean {\r\n    return t(obj, \"boolean\", Boolean);\r\n}\r\n\r\nexport function isNumber(obj: any): obj is number {\r\n    return t(obj, \"number\", Number);\r\n}\r\n\r\n/**\r\n * Check a value to see if it is of a number type\r\n * and is not the special NaN value.\r\n */\r\nexport function isGoodNumber(obj: any): obj is number {\r\n    return isNumber(obj)\r\n        && Number.isFinite(obj)\r\n        && !Number.isNaN(obj);\r\n}\r\n\r\nexport function isObject(obj: any): obj is object {\r\n    return isDefined(obj)\r\n        && t(obj, \"object\", Object);\r\n}\r\n\r\nexport function isPromise<T>(obj: any): obj is Promise<T> {\r\n    return obj instanceof Promise;\r\n}\r\n\r\nexport function isDate(obj: any): obj is Date {\r\n    return obj instanceof Date;\r\n}\r\n\r\nexport function isArray(obj: any): obj is Array<any> {\r\n    return obj instanceof Array;\r\n}\r\n\r\nexport function assertNever(x: never, msg?: string): never {\r\n    throw new Error((msg || \"Unexpected object: \") + x);\r\n}\r\n\r\nexport function isNullOrUndefined<T>(obj: T | null | undefined): obj is null | undefined {\r\n    return obj === null\r\n        || obj === undefined;\r\n}\r\n\r\nexport function isDefined<T>(obj: T | null | undefined): obj is T {\r\n    return !isNullOrUndefined(obj);\r\n}\r\n\r\nexport function isEventListener(obj: EventListenerOrEventListenerObject): obj is EventListener {\r\n    return isFunction(obj);\r\n}\r\n\r\nexport function isEventListenerObject(obj: EventListenerOrEventListenerObject): obj is EventListenerObject {\r\n    return !isEventListener(obj);\r\n}\r\n\r\nexport function isArrayBufferView(obj: any): obj is ArrayBufferView {\r\n    return obj instanceof Uint8Array\r\n        || obj instanceof Uint8ClampedArray\r\n        || obj instanceof Int8Array\r\n        || obj instanceof Uint16Array\r\n        || obj instanceof Int16Array\r\n        || obj instanceof Uint32Array\r\n        || obj instanceof Int32Array\r\n        || obj instanceof Float32Array\r\n        || obj instanceof Float64Array\r\n        || \"BigUint64Array\" in globalThis && obj instanceof globalThis[\"BigUint64Array\"]\r\n        || \"BigInt64Array\" in globalThis && obj instanceof globalThis[\"BigInt64Array\"];\r\n}\r\n\r\nexport function isArrayBuffer(val: any): val is ArrayBuffer {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}", "import { arrayClear } from \"../collections/arrayClear\";\r\nimport { arrayRemoveAt } from \"../collections/arrayRemoveAt\";\r\nimport { isBoolean, isDefined, isFunction, isNullOrUndefined } from \"../typeChecks\";\r\n\r\ntype EventCallback = (evt: Event) => any;\r\n\r\nexport class EventBase implements EventTarget {\r\n    private readonly listeners = new Map<string, EventCallback[]>();\r\n    private readonly listenerOptions = new Map<EventCallback, boolean | AddEventListenerOptions>();\r\n\r\n    addEventListener(type: string, callback: (evt: Event) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (isFunction(callback)) {\r\n            let listeners = this.listeners.get(type);\r\n            if (!listeners) {\r\n                listeners = new Array<EventCallback>();\r\n                this.listeners.set(type, listeners);\r\n            }\r\n\r\n            if (!listeners.find((c) => c === callback)) {\r\n                listeners.push(callback);\r\n\r\n                if (options) {\r\n                    this.listenerOptions.set(callback, options);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: string, callback: (evt: Event) => any) {\r\n        if (isFunction(callback)) {\r\n            const listeners = this.listeners.get(type);\r\n            if (listeners) {\r\n                this.removeListener(listeners, callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    clearEventListeners(type?: string) {\r\n        for (const [evtName, handlers] of this.listeners) {\r\n            if (isNullOrUndefined(type) || type === evtName) {\r\n                for (const handler of handlers) {\r\n                    this.removeEventListener(type, handler);\r\n                }\r\n                arrayClear(handlers);\r\n                this.listeners.delete(evtName);\r\n            }\r\n        }\r\n    }\r\n\r\n    private removeListener(listeners: EventCallback[], callback: EventCallback) {\r\n        const idx = listeners.findIndex((c) => c === callback);\r\n        if (idx >= 0) {\r\n            arrayRemoveAt(listeners, idx);\r\n            if (this.listenerOptions.has(callback)) {\r\n                this.listenerOptions.delete(callback);\r\n            }\r\n        }\r\n    }\r\n\r\n    dispatchEvent(evt: Event): boolean {\r\n        const listeners = this.listeners.get(evt.type);\r\n        if (listeners) {\r\n            for (const callback of listeners) {\r\n                const options = this.listenerOptions.get(callback);\r\n                if (isDefined(options)\r\n                    && !isBoolean(options)\r\n                    && options.once) {\r\n                    this.removeListener(listeners, callback);\r\n                }\r\n\r\n                callback.call(this, evt);\r\n            }\r\n        }\r\n        return !evt.defaultPrevented;\r\n    }\r\n}\r\n\r\nexport class TypedEvent<T extends string> extends Event {\r\n\r\n    override get type(): T {\r\n        return super.type as T;\r\n    }\r\n\r\n    constructor(type: T, eventInitDict?: EventInit) {\r\n        super(type, eventInitDict);\r\n    }\r\n}\r\n\r\nexport class TypedEventBase<EventsT> extends EventBase {\r\n    private readonly bubblers = new Set<TypedEventBase<EventsT>>();\r\n    private readonly scopes = new WeakMap<object, Array<[any, any]>>();\r\n\r\n    addBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.add(bubbler);\r\n    }\r\n\r\n    removeBubbler(bubbler: TypedEventBase<EventsT>) {\r\n        this.bubblers.delete(bubbler);\r\n    }\r\n\r\n    override addEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        super.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    override removeEventListener<K extends keyof EventsT & string>(type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any) {\r\n        super.removeEventListener(type, callback as any);\r\n    }\r\n\r\n    override clearEventListeners<K extends keyof EventsT & string>(type?: K): void {\r\n        return super.clearEventListeners(type);\r\n    }\r\n\r\n    addScopedEventListener<K extends keyof EventsT & string>(scope: object, type: K, callback: (evt: TypedEvent<K> & EventsT[K]) => any, options?: boolean | AddEventListenerOptions): void {\r\n        if (!this.scopes.has(scope)) {\r\n            this.scopes.set(scope, []);\r\n        }\r\n        this.scopes.get(scope).push([type, callback]);\r\n        this.addEventListener(type, callback as any, options);\r\n    }\r\n\r\n    removeScope<K extends keyof EventsT & string>(scope: object) {\r\n        const listeners = this.scopes.get(scope);\r\n        if (listeners) {\r\n            this.scopes.delete(scope);\r\n            for (const [type, listener] of listeners) {\r\n                this.removeEventListener(type as K, listener);\r\n            }\r\n        }\r\n    }\r\n\r\n    override dispatchEvent<T extends Event>(evt: T): boolean {\r\n        if (!super.dispatchEvent(evt)) {\r\n            return false;\r\n        }\r\n\r\n        if (!evt.cancelBubble) {\r\n            for (const bubbler of this.bubblers) {\r\n                if (!bubbler.dispatchEvent(evt)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}", "import { arrayClear } from \"../collections/arrayClear\";\r\nimport { TypedEventBase } from \"../events/EventBase\";\r\nimport type { IProgress } from \"./IProgress\";\r\n\r\nexport class BaseProgress<T = void>\r\n    extends TypedEventBase<T>\r\n    implements IProgress {\r\n    private readonly attached = new Array<IProgress>();\r\n    private soFar: number = null;\r\n    private total: number = null;\r\n    private msg: string = null;\r\n    private est: number = null;\r\n\r\n    protected get p() {\r\n        return this.total > 0\r\n            ? this.soFar / this.total\r\n            : 0;\r\n    }\r\n\r\n    report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        this.soFar = soFar;\r\n        this.total = total;\r\n        this.msg = msg;\r\n        this.est = est;\r\n        for (const attach of this.attached) {\r\n            attach.report(soFar, total, msg, est);\r\n        }\r\n    }\r\n\r\n    attach(prog: IProgress): void {\r\n        this.attached.push(prog);\r\n        prog.report(this.soFar, this.total, this.msg, this.est);\r\n    }\r\n\r\n    clear() {\r\n        this.report(0, 0);\r\n        this._clear();\r\n    }\r\n\r\n    start(msg?: string) {\r\n        this.report(0, 1, msg || \"starting\");\r\n    }\r\n\r\n    end(msg?: string) {\r\n        this.report(1, 1, msg || \"done\");\r\n        this._clear();\r\n    }\r\n\r\n    private _clear() {\r\n        this.soFar = null;\r\n        this.total = null;\r\n        this.msg = null;\r\n        this.est = null;\r\n        arrayClear(this.attached);\r\n    }\r\n}", "import { TypedEventBase } from \"@juniper-lib/tslib/events/EventBase\";\r\nimport { BaseProgress } from \"@juniper-lib/tslib/progress/BaseProgress\";\r\nimport { isArray, isDefined } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { WorkerClientMethodCallMessage, WorkerServerErrorMessage, WorkerServerEventMessage, WorkerServerMessages, WorkerServerProgressMessage, WorkerServerReturnMessage } from \"@juniper-lib/workers/WorkerMessages\";\r\n\r\ntype workerServerMethod = (taskID: number, ...params: any[]) => Promise<void>;\r\n\r\ntype createTransferableCallback<T> = (returnValue: T) => (Transferable | OffscreenCanvas)[];\r\n\r\ntype Executor<T> = (...params: any[]) => Promise<T>;\r\n\r\ntype VoidExecutor = (...params: any[]) => void;\r\n\r\nclass WorkerServerProgress extends BaseProgress {\r\n    constructor(private readonly server: WorkerServer<any>, private readonly taskID: number) {\r\n        super();\r\n    }\r\n\r\n\r\n    /**\r\n     * Report progress through long-running invocations. If your invocable\r\n     * functions don't report progress, this can be safely ignored.\r\n     * @param soFar - how much of the process we've gone through.\r\n     * @param total - the total amount we need to go through.\r\n     * @param msg - an optional message to include as part of the progress update.\r\n     * @param est - an optional estimate of how many milliseconds are left in the progress.\r\n     */\r\n    override report(soFar: number, total: number, msg?: string, est?: number): void {\r\n        const message: WorkerServerProgressMessage = {\r\n            type: \"progress\",\r\n            taskID: this.taskID,\r\n            soFar,\r\n            total,\r\n            msg,\r\n            est\r\n        };\r\n        this.server.postMessage(message);\r\n    }\r\n}\r\n\r\nexport class WorkerServer<EventsT> {\r\n    private methods = new Map<string, workerServerMethod>();\r\n\r\n    /**\r\n     * Creates a new worker thread method call listener.\r\n     * @param self - the worker scope in which to listen.\r\n     */\r\n    constructor(private self: DedicatedWorkerGlobalScope) {\r\n        this.self.addEventListener(\"message\", (evt: MessageEvent<WorkerClientMethodCallMessage>): void => {\r\n            const data = evt.data;\r\n            this.callMethod(data);\r\n        });\r\n    }\r\n\r\n    postMessage(message: WorkerServerMessages<EventsT>, transferables?: (Transferable | OffscreenCanvas)[]): void {\r\n        if (isDefined(transferables)) {\r\n            this.self.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.self.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private callMethod(data: WorkerClientMethodCallMessage) {\r\n        const method = this.methods.get(data.methodName);\r\n        if (method) {\r\n            try {\r\n                if (isArray(data.params)) {\r\n                    method(data.taskID, ...data.params);\r\n                }\r\n                else if (isDefined(data.params)) {\r\n                    method(data.taskID, data.params);\r\n                }\r\n                else {\r\n                    method(data.taskID);\r\n                }\r\n            }\r\n            catch (exp) {\r\n                this.onError(data.taskID, `method invocation error: ${data.methodName}(${exp.message || exp})`);\r\n            }\r\n        }\r\n        else {\r\n            this.onError(data.taskID, `method not found: ${data.methodName}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Report an error back to the calling thread.\r\n     * @param taskID - the invocation ID of the method that errored.\r\n     * @param errorMessage - what happened?\r\n     */\r\n    private onError(taskID: number, errorMessage: string): void {\r\n        const message: WorkerServerErrorMessage = {\r\n            type: \"error\",\r\n            taskID,\r\n            errorMessage\r\n        };\r\n        this.postMessage(message);\r\n    }\r\n\r\n    /**\r\n     * Return back to the client.\r\n     * @param taskID - the invocation ID of the method that is returning.\r\n     * @param returnValue - the (optional) value to return.\r\n     * @param transferReturnValue - a mapping function to extract any Transferable objects from the return value.\r\n     */\r\n    private onReturn<T>(taskID: number, returnValue: T, transferReturnValue: createTransferableCallback<T>): void {\r\n        let message: WorkerServerReturnMessage = null;\r\n        if (returnValue === undefined) {\r\n            message = {\r\n                type: \"return\",\r\n                taskID\r\n            };\r\n        }\r\n        else {\r\n            message = {\r\n                type: \"return\",\r\n                taskID,\r\n                returnValue\r\n            };\r\n        }\r\n\r\n        if (isDefined(transferReturnValue)) {\r\n            const transferables = transferReturnValue(returnValue);\r\n            this.postMessage(message, transferables);\r\n        }\r\n        else {\r\n            this.postMessage(message);\r\n        }\r\n    }\r\n\r\n    private addMethodInternal<T>(methodName: string, asyncFunc: Function, transferReturnValue?: createTransferableCallback<T>) {\r\n        if (this.methods.has(methodName)) {\r\n            throw new Error(`${methodName} method has already been mapped.`);\r\n        }\r\n\r\n        this.methods.set(methodName, async (taskID: number, ...params: any[]) => {\r\n            const prog = new WorkerServerProgress(this, taskID);\r\n\r\n            try {\r\n                // Even functions returning void and functions returning bare, unPromised values, can be awaited.\r\n                // This creates a convenient fallback where we don't have to consider the exact return type of the function.\r\n                const returnValue = await asyncFunc(...params, prog);\r\n                this.onReturn(taskID, returnValue, transferReturnValue);\r\n            }\r\n            catch (exp) {\r\n                console.error(exp);\r\n                this.onError(taskID, exp.message || exp);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addFunction<T>(methodName: string, asyncFunc: Executor<T>, transferReturnValue?: createTransferableCallback<T>) {\r\n        this.addMethodInternal<T>(methodName, asyncFunc, transferReturnValue);\r\n    }\r\n\r\n    /**\r\n     * Registers a function call for cross-thread invocation.\r\n     * @param methodName - the name of the function to use during invocations.\r\n     * @param asyncFunc - the function to execute when the method is invoked.\r\n     */\r\n    addVoidFunction(methodName: string, asyncFunc: VoidExecutor) {\r\n        this.addMethodInternal(methodName, asyncFunc);\r\n    }\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param obj - the object on which to find the method.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param transferReturnValue - an (optional) function that reports on which values in the `returnValue` should be transfered instead of copied.\r\n     */\r\n    addMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & Executor<any>,\r\n        ReturnT extends (ReturnType<MethodT> extends Promise<infer T> ? T : ReturnT)\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT,\r\n        transferReturnValue?: createTransferableCallback<ReturnT>\r\n    ): void {\r\n        this.addFunction(methodName, method.bind(obj), transferReturnValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * Registers a class method call for cross-thread invocation.\r\n     * @param methodName - the name of the method to use during invocations.\r\n     * @param obj - the object on which to find the method.\r\n     */\r\n    addVoidMethod<\r\n        ClassT,\r\n        MethodNameT extends keyof ClassT & string,\r\n        MethodT extends ClassT[MethodNameT] & VoidExecutor\r\n    >(\r\n        obj: ClassT,\r\n        methodName: MethodNameT,\r\n        method: MethodT\r\n    ): void {\r\n        this.addVoidFunction(methodName, method.bind(obj));\r\n    }\r\n\r\n\r\n    addEvent<EventNameT extends keyof EventsT & string, TransferableT>(\r\n        object: TypedEventBase<EventsT>,\r\n        eventName: EventNameT,\r\n        makePayload?: (evt: EventsT[EventNameT] & Event) => TransferableT,\r\n        transferReturnValue?: createTransferableCallback<TransferableT>\r\n    ): void {\r\n        object.addEventListener(eventName, (evt: EventsT[EventNameT] & Event) => {\r\n            let message: WorkerServerEventMessage<EventsT> = null;\r\n            if (isDefined(makePayload)) {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName,\r\n                    data: makePayload(evt)\r\n                };\r\n            }\r\n            else {\r\n                message = {\r\n                    type: \"event\",\r\n                    eventName\r\n                };\r\n            }\r\n\r\n            if (message.data !== undefined\r\n                && isDefined(transferReturnValue)) {\r\n                const transferables = transferReturnValue(message.data);\r\n                this.postMessage(message, transferables);\r\n            }\r\n            else {\r\n                this.postMessage(message);\r\n            }\r\n        });\r\n    }\r\n}", "export function identity<T>(item: T): T {\r\n    return item;\r\n}\r\n\r\nexport function nothing(): void {\r\n}\r\n\r\nexport function negate(value: number) {\r\n    return -value;\r\n}\r\n\r\nexport function alwaysTrue(): true {\r\n    return true;\r\n}\r\n\r\nexport function alwaysFalse(): false {\r\n    return false;\r\n}\r\n\r\nexport function not(value: boolean) {\r\n    return !value;\r\n}\r\n\r\nexport function and(a: boolean, b: boolean): boolean {\r\n    return a && b;\r\n}\r\n\r\nexport function or(a: boolean, b: boolean): boolean {\r\n    return a || b;\r\n}\r\n\r\nexport function xor(a: boolean, b: boolean): boolean {\r\n    return a !== b;\r\n}\r\n\r\nexport function nand(a: boolean, b: boolean): boolean {\r\n    return not(and(a, b));\r\n}\r\n\r\nexport function nor(a: boolean, b: boolean): boolean {\r\n    return not(or(a, b));\r\n}\r\n\r\nexport function equal<T>(a: T, b: T): boolean {\r\n    return a === b;\r\n}\r\n\r\nexport function reflectValue<T>(v: T): () => T {\r\n    return () => v;\r\n}\r\n\r\nexport type AsyncCallback = () => Promise<void>;", "import { arrayClear } from \"../collections/arrayClear\";\r\nimport { alwaysTrue } from \"../identity\";\r\nimport { isBoolean, isDefined, isFunction } from \"../typeChecks\";\r\nimport { Predicate } from \"./Predicate\";\r\n\r\n/**\r\n * A Task represents a Promise that exposes its resolve/reject functions\r\n * as methods, rather than requiring a callback being passed to its constructor.\r\n * Tasks can be used to build manually-resolved Promises with less\r\n * boilerplate of nested function blocks.\r\n **/\r\nexport class Task<ResultsT = void> implements Promise<ResultsT> {\r\n    private readonly onThens = new Array<(v: ResultsT) => any>();\r\n    private readonly onCatches = new Array<(reason?: any) => void>();\r\n\r\n    private readonly rejectTest: Predicate<any>;\r\n    private readonly resolveTest: Predicate<ResultsT>;\r\n    private readonly autoStart: boolean;\r\n\r\n    private _result: ResultsT = undefined;\r\n    private _error: any = undefined;\r\n    private _started = false;\r\n    private _errored = false;\r\n    private _finished = false;\r\n\r\n    /**\r\n     * Signal success for the Task\r\n     *\r\n     * @param value - the value to store with the resolved Task.\r\n     **/\r\n    public readonly resolve: (value: ResultsT) => void;\r\n\r\n    /**\r\n     * Signal failrue for the Task\r\n     *\r\n     * @param value - the error to store with the rejected Task.\r\n     **/\r\n    public readonly reject: (reason: any) => void;\r\n\r\n\r\n    /**\r\n     * Create a new Task\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(autoStart?: boolean);\r\n\r\n    /**\r\n     * Create a new Task\r\n     * \r\n     * @param resolveTest - a filtering function for values passed to Task.resolve()\r\n     * to only resolve the Task for values that pass the filter. This is useful when\r\n     * connecting the task to an event handler that may fire multiple events that\r\n     * aren't of interest, such as Tasks that listen for a specific keyboard key\r\n     * to be pressed.\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(resolveTest: Predicate<ResultsT>, autoStart?: boolean)\r\n\r\n    /**\r\n     * Create a new Task\r\n     * \r\n     * @param resolveTest - a filtering function for values passed to Task.resolve()\r\n     * to only resolve the Task for values that pass the filter. This is useful when\r\n     * connecting the task to an event handler that may fire multiple events that\r\n     * aren't of interest, such as Tasks that listen for a specific keyboard key\r\n     * to be pressed.\r\n     * \r\n     * @param rejectTest - a filtering function for error reasons passed to Task.reject()\r\n     * to only reject the Task when errors pass the filter.\r\n     *\r\n     * @param autoStart - set to false to require manually starting the Task. Useful\r\n     * for reusable tasks that run on timers.\r\n     */\r\n    constructor(resolveTest: Predicate<ResultsT>, rejectTest: Predicate<any>, autoStart?: boolean);\r\n    constructor(resolveTestOrAutoStart?: boolean | Predicate<ResultsT>, rejectTestOrAutoStart?: boolean | Predicate<any>, autoStart = true) {\r\n        if (isFunction(resolveTestOrAutoStart)) {\r\n            this.resolveTest = resolveTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.resolveTest = alwaysTrue;\r\n        }\r\n\r\n        if (isFunction(rejectTestOrAutoStart)) {\r\n            this.rejectTest = rejectTestOrAutoStart;\r\n        }\r\n        else {\r\n            this.rejectTest = alwaysTrue;\r\n        }\r\n\r\n        if (isBoolean(resolveTestOrAutoStart)) {\r\n            this.autoStart = resolveTestOrAutoStart;\r\n        }\r\n        else if (isBoolean(rejectTestOrAutoStart)) {\r\n            this.autoStart = rejectTestOrAutoStart;\r\n        }\r\n        else if (isDefined(autoStart)) {\r\n            this.autoStart = autoStart;\r\n        }\r\n        else {\r\n            this.autoStart = false;\r\n        }\r\n\r\n        // It's very likely that we will want to use resolve/reject\r\n        // as values to pass to another function/method, so we create\r\n        // them not as methods, but as bound lambda expressions stored\r\n        // in public fields.\r\n        this.resolve = (value) => {\r\n            if (this.running && this.resolveTest(value)) {\r\n                this._result = value;\r\n                for (const thenner of this.onThens) {\r\n                    thenner(value);\r\n                }\r\n                this.clear();\r\n                this._finished = true;\r\n            }\r\n        };\r\n\r\n        this.reject = (reason) => {\r\n            if (this.running && this.rejectTest(reason)) {\r\n                this._error = reason;\r\n                this._errored = true;\r\n                for (const catcher of this.onCatches) {\r\n                    catcher(reason);\r\n                }\r\n                this.clear();\r\n                this._finished = true;\r\n            }\r\n        };\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    private clear() {\r\n        arrayClear(this.onThens);\r\n        arrayClear(this.onCatches);\r\n    }\r\n\r\n    /**\r\n     * If the task was not auto-started, signal that the task is now ready to recieve\r\n     * resolutions or rejections.\r\n     **/\r\n    start() {\r\n        this._started = true;\r\n    }\r\n\r\n    /**\r\n     * Get the last result that the task had resolved to, if any is available.\r\n     *\r\n     * If the Task had been rejected, attempting to get the result will rethrow\r\n     * the error that had rejected the task.\r\n     **/\r\n    get result(): ResultsT {\r\n        if (isDefined(this.error)) {\r\n            throw this.error;\r\n        }\r\n\r\n        return this._result;\r\n    }\r\n\r\n    /**\r\n     * Get the last error that the task had been rejected by, if any.\r\n     **/\r\n    get error(): any {\r\n        return this._error;\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task is waiting to be resolved or rejected.\r\n     **/\r\n    get started(): boolean {\r\n        return this._started;\r\n    }\r\n\r\n    /**\r\n     * Returns true when the Task has been resolved or rejected.\r\n     **/\r\n    get finished(): boolean {\r\n        return this._finished;\r\n    }\r\n\r\n    /**\r\n     * Returns true after the Task has started, but before it has finished.\r\n     **/\r\n    get running(): boolean {\r\n        return this.started && !this.finished;\r\n    }\r\n\r\n    /**\r\n     * Returns true if the Task had been rejected, regardless of any\r\n     * reason being given.\r\n     **/\r\n    get errored(): boolean {\r\n        return this._errored;\r\n    }\r\n\r\n    get [Symbol.toStringTag](): string {\r\n        return this.toString();\r\n    }\r\n\r\n    /**\r\n     * Calling Task.then(), Task.catch(), or Task.finally() creates a new Promise.\r\n     * This method creates that promise and links it with the task.\r\n     **/\r\n    private project(): Promise<ResultsT> {\r\n        return new Promise<ResultsT>((resolve, reject) => {\r\n            if (!this.finished) {\r\n                this.onThens.push(resolve);\r\n                this.onCatches.push(reject);\r\n            }\r\n            else if (this.errored) {\r\n                reject(this.error);\r\n            }\r\n            else {\r\n                resolve(this.result);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attach a handler to the task that fires when the task is resolved.\r\n     * \r\n     * @param onfulfilled\r\n     * @param onrejected\r\n     */\r\n    then<TResult1 = ResultsT, TResult2 = never>(onfulfilled?: (value: ResultsT) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>): Promise<TResult1 | TResult2> {\r\n        return this.project().then(onfulfilled, onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires when the Task is rejected.\r\n     * \r\n     * @param onrejected\r\n     */\r\n    catch<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>): Promise<ResultsT | TResult> {\r\n        return this.project().catch(onrejected);\r\n    }\r\n\r\n    /**\r\n     * Attach a handler that fires regardless of whether the Task is resolved\r\n     * or rejected.\r\n     * \r\n     * @param onfinally\r\n     */\r\n    finally(onfinally?: () => void): Promise<ResultsT> {\r\n        return this.project().finally(onfinally);\r\n    }\r\n\r\n    /**\r\n     * Resets the Task to an unsignalled state, which is useful for\r\n     * reducing GC pressure when working with lots of tasks.\r\n     **/\r\n    reset() {\r\n        if (this.running) {\r\n            this.reject(\"Resetting previous invocation\");\r\n        }\r\n\r\n        this.clear();\r\n        this._result = undefined;\r\n        this._error = undefined;\r\n        this._errored = false;\r\n        this._finished = false;\r\n        this._started = false;\r\n\r\n        if (this.autoStart) {\r\n            this.start();\r\n        }\r\n    }\r\n}", "import { once } from \"@juniper-lib/tslib/events/once\";\r\nimport { Task } from \"@juniper-lib/tslib/events/Task\";\r\nimport { isDefined, isNullOrUndefined } from \"@juniper-lib/tslib/typeChecks\";\r\nimport { htmlHeight, htmlWidth, src } from \"./attrs\";\r\nimport { Canvas, Img } from \"./tags\";\r\n\r\nexport type CanvasTypes = HTMLCanvasElement | OffscreenCanvas;\r\nexport type CanvasImageTypes = HTMLImageElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap;\r\nexport type Context2D = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\r\nexport type GraphicsContext = RenderingContext | OffscreenCanvasRenderingContext2D;\r\n\r\ndeclare const IS_WORKER: boolean;\r\nexport const hasHTMLCanvas = /*@__PURE__*/ !IS_WORKER && \"HTMLCanvasElement\" in globalThis;\r\nexport const hasHTMLImage = /*@__PURE__*/ !IS_WORKER && \"HTMLImageElement\" in globalThis;\r\nexport const disableAdvancedSettings = /*@__PURE__*/ false;\r\nexport const hasOffscreenCanvas = /*@__PURE__*/ !disableAdvancedSettings && \"OffscreenCanvas\" in globalThis;\r\nexport const hasImageBitmap = /*@__PURE__*/ !disableAdvancedSettings && \"createImageBitmap\" in globalThis;\r\n\r\nexport function isHTMLCanvas(obj: any): obj is HTMLCanvasElement {\r\n    return !IS_WORKER && hasHTMLCanvas && obj instanceof HTMLCanvasElement;\r\n}\r\n\r\nexport function isHTMLImage(img: any): img is HTMLImageElement {\r\n    return !IS_WORKER && hasHTMLImage && img instanceof HTMLImageElement;\r\n}\r\n\r\nexport function isOffscreenCanvas(obj: any): obj is OffscreenCanvas {\r\n    return hasOffscreenCanvas && obj instanceof OffscreenCanvas;\r\n}\r\n\r\nexport function isImageBitmap(img: any): img is ImageBitmap {\r\n    return hasImageBitmap && img instanceof ImageBitmap;\r\n}\r\n\r\nexport function isImageData(img: any): img is ImageData {\r\n    return img instanceof ImageData;\r\n}\r\n\r\n/**\r\n * Returns true if the given object is either an HTMLCanvasElement or an OffscreenCanvas.\r\n */\r\nexport function isCanvas(obj: any): obj is CanvasTypes {\r\n    return isHTMLCanvas(obj)\r\n        || isOffscreenCanvas(obj);\r\n}\r\n\r\nexport function isCanvasArray(arr: any): arr is CanvasTypes[] {\r\n    return isDefined(arr)\r\n        && arr.length > 0\r\n        && isCanvas(arr[0]);\r\n}\r\n\r\nexport function drawImageBitmapToCanvas(canv: CanvasTypes, img: ImageBitmap): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nexport function drawImageDataToCanvas(canv: CanvasTypes, img: ImageData): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.putImageData(img, 0, 0);\r\n}\r\n\r\nfunction testOffscreen2D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"2d\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext2D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen2D();\r\n\r\nexport const createUtilityCanvas = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvas\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvas\r\n    || null;\r\n\r\nexport const createUICanvas = /*@__PURE__*/ !IS_WORKER && hasHTMLCanvas\r\n    ? createCanvas\r\n    : createUtilityCanvas;\r\n\r\nfunction testOffscreen3D() {\r\n    try {\r\n        const canv = new OffscreenCanvas(1, 1);\r\n        const g = canv.getContext(\"webgl2\");\r\n        return g != null;\r\n    }\r\n    catch (exp) {\r\n        return false;\r\n    }\r\n}\r\n\r\nexport const hasOffscreenCanvasRenderingContext3D = /*@__PURE__*/ hasOffscreenCanvas && testOffscreen3D();\r\n\r\nexport function createOffscreenCanvas(width: number, height: number): OffscreenCanvas {\r\n    return new OffscreenCanvas(width, height);\r\n}\r\n\r\nexport function createCanvas(w: number, h: number): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return Canvas(htmlWidth(w), htmlHeight(h));\r\n}\r\n\r\nexport function createOffscreenCanvasFromImageBitmap(img: ImageBitmap): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImageBitmap(img: ImageBitmap): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageBitmapToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImageBitmap = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImageBitmap\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImageBitmap\r\n    || null;\r\n\r\nexport function createOffscreenCanvasFromImageData(img: ImageData): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageDataToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImageData(img: ImageData): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageDataToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImageData = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImageData\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImageData\r\n    || null;\r\n\r\nexport function createCanvasFromOffscreenCanvas(canv: OffscreenCanvas): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const c = createCanvas(canv.width, canv.height);\r\n    drawImageToCanvas(c, canv);\r\n    return c;\r\n}\r\n\r\nexport function drawImageToCanvas(canv: CanvasTypes, img: CanvasImageTypes): void {\r\n    const g = canv.getContext(\"2d\");\r\n    if (isNullOrUndefined(g)) {\r\n        throw new Error(\"Could not create 2d context for canvas\");\r\n    }\r\n    g.drawImage(img, 0, 0);\r\n}\r\n\r\nexport function createOffscreenCanvasFromImage(img: HTMLImageElement): OffscreenCanvas {\r\n    const canv = createOffscreenCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport function createCanvasFromImage(img: HTMLImageElement): HTMLCanvasElement {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    const canv = createCanvas(img.width, img.height);\r\n    drawImageToCanvas(canv, img);\r\n    return canv;\r\n}\r\n\r\nexport const createUtilityCanvasFromImage = /*@__PURE__*/ hasOffscreenCanvasRenderingContext2D && createOffscreenCanvasFromImage\r\n    || !IS_WORKER && hasHTMLCanvas && createCanvasFromImage\r\n    || null;\r\n\r\nexport async function createImageFromFile(file: string): Promise<HTMLImageElement> {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Image is not supported in workers\");\r\n    }\r\n\r\n    const img = Img(src(file));\r\n    await once<HTMLElementEventMap>(img, \"load\", \"error\");\r\n    return img;\r\n}\r\n\r\n/**\r\n * Resizes a canvas element\r\n * @param canv\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setCanvasSize(canv: CanvasTypes, w: number, h: number, superscale = 1) {\r\n    w = Math.floor(w * superscale);\r\n    h = Math.floor(h * superscale);\r\n    if (canv.width != w\r\n        || canv.height != h) {\r\n        canv.width = w;\r\n        canv.height = h;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport function is2DRenderingContext(ctx: GraphicsContext): ctx is Context2D {\r\n    return isDefined((ctx as Context2D).textBaseline);\r\n}\r\n\r\nexport function setCanvas2DContextSize(ctx: Context2D, w: number, h: number, superscale = 1) {\r\n    const oldImageSmoothingEnabled = ctx.imageSmoothingEnabled,\r\n        oldTextBaseline = ctx.textBaseline,\r\n        oldTextAlign = ctx.textAlign,\r\n        oldFont = ctx.font,\r\n        resized = setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n\r\n    if (resized) {\r\n        ctx.imageSmoothingEnabled = oldImageSmoothingEnabled;\r\n        ctx.textBaseline = oldTextBaseline;\r\n        ctx.textAlign = oldTextAlign;\r\n        ctx.font = oldFont;\r\n    }\r\n\r\n    return resized;\r\n}\r\n\r\n/**\r\n * Resizes the canvas element of a given rendering context.\r\n * \r\n * Note: the imageSmoothingEnabled, textBaseline, textAlign, and font \r\n * properties of the context will be restored after the context is resized,\r\n * as these values are usually reset to their default values when a canvas\r\n * is resized.\r\n * @param ctx\r\n * @param w - the new width of the canvas\r\n * @param h - the new height of the canvas\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function setContextSize(ctx: GraphicsContext, w: number, h: number, superscale = 1) {\r\n    if (is2DRenderingContext(ctx)) {\r\n        return setCanvas2DContextSize(ctx, w, h, superscale);\r\n    }\r\n    else {\r\n        return setCanvasSize(\r\n            ctx.canvas,\r\n            w,\r\n            h,\r\n            superscale);\r\n    }\r\n}\r\n\r\n/**\r\n * Resizes a canvas element to match the proportions of the size of the element in the DOM.\r\n * @param canv\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeCanvas(canv: HTMLCanvasElement, superscale = 1) {\r\n    if (IS_WORKER) {\r\n        throw new Error(\"HTML Canvas is not supported in workers\");\r\n    }\r\n\r\n    return setCanvasSize(\r\n        canv,\r\n        canv.clientWidth,\r\n        canv.clientHeight,\r\n        superscale);\r\n}\r\n\r\n/**\r\n * Resizes a canvas element of a given rendering context to match the proportions of the size of the element in the DOM.\r\n * @param ctx\r\n * @param [superscale=1] - a value by which to scale width and height to achieve supersampling. Defaults to 1.\r\n * @returns true, if the canvas size changed, false if the given size (with super sampling) resulted in the same size.\r\n */\r\nexport function resizeContext(ctx: CanvasRenderingContext2D, superscale = 1) {\r\n    return setContextSize(\r\n        ctx,\r\n        ctx.canvas.clientWidth,\r\n        ctx.canvas.clientHeight,\r\n        superscale);\r\n}\r\n\r\nexport function canvasToBlob(canvas: CanvasTypes, type?: string, quality?: number): Promise<Blob> {\r\n    if (isOffscreenCanvas(canvas)) {\r\n        return canvas.convertToBlob({ type, quality });\r\n    }\r\n    else if (isHTMLCanvas(canvas)) {\r\n        const blobCreated = new Task<Blob>();\r\n        canvas.toBlob(blobCreated.resolve, type, quality);\r\n        return blobCreated;\r\n    }\r\n    else {\r\n        throw new Error(\"Cannot save image from canvas\");\r\n    }\r\n}\r\n\r\nexport async function snapshot(canvas: CanvasTypes): Promise<CanvasTypes> {\r\n    const copy = createUtilityCanvas(canvas.width, canvas.height);\r\n    drawImageToCanvas(copy, canvas);\r\n    return copy;\r\n}", "import { vec2, vec3 } from \"gl-matrix\";\r\nimport { isDefined, isGoodNumber, isNumber } from \"./typeChecks\";\r\n\r\nexport const RIGHT = /*@__PURE__*/ vec3.fromValues(1, 0, 0);\r\nexport const UP = /*@__PURE__*/ vec3.fromValues(0, 1, 0);\r\nexport const FWD = /*@__PURE__*/ vec3.fromValues(0, 0, -1);\r\nexport const Tau = /*@__PURE__*/ 2 * Math.PI;\r\n\r\nexport function xy2i(x: number, y: number, width: number, components: number = 1): number {\r\n    return components * (x + width * y);\r\n}\r\n\r\nexport function vec22i(vec: vec2, width: number, components: number = 1): number {\r\n    return xy2i(vec[0], vec[1], width, components);\r\n}\r\n\r\nexport function i2vec2(vec: vec2, i: number, width: number, components: number = 1): void {\r\n    const stride = width * components;\r\n    const p = i % stride;\r\n    const x = Math.floor(p / components);\r\n    const y = Math.floor(i / stride);\r\n    vec2.set(vec, x, y);\r\n}\r\n\r\nexport function angleClamp(v: number) {\r\n    return ((v % Tau) + Tau) % Tau;\r\n}\r\n\r\n/**\r\n * Force a value onto a range\r\n */\r\nexport function clamp(v: number, min: number, max: number) {\r\n    return Math.min(max, Math.max(min, v));\r\n}\r\n\r\nexport function deg2rad(deg: number) {\r\n    return deg * Tau / 360;\r\n}\r\n\r\nexport function rad2deg(rad: number) {\r\n    return rad * 360 / Tau;\r\n}\r\n\r\n/**\r\n * Translate a value into a range.\r\n */\r\nexport function project(v: number, min: number, max: number) {\r\n    const delta = max - min;\r\n    if (delta === 0) {\r\n        return 0;\r\n    }\r\n    else {\r\n        return (v - min) / delta;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Translate a value out of a range.\r\n */\r\n\r\nexport function unproject(v: number, min: number, max: number) {\r\n    return v * (max - min) + min;\r\n}\r\n\r\n\r\nexport function formatNumber(value: number, digits = 0): string {\r\n    if (isNumber(value)) {\r\n        return value.toFixed(digits);\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport function parseNumber(value: string): number {\r\n    if (/\\d+/.test(value)) {\r\n        return parseFloat(value);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport function formatVolume(value: number): string {\r\n    if (isNumber(value)) {\r\n        return clamp(unproject(value, 0, 100), 0, 100).toFixed(0);\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n\r\nexport function parseVolume(value: string): number {\r\n    if (/\\d+/.test(value)) {\r\n        return clamp(project(parseInt(value, 10), 0, 100), 0, 1);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n\r\n/**\r\n * Pick a value that is proportionally between two values.\r\n */\r\nexport function lerp(a: number, b: number, p: number) {\r\n    return (1 - p) * a + p * b;\r\n}\r\n\r\nexport interface IPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface ISize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface PaddingRect {\r\n    top: number;\r\n    right: number;\r\n    bottom: number;\r\n    left: number;\r\n}\r\n\r\nexport interface IRectangle extends PaddingRect {\r\n    point: IPoint;\r\n    size: ISize;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport class Point implements IPoint {\r\n    constructor(public x: number = 0, public y: number = 0) {\r\n        Object.seal(this);\r\n    }\r\n\r\n    set(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    copy(p: IPoint) {\r\n        if (isDefined(p)) {\r\n            this.x = p.x;\r\n            this.y = p.y;\r\n        }\r\n    }\r\n\r\n    toCell(character: ISize, scroll: IPoint, gridBounds: IRectangle) {\r\n        this.x = Math.round(this.x / character.width) + scroll.x - gridBounds.x;\r\n        this.y = Math.floor((this.y / character.height) - 0.25) + scroll.y;\r\n    }\r\n\r\n    inBounds(bounds: IRectangle) {\r\n        return bounds.left <= this.x\r\n            && this.x < bounds.right\r\n            && bounds.top <= this.y\r\n            && this.y < bounds.bottom;\r\n    }\r\n\r\n    clone() {\r\n        return new Point(this.x, this.y);\r\n    }\r\n\r\n    toString() {\r\n        return `(x:${this.x}, y:${this.y})`;\r\n    }\r\n}\r\n\r\nexport class Size implements ISize {\r\n    constructor(public width = 0, public height = 0) {\r\n        Object.seal(this);\r\n    }\r\n\r\n    set(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    copy(s: ISize) {\r\n        if (isDefined(s)) {\r\n            this.width = s.width;\r\n            this.height = s.height;\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        return new Size(this.width, this.height);\r\n    }\r\n\r\n    toString() {\r\n        return `<w:${this.width}, h:${this.height}>`;\r\n    }\r\n}\r\n\r\nexport class Rectangle implements IRectangle {\r\n    point: Point;\r\n    size: Size;\r\n    constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\r\n        this.point = new Point(x, y);\r\n        this.size = new Size(width, height);\r\n        Object.freeze(this);\r\n    }\r\n\r\n    get x() {\r\n        return this.point.x;\r\n    }\r\n\r\n    set x(x) {\r\n        this.point.x = x;\r\n    }\r\n\r\n    get left() {\r\n        return this.point.x;\r\n    }\r\n    set left(x) {\r\n        this.point.x = x;\r\n    }\r\n\r\n    get width() {\r\n        return this.size.width;\r\n    }\r\n    set width(width) {\r\n        this.size.width = width;\r\n    }\r\n\r\n    get right() {\r\n        return this.point.x + this.size.width;\r\n    }\r\n    set right(right) {\r\n        this.point.x = right - this.size.width;\r\n    }\r\n\r\n    get y() {\r\n        return this.point.y;\r\n    }\r\n    set y(y) {\r\n        this.point.y = y;\r\n    }\r\n\r\n    get top() {\r\n        return this.point.y;\r\n    }\r\n    set top(y) {\r\n        this.point.y = y;\r\n    }\r\n\r\n    get height() {\r\n        return this.size.height;\r\n    }\r\n    set height(height) {\r\n        this.size.height = height;\r\n    }\r\n\r\n    get bottom() {\r\n        return this.point.y + this.size.height;\r\n    }\r\n    set bottom(bottom) {\r\n        this.point.y = bottom - this.size.height;\r\n    }\r\n\r\n    get area() {\r\n        return this.width * this.height;\r\n    }\r\n\r\n    set(x: number, y: number, width: number, height: number) {\r\n        this.point.set(x, y);\r\n        this.size.set(width, height);\r\n    }\r\n\r\n    copy(r: IRectangle) {\r\n        if (isDefined(r)) {\r\n            this.point.copy(r.point);\r\n            this.size.copy(r.size);\r\n        }\r\n    }\r\n\r\n    clone() {\r\n        return new Rectangle(this.point.x, this.point.y, this.size.width, this.size.height);\r\n    }\r\n\r\n    overlap(r: IRectangle) {\r\n        const left = Math.max(this.left, r.left),\r\n            top = Math.max(this.top, r.top),\r\n            right = Math.min(this.right, r.right),\r\n            bottom = Math.min(this.bottom, r.bottom);\r\n        if (right > left && bottom > top) {\r\n            return new Rectangle(left, top, right - left, bottom - top);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    toString() {\r\n        return `[${this.point.toString()} x ${this.size.toString()}]`;\r\n    }\r\n}\r\n\r\nexport function isPowerOf2(v: number) {\r\n    return ((v != 0) && !(v & (v - 1)));\r\n}\r\n\r\nexport function nextPowerOf2(v: number) {\r\n    return Math.pow(2, Math.ceil(Math.log2(v)));\r\n}\r\n\r\nexport function prevPowerOf2(v: number) {\r\n    return Math.pow(2, Math.floor(Math.log2(v)));\r\n}\r\n\r\nexport function closestPowerOf2(v: number) {\r\n    return Math.pow(2, Math.round(Math.log2(v)));\r\n}\r\n\r\nexport function truncate(v: number): number {\r\n    if (Math.abs(v) > 0.0001) {\r\n        return v;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\ninterface Vec2 { x: number; y: number; }\r\ninterface Vec3 extends Vec2 { z: number }\r\ninterface Vec4 extends Vec3 { w: number }\r\ntype Vec = Vec2 | Vec3 | Vec4 | ArrayLike<number>;\r\n\r\nexport function warnOnNaN(val: number | Vec, msg?: string): void {\r\n    let type: string = null;\r\n    let isBad = false;\r\n\r\n    if (isNumber(val)) {\r\n        type = \"Value is\"\r\n        isBad = !isGoodNumber(val);\r\n    }\r\n    else if (\"length\" in val) {\r\n        type = \"Array contains\";\r\n        for (let i = 0; i < val.length; ++i) {\r\n            if (!isGoodNumber(val[i])) {\r\n                isBad = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        type = \"Vector component\";\r\n        if (\"w\" in val) {\r\n            isBad = isBad || !isGoodNumber(val.w);\r\n        }\r\n\r\n        if (\"z\" in val) {\r\n            isBad = isBad || !isGoodNumber(val.z);\r\n        }\r\n\r\n        isBad = isBad || !isGoodNumber(val.y);\r\n        isBad = isBad || !isGoodNumber(val.x);\r\n    }\r\n\r\n\r\n    if (isBad) {\r\n        if (msg) {\r\n            msg = `[${msg}] `\r\n        }\r\n        else {\r\n            msg = \"\";\r\n        }\r\n\r\n        console.warn(`${msg}${type} not-a-number`);\r\n    }\r\n}\r\n", "import { isNullOrUndefined } from \"./typeChecks\";\r\n\r\nexport function singleton<T>(name: string, create?: () => T): T {\r\n    const box = globalThis as any;\r\n    let value = box[name] as T;\r\n    if (isNullOrUndefined(value)) {\r\n        if (isNullOrUndefined(create)) {\r\n            throw new Error(`No value ${name} found`);\r\n        }\r\n        value = create();\r\n        box[name] = value;\r\n    }\r\n    return value;\r\n}", "\uFEFFimport { setContextSize } from \"@juniper-lib/dom/canvas\";\r\nimport { TypedEvent, TypedEventBase } from \"@juniper-lib/tslib/events/EventBase\";\r\nimport { xy2i } from \"@juniper-lib/tslib/math\";\r\nimport { singleton } from \"@juniper-lib/tslib/singleton\";\r\n\r\ntype ActionTypes = \"down\" | \"move\" | \"up\";\r\nconst actionTypes = singleton(\"Juniper:Graphics2D:Dirt:StopTypes\", () => new Map<string, ActionTypes>([\r\n    [\"mousedown\", \"down\"],\r\n    [\"mouseenter\", \"move\"],\r\n    [\"mouseleave\", \"up\"],\r\n    [\"mousemove\", \"move\"],\r\n    [\"mouseout\", \"up\"],\r\n    [\"mouseover\", \"move\"],\r\n    [\"mouseup\", \"up\"],\r\n\r\n    [\"pointerdown\", \"down\"],\r\n    [\"pointerenter\", \"move\"],\r\n    [\"pointerleave\", \"up\"],\r\n    [\"pointermove\", \"move\"],\r\n    [\"pointerrawupdate\", \"move\"],\r\n    [\"pointerout\", \"up\"],\r\n    [\"pointerup\", \"up\"],\r\n    [\"pointerover\", \"move\"],\r\n\r\n    [\"touchcancel\", \"up\"],\r\n    [\"touchend\", \"up\"],\r\n    [\"touchmove\", \"move\"],\r\n    [\"touchstart\", \"down\"]\r\n]));\r\n\r\nexport class DirtServiceUpdateEvent extends TypedEvent<\"update\">{\r\n    imgBmp: ImageBitmap;\r\n\r\n    constructor() {\r\n        super(\"update\");\r\n    }\r\n}\r\n\r\nexport interface DirtEventMap {\r\n    \"update\": DirtServiceUpdateEvent;\r\n}\r\n\r\nexport interface IDirtService extends TypedEventBase<DirtEventMap> {\r\n    checkPointer(id: number | string, x: number, y: number, type: string): void;\r\n    checkPointerUV(id: number | string, x: number, y: number, type: string): void;\r\n}\r\n\r\nexport class DirtService\r\n    extends TypedEventBase<DirtEventMap>\r\n    implements IDirtService {\r\n    private readonly sub: OffscreenCanvas;\r\n    private readonly subg: OffscreenCanvasRenderingContext2D;\r\n    private readonly updateEvt = new DirtServiceUpdateEvent();\r\n\r\n    private canvas: OffscreenCanvas = null;\r\n    private transferCanvas: OffscreenCanvas = null;\r\n    private g: OffscreenCanvasRenderingContext2D = null;\r\n    private tg: OffscreenCanvasRenderingContext2D = null;\r\n    private pointerId: number | string = null;\r\n    private fr: number = null;\r\n    private pr: number = null;\r\n    private height: number = null;\r\n    private x: number = null;\r\n    private y: number = null;\r\n    private lx: number = null;\r\n    private ly: number = null;\r\n\r\n    private components: number = null;\r\n    private data: Uint8ClampedArray = null;\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.sub = new OffscreenCanvas(this.height, this.height);\r\n        this.subg = this.sub.getContext(\"2d\", {\r\n            alpha: false,\r\n            desynchronized: true,\r\n            willReadFrequently: true\r\n        });\r\n    }\r\n\r\n    init(width: number, height: number, fr: number, pr: number): Promise<void> {\r\n        this.transferCanvas = new OffscreenCanvas(width, height);\r\n        this.tg = this.transferCanvas.getContext(\"2d\");\r\n        this.canvas = new OffscreenCanvas(width, height);\r\n        this.g = this.canvas.getContext(\"2d\", {\r\n            alpha: false,\r\n            desynchronized: true\r\n        });\r\n        this.g.fillStyle = \"rgb(50%, 50%, 50%)\";\r\n        this.g.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        const imgData = this.g.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n        const { data } = imgData;\r\n        const components = data.length / (width * height);\r\n        for (let i = 0; i < data.length; i += components) {\r\n            const v = Math.floor(50 * (Math.random() - 0.5));\r\n            for (let c = 0; c < components - 1; ++c) {\r\n                data[i + c] += v;\r\n            }\r\n        }\r\n\r\n        this.g.putImageData(imgData, 0, 0);\r\n\r\n        this.fr = fr;\r\n        this.pr = pr;\r\n        this.height = 2 * (this.fr + this.pr) + 1;\r\n\r\n        this.onUpdate();\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private onUpdate() {\r\n        this.tg.drawImage(this.canvas, 0, 0);\r\n        this.updateEvt.imgBmp = this.transferCanvas.transferToImageBitmap();\r\n        this.dispatchEvent(this.updateEvt);\r\n    }\r\n\r\n    private I(x: number, y: number) {\r\n        return xy2i(x, y + this.fr + this.pr, this.sub.width, this.components);\r\n    }\r\n\r\n    private GET(x: number, y: number) {\r\n        return this.data[this.I(x, y)] / 255;\r\n    }\r\n\r\n    private SET(x: number, y: number, v: number) {\r\n        return this.data[this.I(x, y)] = 255 * v;\r\n    }\r\n\r\n    private update() {\r\n        if (this.pointerId !== null && this.canvas) {\r\n            const dx = this.lx - this.x;\r\n            const dy = this.ly - this.y;\r\n            if ((Math.abs(dx) + Math.abs(dy)) > 0) {\r\n                const a = Math.atan2(dy, dx) + Math.PI;\r\n                const d = Math.round(Math.sqrt(dx * dx + dy * dy));\r\n\r\n                setContextSize(this.subg, d + this.fr + this.pr, this.height);\r\n                this.subg.save();\r\n                this.subg.translate(0, this.fr + this.pr);\r\n                this.subg.rotate(-a);\r\n                this.subg.translate(-this.lx, -this.ly);\r\n                this.subg.drawImage(this.canvas, 0, 0);\r\n                this.subg.restore();\r\n\r\n                const imgData = this.subg.getImageData(0, 0, this.sub.width, this.sub.height);\r\n                this.data = imgData.data;\r\n                this.components = this.data.length / (this.sub.width * this.height);\r\n\r\n                const start = this.GET(0, 0);\r\n                const level = Math.max(0, start - 0.25);\r\n\r\n                let accum = 0;\r\n                for (let x = 0; x < d; ++x) {\r\n                    const here = this.GET(x, 0);\r\n                    accum += here - level\r\n                    this.SET(x, 0, level);\r\n                    for (let y = -this.fr; y <= this.fr; ++y) {\r\n                        const dx = this.fr - Math.abs(y);\r\n                        const here = this.GET(x + dx, y);\r\n                        accum += here - level;\r\n                        this.SET(x + dx, y, level);\r\n                    }\r\n\r\n                    const deposit = level / (2 * this.fr * this.pr);\r\n                    for (let y = -this.fr - this.pr; y <= this.fr + this.pr && accum > 0; ++y) {\r\n                        if (y < -this.fr || this.fr < y) {\r\n                            const dx = this.fr - Math.abs(y);\r\n                            const there = this.GET(x + dx, y);\r\n                            const v = Math.min(accum, deposit);\r\n                            this.SET(x + dx, y, there + v);\r\n                            accum -= v;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (accum > 0) {\r\n                    const deposit = accum / (2 * this.fr * this.pr);\r\n                    for (let y = -this.fr - this.pr; y <= this.fr + this.pr && accum > 0; ++y) {\r\n                        if (y < -this.fr || this.fr < y) {\r\n                            const dx = this.fr - Math.abs(y);\r\n                            const there = this.GET(d + dx, y);\r\n                            const v = Math.min(accum, deposit);\r\n                            this.SET(d + dx, y, there + v);\r\n                            accum -= v;\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n                // normalize green and blue channels\r\n                for (let i = 0; i < this.data.length; i += this.components) {\r\n                    const p = this.data[i];\r\n                    this.data[i + 1] = p;\r\n                    this.data[i + 2] = p;\r\n                }\r\n\r\n                this.subg.putImageData(imgData, 0, 0);\r\n\r\n                this.g.save();\r\n                this.g.translate(this.lx, this.ly);\r\n                this.g.rotate(a);\r\n                this.g.translate(-0, -this.fr - this.pr);\r\n                this.g.drawImage(this.sub, 0, 0);\r\n                this.g.restore();\r\n\r\n                this.onUpdate();\r\n            }\r\n        }\r\n\r\n        this.lx = this.x;\r\n        this.ly = this.y;\r\n    }\r\n\r\n    checkPointer(id: number | string, x: number, y: number, type: string) {\r\n        const action = actionTypes.get(type) || type;\r\n        if (this.pointerId === null) {\r\n            if (action === \"down\") {\r\n                this.pointerId = id;\r\n                this.lx = this.x = x;\r\n                this.ly = this.y = y;\r\n                this.update();\r\n            }\r\n        }\r\n        else if (id === this.pointerId) {\r\n            this.x = x;\r\n            this.y = y;\r\n            this.update();\r\n\r\n            if (action === \"up\") {\r\n                this.pointerId = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    checkPointerUV(id: number | string, x: number, y: number, type: string) {\r\n        this.checkPointer(id, x * this.canvas.width, (1 - y) * this.canvas.height, type);\r\n    }\r\n}", "\uFEFFimport { WorkerServer } from \"@juniper-lib/workers/WorkerServer\";\r\nimport { DirtEventMap, DirtService } from \"./DirtService\";\r\n\r\nexport class DirtWorkerServer extends WorkerServer<DirtEventMap> {\r\n    constructor(self: DedicatedWorkerGlobalScope) {\r\n        super(self);\r\n\r\n        const dirtService = new DirtService();\r\n        this.addMethod(dirtService, \"init\", dirtService.init.bind(dirtService));\r\n        this.addVoidMethod(dirtService, \"checkPointer\", dirtService.checkPointer.bind(dirtService));\r\n        this.addVoidMethod(dirtService, \"checkPointerUV\", dirtService.checkPointerUV.bind(dirtService));\r\n        this.addEvent(dirtService, \"update\", (evt) => evt.imgBmp, (imgBmp) => [imgBmp]);\r\n    }\r\n}", "\uFEFFimport { DirtWorkerServer } from \"./DirtWorkerServer\";\r\n\r\n(globalThis as any).server = new DirtWorkerServer((globalThis as any) as DedicatedWorkerGlobalScope);"],
  "mappings": "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",
  "names": ["type", "dx", "here", "type"]
}
